{
  
    
        "post0": {
            "title": "College Board Notes",
            "content": "Unit 1 - Primitives . Unit 2 - Using Objects . Unit 3 - Booleans . Unit 4 - Iteration . Unit 5 - Writing Classes . Hello . Unit Score Grading . Unit 1 - Primitives | 0.9/1 | link | . Unit 2 - Using Objects | 0.95/1 | Link | . Unit 3 - Booleans | 0.9/1 | Link | . Unit 4 - Iteration | 1/1 | Link | . Total | 3.75/4 | No Link | .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2023/06/10/CollegeBoardPrep.html",
            "relUrl": "/college%20board/java/2023/06/10/CollegeBoardPrep.html",
            "date": " • Jun 10, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Hash Maps & Big O Analysis",
            "content": "Selection Sort . public class Selection { public static void selectionSort(int[] arr) { int n = arr.length; for (int i = 0; i &lt; n - 1; i++) { int minIndex = i; for (int j = i + 1; j &lt; n; j++) { if (arr[j] &lt; arr[minIndex]) { minIndex = j; } } if (minIndex != i) { int temp = arr[minIndex]; arr[minIndex] = arr[i]; arr[i] = temp; } } } public static void main(String[] args) { int[] array = {5, 3, 8, 4, 2}; selectionSort(array); System.out.println(Arrays.toString(array)); // [2, 3, 4, 5, 8] } } Selection.main(null); . [2, 3, 4, 5, 8] . Bubble Sort . public class BubbleSort { public static void main(String[] args) { int[] array = {5, 3, 8, 4, 2}; // prints the original array System.out.println(&quot;Original Array:&quot;); printArray(array); // sorts the array using bubble sort bubbleSort(array); // prints the sorted array System.out.println(&quot;Sorted Array:&quot;); printArray(array); } public static void bubbleSort(int[] array) { int n = array.length; for (int i = 0; i &lt; n-1; i++) { for (int j = 0; j &lt; n-i-1; j++) { if (array[j] &gt; array[j+1]) { // swaps array[j] and array[j+1] int temp = array[j]; array[j] = array[j+1]; array[j+1] = temp; } } } } public static void printArray(int[] array) { for (int i = 0; i &lt; array.length; i++) { System.out.print(array[i] + &quot; &quot;); } System.out.println(); } } BubbleSort.main(null); . Original Array: 5 3 8 4 2 Sorted Array: 2 3 4 5 8 . Merge Sort . public class MergeSort { public static void mergeSort(int[] arr, int left, int right) { if (left &lt; right) { int mid = (left + right) / 2; mergeSort(arr, left, mid); mergeSort(arr, mid + 1, right); merge(arr, left, mid, right); } } public static void merge(int[] arr, int left, int mid, int right) { int[] temp = new int[right - left + 1]; int i = left, j = mid + 1, k = 0; while (i &lt;= mid &amp;&amp; j &lt;= right) { if (arr[i] &lt; arr[j]) { temp[k++] = arr[i++]; } else { temp[k++] = arr[j++]; } } while (i &lt;= mid) { temp[k++] = arr[i++]; } while (j &lt;= right) { temp[k++] = arr[j++]; } for (i = left; i &lt;= right; i++) { arr[i] = temp[i - left]; } } public static void main(String[] args) { int[] arr = {5, 4, 3, 2, 1}; mergeSort(arr, 0, arr.length - 1); for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } } } MergeSort.main(null); . 1 2 3 4 5 . Insertion Sort . public class InsertionSort { public static void insertionSort(int[] arr) { int n = arr.length; for (int i = 1; i &lt; n; ++i) { int key = arr[i]; int j = i - 1; while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) { arr[j + 1] = arr[j]; j = j - 1; } arr[j + 1] = key; } } public static void main(String[] args) { int[] array = {5, 3, 8, 4, 2}; insertionSort(array); System.out.println(Arrays.toString(array)); } } InsertionSort.main(null); . [2, 3, 4, 5, 8] . Time to run . public class sortTimes { // selection sort public static void selectionSort(int[] arr) { int n = arr.length; for (int i = 0; i &lt; n - 1; i++) { int minIndex = i; for (int j = i + 1; j &lt; n; j++) { if (arr[j] &lt; arr[minIndex]) { minIndex = j; } } if (minIndex != i) { int temp = arr[minIndex]; arr[minIndex] = arr[i]; arr[i] = temp; } } } // bubble sort public static void bubbleSort(int[] array) { int n = array.length; for (int i = 0; i &lt; n-1; i++) { for (int j = 0; j &lt; n-i-1; j++) { if (array[j] &gt; array[j+1]) { // swaps array[j] and array[j+1] int temp = array[j]; array[j] = array[j+1]; array[j+1] = temp; } } } } // merge sort public static void mergeSort(int[] arr, int left, int right) { if (left &lt; right) { int mid = (left + right) / 2; mergeSort(arr, left, mid); mergeSort(arr, mid + 1, right); merge(arr, left, mid, right); } } public static void merge(int[] arr, int left, int mid, int right) { int[] temp = new int[right - left + 1]; int i = left, j = mid + 1, k = 0; while (i &lt;= mid &amp;&amp; j &lt;= right) { if (arr[i] &lt; arr[j]) { temp[k++] = arr[i++]; } else { temp[k++] = arr[j++]; } } while (i &lt;= mid) { temp[k++] = arr[i++]; } while (j &lt;= right) { temp[k++] = arr[j++]; } for (i = left; i &lt;= right; i++) { arr[i] = temp[i - left]; } } // insertion sort public static void insertionSort(int[] arr) { int n = arr.length; for (int i = 1; i &lt; n; ++i) { int key = arr[i]; int j = i - 1; while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) { arr[j + 1] = arr[j]; j = j - 1; } arr[j + 1] = key; } } public static void main(String[] args) { Integer [] integerArray = {}; // create an array ArrayList&lt;Integer&gt; integerArrayList = new ArrayList&lt;Integer&gt; (Arrays.asList(integerArray)); // convert array to array list // input 5000 random integers between 0 and 10,000 into arrayList for (int i = 0; i &lt; 5000; i++) { Random random = new Random(); int rn = random.nextInt(10000); integerArrayList.add(rn); } int [] arr0 = integerArrayList.stream().mapToInt(i -&gt; i).toArray(); System.out.println(Arrays.toString(arr0)); String selectionTimes = &quot;Times for Selection Sort: &quot;; String bubbleTimes = &quot;Times for Bubble Sort: &quot;; String mergeTimes = &quot;Times for Merge Sort: &quot;; String insertionTimes = &quot;Times for Insertion Sort: &quot;; for (int i = 0; i &lt; 12; i++) { // selection sort int[] arr1 = arr0; long selectionStart = System.nanoTime(); // get time before selection sort selectionSort(arr1); long selectionEnd = System.nanoTime(); // get time after selection sort double selectionTotalTime = selectionEnd - selectionStart; // time to sort // System.out.println(&quot;Selection: &quot; + Arrays.toString(arr1)); selectionTimes += selectionTotalTime + &quot;, &quot;; //System.out.println(&quot;Time for Selection Sort: &quot; + selectionTotalTime); // bubble sort int[] arr2 = arr0; long bubbleStart = System.nanoTime(); // get time before bubble sort bubbleSort(arr2); long bubbleEnd = System.nanoTime(); // get time after bubble sort double bubbleTotalTime = bubbleEnd - bubbleStart; // time to sort // System.out.println(&quot;Bubble: &quot; + Arrays.toString(arr2)); // System.out.println(&quot;Time for Bubble Sort: &quot; + bubbleTotalTime); bubbleTimes += bubbleTotalTime + &quot;, &quot;; // merge sort int[] arr3 = arr0; long mergeStart = System.nanoTime(); // get time before merge sort mergeSort(arr3, 0, arr3.length - 1); long mergeEnd = System.nanoTime(); // get tune after merge sort double mergeTotalTime = mergeEnd - mergeStart; // time to sort // System.out.println(&quot;Merge: &quot; + Arrays.toString(arr3)); // System.out.println(&quot;Time for Merge Sort: &quot; + mergeTotalTime); mergeTimes += mergeTotalTime + &quot;, &quot;; // insertion sort int[] arr4 = arr0; long insertionStart = System.nanoTime(); // get time before merge sort insertionSort(arr4); long insertionEnd = System.nanoTime(); // get tune after merge sort double insertionTotalTime = insertionEnd - insertionStart; // time to sort // System.out.println(&quot;Insertion: &quot; + Arrays.toString(arr4)); // System.out.println(&quot;Time for Insertion Sort: &quot; + insertionTotalTime); insertionTimes += insertionTotalTime + &quot;, &quot;; } System.out.println(selectionTimes); System.out.println(bubbleTimes); System.out.println(mergeTimes); System.out.println(insertionTimes); //System.out.println(&quot;Sorted: &quot; + Arrays.toString(arr4)); } } sortTimes.main(null); . [9187, 3077, 6175, 6522, 3152, 9855, 4147, 644, 4216, 1149, 1738, 8721, 8655, 4207, 4502, 5169, 7139, 2572, 8556, 3902, 9580, 6544, 1368, 1409, 5992, 5716, 8766, 73, 5989, 8153, 8636, 1902, 1708, 6335, 352, 743, 746, 4738, 9129, 6812, 409, 5090, 9372, 7259, 8012, 9431, 1314, 6633, 657, 7070, 9190, 5054, 7436, 6510, 915, 7730, 3208, 1749, 8444, 313, 1882, 4897, 4104, 2898, 556, 7738, 5854, 5246, 4751, 4461, 2575, 1367, 511, 8475, 5880, 9548, 4274, 59, 9873, 5576, 6934, 6482, 7241, 8955, 7786, 1700, 1801, 3791, 4532, 9476, 5967, 7749, 7780, 5337, 4619, 9448, 4239, 342, 1336, 9312, 2387, 643, 2073, 8969, 6153, 6633, 7998, 8915, 1048, 8989, 6452, 2499, 9796, 7318, 9667, 7859, 9353, 3095, 7617, 5285, 1386, 5851, 151, 1290, 6232, 9654, 4596, 5485, 4250, 3085, 9805, 8341, 5242, 5134, 4562, 2733, 7574, 9765, 4633, 6677, 2178, 9596, 6237, 8806, 123, 338, 4179, 5099, 8986, 9869, 9900, 3081, 4489, 2092, 1512, 5686, 7026, 6567, 4521, 5578, 8672, 3477, 3473, 7347, 9218, 5267, 9455, 9168, 5227, 4839, 2749, 8829, 6585, 5361, 6970, 3873, 5044, 2426, 4071, 4386, 6009, 8173, 7537, 9227, 4891, 2456, 8567, 9628, 6952, 8717, 9763, 7766, 6837, 1993, 4994, 4474, 3722, 8458, 8830, 412, 2027, 6874, 9526, 7169, 3887, 839, 7876, 5261, 5601, 68, 3687, 7619, 5897, 401, 3771, 361, 2876, 8420, 7298, 4749, 5050, 7975, 7983, 6426, 3171, 7953, 1266, 2330, 5721, 959, 8705, 1249, 4147, 5223, 5478, 4426, 50, 5430, 4715, 1448, 4945, 5503, 3620, 3348, 8441, 6220, 6255, 6328, 4607, 4712, 2821, 9695, 1465, 466, 6678, 2019, 5087, 4273, 827, 1977, 6877, 9490, 5789, 1164, 7184, 2647, 4088, 1119, 6132, 5896, 8343, 5709, 5934, 3506, 3974, 4681, 4953, 338, 9880, 498, 3020, 5391, 3389, 7940, 8090, 152, 1710, 1543, 8697, 5732, 2229, 1985, 1514, 4044, 367, 4580, 203, 7348, 3030, 628, 8653, 7159, 7495, 1934, 1018, 5525, 1818, 7103, 6674, 9946, 2599, 2974, 3038, 8666, 7633, 8375, 5651, 2928, 7114, 5949, 8722, 3866, 2711, 5877, 4346, 6903, 5665, 5388, 3549, 46, 9742, 6331, 2774, 5474, 454, 9162, 1701, 7640, 8019, 2451, 7874, 6217, 9662, 2581, 9000, 9669, 2474, 3786, 4361, 1200, 933, 5655, 3597, 7168, 8078, 8959, 416, 3383, 1471, 2202, 1451, 1339, 1820, 8906, 6225, 6293, 4765, 5464, 3756, 9213, 8473, 921, 8250, 810, 4137, 7020, 5913, 3607, 8387, 6352, 4255, 5143, 430, 5772, 7498, 1116, 9526, 5384, 6265, 9053, 522, 4552, 8599, 3576, 5202, 148, 9566, 2757, 7641, 2180, 3307, 8791, 1429, 4836, 2737, 9759, 5490, 508, 3600, 8598, 1800, 518, 8121, 7996, 9925, 8608, 4795, 9934, 1406, 9938, 5053, 4462, 7230, 3482, 6342, 1354, 7487, 2308, 2725, 6619, 8980, 3490, 3038, 7392, 7329, 6231, 5901, 2656, 8546, 1442, 9677, 2487, 2956, 2421, 2977, 264, 5534, 9947, 8628, 3055, 9885, 8738, 7347, 1108, 3201, 531, 5620, 2124, 4548, 8785, 6304, 3589, 1813, 1238, 6448, 4243, 3501, 1062, 764, 2120, 5285, 8474, 1868, 9135, 1958, 9794, 7825, 2716, 2759, 8502, 2492, 1464, 9712, 8185, 3449, 7664, 5411, 7860, 6045, 9260, 5234, 48, 8091, 7794, 8311, 1598, 7638, 2603, 1428, 1171, 7007, 9016, 7675, 1851, 2869, 554, 4960, 2689, 8509, 3608, 1308, 5749, 6790, 1932, 1804, 7336, 6640, 7543, 4252, 757, 9006, 4739, 2719, 6010, 1217, 9611, 6086, 6786, 6368, 4223, 8133, 882, 6854, 6406, 2294, 1762, 3425, 9675, 4586, 3498, 2301, 3226, 1176, 3738, 215, 1467, 4185, 2282, 5886, 4512, 5543, 3624, 1056, 3830, 6590, 3784, 7661, 4681, 880, 8741, 7924, 6946, 6973, 6184, 6341, 749, 2271, 7980, 7721, 1770, 4792, 6149, 2478, 3260, 2977, 3947, 5024, 1426, 8491, 7915, 5144, 5181, 7166, 8045, 4308, 3144, 7491, 6601, 5981, 6362, 5486, 6366, 825, 3591, 3859, 2876, 2338, 2220, 577, 9922, 2426, 7740, 6689, 7029, 2692, 6824, 7235, 2890, 7703, 7652, 993, 6308, 5822, 3461, 2899, 7945, 693, 1760, 7415, 7973, 8514, 9189, 1408, 6150, 3550, 4756, 4102, 1261, 2127, 7077, 19, 9146, 2655, 3068, 9823, 7027, 6319, 3515, 315, 4993, 3585, 7485, 9428, 9464, 7612, 7287, 2178, 263, 479, 676, 7602, 5191, 2786, 7397, 955, 5927, 6915, 2770, 1584, 6478, 3567, 905, 3583, 9222, 1511, 9022, 1856, 3453, 7088, 4459, 7299, 3260, 5376, 1735, 2368, 3758, 1764, 4702, 2403, 8080, 1484, 2326, 4073, 1580, 6199, 4113, 1257, 4381, 4692, 3378, 2460, 2985, 2944, 2214, 3573, 6556, 9736, 7932, 6679, 1325, 6824, 1329, 187, 650, 5407, 1268, 2201, 3019, 499, 9879, 8029, 384, 7023, 6176, 3681, 7472, 653, 3663, 8669, 6011, 144, 8843, 9438, 848, 9449, 2978, 1887, 9008, 8204, 6297, 6044, 1827, 5811, 2025, 7390, 2685, 2134, 2070, 9854, 8544, 3288, 830, 3278, 7424, 7870, 9116, 2138, 9488, 2953, 3332, 4364, 7109, 6374, 6022, 7521, 1386, 9578, 9160, 7623, 4576, 2396, 5672, 7177, 3655, 207, 6528, 2916, 4008, 7782, 2704, 2555, 507, 5336, 1171, 7740, 9049, 5504, 7534, 1806, 6854, 1844, 4714, 5443, 40, 1700, 9112, 3613, 7651, 8358, 1753, 9965, 6683, 9352, 7945, 6518, 6370, 6082, 3317, 638, 5565, 1375, 3929, 2039, 7110, 8861, 3405, 4927, 8972, 9598, 546, 9303, 8430, 4456, 468, 4390, 3334, 767, 4364, 9112, 4990, 2760, 2926, 9927, 247, 997, 6274, 8664, 548, 3098, 5561, 8743, 2684, 7214, 2838, 4835, 3932, 9792, 5245, 6152, 7032, 8425, 9183, 3879, 5810, 7851, 8125, 1785, 9420, 1694, 4978, 4200, 508, 1610, 4699, 293, 7338, 7123, 5901, 3072, 6245, 3360, 1032, 8171, 9028, 1955, 1346, 9962, 9979, 7429, 2564, 6006, 5678, 8147, 3572, 3175, 1482, 8258, 4413, 374, 6242, 8270, 1178, 3203, 1205, 7272, 938, 1331, 6508, 1259, 4997, 2103, 3440, 3028, 1137, 9353, 2737, 7136, 4940, 813, 668, 1306, 3469, 6998, 6639, 1614, 5517, 9100, 2954, 580, 4646, 5434, 7165, 2896, 3224, 3012, 7050, 6028, 4689, 1562, 1126, 7929, 8535, 7070, 8470, 905, 3471, 3115, 2197, 7887, 7620, 2201, 3648, 2520, 411, 5780, 5749, 6454, 5379, 6739, 149, 273, 3551, 6375, 8528, 8647, 4521, 7695, 4153, 8587, 9764, 6465, 881, 5757, 5103, 7496, 1273, 782, 8443, 1361, 9778, 5218, 5107, 7279, 3964, 2109, 4288, 3258, 1376, 1161, 3784, 2992, 4740, 5201, 9096, 5664, 8540, 3825, 7615, 2146, 934, 5809, 2753, 3628, 8090, 2009, 7815, 9658, 6166, 2662, 7542, 3737, 5452, 4826, 7185, 198, 4357, 624, 1784, 1954, 6175, 22, 1689, 2077, 3222, 7326, 4768, 4448, 3215, 7924, 9294, 2598, 4627, 9211, 8059, 7852, 2375, 5436, 1557, 546, 1603, 1217, 4292, 8171, 7885, 3117, 5070, 3689, 4122, 8653, 1773, 247, 7625, 9385, 9789, 9668, 5134, 3853, 2898, 7479, 5689, 6066, 5368, 2628, 1113, 7843, 4942, 9695, 735, 5434, 3466, 8775, 8589, 2067, 465, 4232, 8540, 1261, 5382, 703, 1767, 1839, 4565, 6356, 7471, 8496, 5360, 5954, 7790, 1144, 8950, 252, 8963, 8368, 3181, 3967, 1259, 3615, 5322, 4383, 8015, 3548, 1918, 3640, 2819, 6775, 9966, 9869, 5110, 4683, 4003, 8232, 2036, 7155, 7757, 1653, 6808, 8207, 2561, 8262, 7635, 6906, 6427, 5905, 8738, 1263, 1197, 545, 9278, 1695, 1675, 4997, 8700, 3828, 4802, 3074, 1045, 8393, 5460, 5864, 2534, 4140, 719, 923, 5813, 8195, 8759, 6493, 3061, 8632, 5220, 7496, 9783, 6262, 5109, 4285, 9495, 40, 3586, 1275, 6356, 5805, 4772, 7488, 6079, 4216, 7426, 4951, 470, 4330, 9355, 2818, 5237, 3808, 1932, 8622, 8132, 6438, 3965, 9128, 2283, 2092, 9195, 3692, 9149, 7851, 461, 7127, 5614, 4277, 1847, 6979, 6793, 915, 4896, 4813, 9363, 3161, 4721, 264, 1810, 5631, 5394, 6387, 9136, 4023, 163, 7537, 5048, 5996, 7109, 756, 4329, 4917, 2189, 3130, 4628, 8421, 3848, 1796, 2921, 8301, 6998, 946, 1251, 5778, 3122, 5902, 5923, 9343, 1650, 1330, 2467, 3932, 5525, 3721, 3069, 686, 1388, 7111, 1484, 316, 2420, 7118, 3698, 5350, 3600, 6328, 9280, 1376, 2928, 5333, 6738, 1389, 7549, 9894, 9773, 636, 3337, 9071, 3445, 1932, 4713, 1066, 1752, 8601, 6659, 1479, 9335, 9505, 5756, 8348, 6510, 4237, 4775, 520, 8477, 2002, 5835, 6193, 2960, 7187, 4387, 8725, 5400, 1986, 9755, 8542, 3259, 2965, 9866, 3840, 7524, 1120, 5089, 9695, 3925, 9511, 9851, 5654, 8205, 5022, 1991, 1877, 4636, 3348, 8382, 2967, 8575, 2739, 3860, 9415, 3828, 4299, 4623, 6096, 8110, 2509, 5961, 3149, 3842, 8749, 4797, 901, 8030, 7786, 7586, 8071, 2514, 3048, 9467, 700, 6655, 7719, 9635, 5271, 8661, 2651, 5723, 6022, 2347, 8361, 760, 3484, 5417, 5834, 5071, 1357, 2507, 4781, 6299, 3883, 7635, 9166, 5064, 407, 4426, 4594, 498, 8479, 3276, 1518, 8130, 1897, 5086, 2024, 7099, 2377, 6335, 6613, 8798, 1945, 5530, 7986, 1734, 3358, 384, 8571, 8757, 387, 1601, 6763, 7573, 3945, 8278, 6231, 2209, 3433, 5421, 8741, 3769, 7176, 5176, 1668, 7346, 5925, 7929, 780, 9447, 8252, 7787, 8237, 8675, 738, 9059, 5946, 4762, 8399, 4140, 9865, 267, 1046, 2310, 1745, 123, 7633, 2375, 3255, 7692, 3181, 6355, 3137, 9740, 3163, 5093, 1341, 7399, 6757, 9557, 3173, 3848, 9808, 878, 1702, 6925, 7335, 1366, 6919, 1084, 2467, 3938, 2137, 9547, 2443, 1306, 5963, 387, 4397, 2963, 8295, 5314, 2496, 5503, 8543, 6377, 7355, 438, 2238, 7737, 2589, 1741, 8486, 7247, 2546, 1933, 6816, 8075, 7145, 7606, 4603, 976, 4267, 2577, 7404, 7068, 6078, 637, 4808, 3625, 587, 2421, 2976, 2555, 1604, 9976, 6588, 2849, 4826, 426, 6657, 2332, 1402, 8779, 7838, 8517, 3632, 8488, 6815, 7485, 7613, 3541, 2730, 2443, 6239, 8607, 2697, 6463, 5310, 1698, 8957, 5687, 3508, 7099, 3553, 945, 1530, 9075, 4425, 9773, 2944, 7382, 2856, 285, 2247, 9712, 7324, 3191, 8883, 2570, 9539, 3130, 7920, 8755, 1970, 1457, 5758, 2714, 4632, 4104, 7080, 9127, 322, 7229, 5247, 6115, 4725, 3439, 7901, 3794, 9393, 4990, 4749, 8149, 7550, 5589, 4984, 3871, 2292, 805, 7031, 1811, 6245, 5135, 1421, 2454, 540, 6308, 846, 9403, 5743, 4172, 5914, 9843, 7810, 3930, 9543, 1013, 9378, 5573, 9102, 7109, 7753, 3975, 6382, 1460, 4713, 8043, 2155, 5403, 2007, 1427, 9092, 9874, 4555, 7958, 3519, 4973, 9065, 1074, 6627, 3034, 3820, 331, 1820, 3073, 5732, 8505, 9233, 1094, 1047, 1931, 2432, 5895, 7723, 6926, 2466, 6591, 670, 3546, 9348, 7275, 8332, 6593, 987, 4361, 4207, 1125, 9803, 5360, 7010, 1554, 9912, 1613, 5345, 9176, 4809, 9347, 3265, 8653, 4843, 5855, 5008, 5792, 9112, 8831, 2597, 7264, 7379, 7943, 5364, 6972, 1756, 1523, 791, 5915, 4449, 7667, 5709, 5861, 2356, 1313, 2940, 6982, 2830, 8994, 2602, 5174, 7479, 8316, 3017, 960, 4531, 9297, 3282, 5246, 8899, 2447, 1827, 7330, 2338, 8877, 5205, 3910, 3887, 8468, 1898, 7498, 4851, 9974, 2041, 320, 7323, 2801, 7201, 6120, 442, 3307, 7405, 7642, 9425, 9183, 2730, 9348, 5644, 6085, 8954, 8298, 2009, 7637, 4429, 1458, 5475, 4898, 5018, 6724, 7347, 4949, 9880, 7290, 2513, 375, 561, 6101, 6063, 3369, 4848, 8335, 3488, 6403, 8169, 4652, 7930, 5076, 4371, 9583, 5254, 5002, 5472, 3659, 1905, 813, 5176, 8031, 4751, 1746, 2725, 2353, 7090, 6948, 1667, 3813, 9094, 8051, 1199, 9886, 8767, 2811, 5252, 1443, 4404, 9066, 4656, 1404, 7169, 2615, 4715, 152, 1035, 4838, 9575, 6630, 463, 3220, 7176, 5441, 4024, 5661, 5132, 1218, 4942, 7466, 4577, 8636, 7757, 1955, 2880, 8596, 4832, 2476, 5264, 1864, 7595, 6827, 5934, 2557, 74, 8178, 3048, 8920, 9531, 753, 9657, 1258, 335, 9967, 6303, 4714, 290, 3825, 7217, 8144, 8377, 9329, 4027, 9277, 9922, 6179, 6424, 3936, 7103, 9227, 1364, 2432, 3808, 5971, 1860, 3350, 3675, 8207, 398, 9308, 8755, 7064, 1877, 8596, 3701, 3796, 3728, 2351, 6717, 2777, 2768, 1253, 8559, 1637, 5783, 7015, 5903, 5240, 9679, 48, 6911, 8626, 9228, 1649, 4756, 6479, 8817, 6009, 8328, 1365, 5325, 2804, 8469, 7621, 4127, 8626, 955, 1072, 9182, 6280, 8548, 2865, 1928, 3603, 8379, 9676, 7708, 7101, 2023, 9658, 7756, 9543, 5778, 9356, 9597, 5, 4686, 9010, 1892, 9720, 2645, 9285, 2493, 9911, 7079, 7365, 6960, 6635, 4717, 1320, 9859, 5845, 9146, 9483, 5203, 9462, 5410, 6618, 977, 952, 8620, 1616, 3320, 2380, 6122, 3255, 587, 575, 9061, 866, 4872, 8661, 1331, 9535, 4835, 5858, 3765, 8941, 753, 9238, 4575, 5431, 5362, 3366, 6765, 2633, 3442, 3918, 5345, 9745, 7392, 8038, 7901, 9539, 5188, 2673, 3868, 9965, 8770, 6261, 1907, 9921, 2292, 6658, 7940, 5211, 9401, 5674, 4890, 8645, 5108, 1379, 4136, 8633, 5562, 8383, 1461, 5900, 9802, 3410, 232, 2359, 2042, 3323, 3624, 9571, 8194, 9122, 5153, 7593, 5179, 2231, 7600, 3391, 2470, 8340, 1576, 5425, 7401, 9999, 1412, 5380, 8571, 8601, 3164, 6504, 5516, 9533, 6288, 1249, 7432, 2297, 6123, 1001, 8760, 9377, 7609, 2220, 4569, 8578, 4076, 3961, 3737, 5733, 7110, 5735, 2768, 1742, 8869, 5063, 3536, 8577, 9135, 1182, 4632, 4812, 6831, 918, 4676, 6022, 8207, 5425, 4947, 4728, 7643, 4967, 2733, 7543, 1510, 5962, 4135, 3413, 3898, 3103, 3084, 7556, 4268, 2295, 9507, 9059, 9950, 6982, 8775, 3352, 6278, 9673, 7059, 7538, 3427, 5756, 8945, 5250, 2116, 9723, 7436, 7565, 9150, 7784, 3394, 9367, 6574, 7157, 7271, 3060, 1554, 6223, 6855, 5306, 3156, 3438, 6932, 1255, 4042, 4693, 6239, 1729, 4377, 4229, 8979, 520, 3152, 4392, 9158, 7274, 3740, 5131, 6026, 7237, 5369, 9871, 1424, 6505, 4047, 1838, 9441, 3554, 6424, 8725, 5560, 5379, 1987, 222, 9570, 79, 617, 1417, 7239, 6545, 4180, 4445, 9652, 250, 7821, 2610, 211, 4287, 1592, 9787, 9075, 7705, 1312, 5477, 1564, 4387, 3516, 3626, 4685, 434, 734, 6895, 992, 3762, 2954, 7739, 5144, 6471, 8917, 5203, 9226, 5861, 1646, 6370, 222, 5451, 4649, 9063, 682, 3310, 3904, 3662, 9612, 7639, 7498, 5893, 3051, 6838, 41, 787, 4480, 4121, 8409, 9184, 5109, 3133, 8225, 8409, 6810, 2871, 8846, 5640, 116, 5335, 8640, 4848, 6097, 8870, 880, 5038, 8475, 70, 3645, 4691, 1697, 645, 2470, 7979, 3474, 2460, 9408, 2598, 4543, 4690, 869, 1645, 4230, 5192, 211, 4978, 4236, 927, 4964, 8337, 268, 3324, 4368, 5872, 3075, 3385, 2198, 6523, 4175, 6475, 8496, 8096, 472, 9395, 455, 5178, 8515, 222, 9188, 4528, 4191, 9563, 1635, 3126, 704, 5445, 1111, 2035, 2489, 4954, 5664, 7702, 4165, 1184, 4168, 121, 7195, 6415, 1215, 4897, 9841, 980, 6410, 4988, 8787, 5516, 117, 9665, 6336, 9355, 1794, 808, 8938, 2066, 9081, 7285, 3802, 4550, 9248, 6146, 2789, 7711, 3441, 2633, 311, 8636, 7738, 7526, 7649, 4246, 7219, 7768, 1820, 2118, 5896, 2294, 3882, 756, 3189, 7076, 2114, 3870, 3149, 3892, 1302, 4, 5475, 6234, 722, 4947, 2351, 3670, 2576, 9257, 6093, 4871, 9033, 2786, 7802, 7218, 2790, 6046, 5519, 1835, 2581, 2637, 5598, 9996, 8193, 303, 4576, 4604, 5981, 7191, 1686, 4333, 4961, 3010, 5755, 5385, 2253, 3524, 606, 218, 8330, 5189, 5245, 6013, 9067, 7705, 5476, 5980, 9086, 6960, 3022, 9290, 5337, 2149, 682, 9620, 3874, 158, 2862, 4077, 7076, 1613, 1564, 6667, 4166, 4778, 2950, 7, 8070, 8895, 3137, 9964, 5969, 993, 8517, 3948, 1790, 1426, 7251, 6191, 549, 464, 6441, 3545, 9049, 3158, 4631, 9108, 4258, 5021, 5636, 4105, 2830, 8001, 5350, 4617, 7136, 2664, 7404, 1258, 2025, 8752, 3958, 9526, 6244, 8449, 3381, 4523, 9715, 9829, 7193, 1152, 6978, 175, 3791, 4461, 5013, 7099, 3115, 1139, 3934, 1798, 498, 7133, 3186, 897, 3612, 8382, 6813, 4056, 918, 8172, 7659, 5685, 4911, 5330, 6473, 3275, 2427, 8657, 2379, 1515, 4806, 6385, 9770, 9008, 8223, 6676, 3864, 943, 5486, 1531, 4003, 1407, 8401, 1382, 4169, 2434, 49, 1405, 978, 9446, 660, 6878, 6099, 5897, 4873, 6374, 2986, 4344, 6253, 8706, 4366, 2030, 4209, 2556, 7880, 5706, 8791, 1003, 9570, 4160, 5149, 5693, 5208, 3048, 1789, 3351, 583, 3027, 9245, 8933, 2799, 8487, 3488, 5684, 7266, 7581, 6725, 2355, 5324, 3173, 6125, 8718, 8592, 2475, 3856, 8019, 7926, 2130, 3784, 4491, 7016, 8727, 4313, 9153, 965, 5780, 8072, 5786, 5405, 517, 8736, 9385, 8592, 9184, 7419, 9712, 6111, 6446, 4322, 3497, 1530, 3976, 4552, 8266, 1619, 7802, 3277, 2535, 6993, 1153, 4605, 8609, 3079, 490, 222, 2996, 3766, 5601, 8613, 6440, 5572, 1748, 2063, 2354, 4950, 9071, 4434, 4874, 4295, 5055, 1842, 3313, 4545, 8358, 5293, 6143, 1490, 2221, 187, 9992, 2778, 5847, 6860, 153, 5203, 9007, 7538, 51, 1262, 466, 2647, 3156, 4295, 9794, 9906, 7092, 8007, 9487, 6541, 9673, 5977, 2686, 9393, 3315, 5785, 1088, 8432, 5126, 2139, 615, 5384, 7846, 1471, 6602, 2517, 3457, 1762, 9303, 2292, 5674, 7329, 8839, 2660, 5175, 4770, 1623, 5838, 8516, 2741, 939, 860, 2631, 2628, 4903, 41, 7554, 5140, 5663, 6528, 3522, 4695, 9096, 8460, 1928, 4077, 9890, 7756, 5021, 1501, 4032, 416, 5552, 3439, 9395, 9911, 3533, 8859, 6807, 6987, 8484, 8498, 8058, 7610, 862, 4485, 2190, 9019, 7108, 8120, 5187, 5951, 7549, 415, 2967, 5477, 2811, 5478, 1465, 7624, 9052, 9470, 769, 230, 7491, 5617, 911, 7231, 7273, 9624, 3594, 5131, 6275, 7893, 1793, 7679, 2713, 1358, 8547, 5604, 2541, 4082, 3447, 309, 9367, 3418, 4590, 7174, 3652, 1865, 9153, 8723, 6375, 4085, 8276, 7314, 7070, 1268, 3206, 883, 4677, 7461, 1062, 1901, 2147, 9314, 5554, 6867, 262, 2598, 4947, 8615, 2200, 8780, 5829, 9912, 3898, 9855, 5260, 6668, 9474, 5882, 3225, 7889, 2103, 7511, 5282, 2037, 517, 6654, 249, 5288, 3772, 7249, 26, 8840, 3717, 8068, 8947, 9160, 93, 1632, 3716, 1463, 4834, 2367, 9735, 4053, 4195, 5613, 7405, 2498, 9792, 8439, 3314, 1351, 8466, 62, 4911, 8727, 3684, 8203, 9212, 1823, 5891, 990, 6589, 3105, 5265, 5622, 7010, 2858, 123, 4323, 9207, 5320, 1896, 228, 9018, 1681, 86, 3206, 6074, 9496, 6350, 4850, 9527, 1610, 3999, 1248, 3918, 4749, 5398, 2984, 6631, 3952, 6954, 7642, 5323, 3068, 7556, 1834, 1286, 8294, 9731, 5436, 7499, 8484, 5739, 5906, 9532, 1801, 2107, 562, 9658, 3136, 7113, 1609, 5923, 9380, 7533, 2388, 8922, 5023, 8052, 5760, 7612, 6223, 8426, 594, 5792, 7577, 4326, 4892, 2624, 1307, 1687, 209, 1845, 6789, 5968, 9005, 3314, 5592, 6549, 1231, 3652, 8482, 9454, 7653, 8829, 9232, 6194, 7301, 4673, 39, 8405, 6695, 8366, 7249, 8488, 7850, 2484, 5797, 4840, 6410, 3726, 9365, 4367, 3670, 4014, 1212, 1578, 8309, 5630, 7512, 2281, 2888, 3939, 3325, 4853, 3493, 9605, 6204, 9294, 5003, 4296, 2, 9454, 6072, 3782, 1013, 9408, 5557, 4462, 6331, 5819, 6891, 5402, 2177, 9056, 9238, 4502, 9598, 8467, 7553, 5487, 5607, 5290, 2690, 4101, 8430, 1700, 8786, 9083, 773, 5343, 7533, 5848, 7684, 6030, 1772, 3323, 4903, 5678, 8855, 5653, 3370, 5311, 2475, 3148, 9141, 5802, 18, 9689, 7442, 4228, 6400, 8726, 5899, 1824, 381, 1473, 486, 457, 6118, 2880, 7284, 8904, 682, 7102, 6923, 7764, 8628, 1585, 1839, 51, 6729, 5868, 8111, 3858, 1903, 3792, 133, 4622, 5859, 1164, 6938, 3453, 4686, 6511, 2206, 406, 4421, 212, 2988, 1513, 5918, 4171, 5782, 1687, 5033, 5364, 3438, 5438, 420, 5974, 18, 9892, 9799, 7906, 6330, 3979, 2898, 3516, 7177, 9699, 9442, 5158, 4832, 2239, 6434, 6230, 8295, 1433, 7710, 1628, 5843, 4853, 1073, 3059, 3837, 5868, 2883, 7997, 7238, 4045, 2814, 3807, 9249, 8476, 57, 7537, 7211, 7946, 1644, 1504, 9013, 504, 9365, 5752, 5461, 2217, 4181, 1173, 4116, 160, 6997, 1667, 4925, 7099, 5745, 8003, 560, 7754, 568, 3487, 8819, 6671, 669, 570, 8560, 9767, 6639, 7666, 3429, 4313, 1725, 5650, 5351, 2354, 6998, 1944, 4174, 725, 5589, 6341, 4184, 9929, 2884, 5557, 145, 9737, 8794, 2738, 1095, 5325, 6878, 406, 6518, 6982, 513, 4557, 9064, 407, 8301, 3565, 6289, 6606, 2730, 3440, 1145, 6511, 2789, 8541, 2080, 2075, 3199, 9626, 6830, 4579, 5866, 678, 2481, 4519, 8148, 8658, 4446, 1989, 6461, 1664, 6001, 8661, 2159, 2467, 3526, 8876, 5626, 8543, 5944, 4183, 2950, 6976, 9487, 3090, 414, 6258, 6123, 6085, 4728, 5261, 6013, 6025, 8727, 7080, 379, 7720, 4349, 6788, 2921, 2648, 6070, 5163, 2074, 369, 1139, 1510, 1804, 7394, 7440, 7366, 936, 2421, 2867, 4611, 7652, 4779, 3641, 4249, 7540, 2205, 8098, 209, 6579, 102, 2336, 5497, 7482, 8056, 5603, 6230, 6789, 3783, 4348, 7346, 9222, 9704, 1395, 7799, 8756, 2759, 8131, 494, 9080, 7092, 2025, 6599, 7639, 1559, 6656, 8268, 8480, 1672, 4396, 2074, 4392, 1967, 2154, 2485, 8721, 7076, 5396, 7438, 6855, 5002, 8093, 90, 7110, 7478, 8914, 940, 5230, 9580, 3331, 3565, 8924, 5048, 3406, 905, 2910, 6546, 1978, 5286, 1889, 2480, 643, 9283, 5280, 6851, 3002, 3279, 2787, 769, 552, 4673, 2875, 98, 4871, 8977, 3469, 3575, 3767, 9728, 9692, 5996, 8946, 2167, 685, 2338, 5553, 3155, 8256, 5602, 73, 8501, 2088, 2861, 2378, 3869, 3983, 7211, 4310, 5223, 4158, 5221, 1021, 4828, 9671, 6014, 9131, 4142, 67, 5114, 1082, 5841, 2890, 2979, 268, 3269, 1913, 8269, 7329, 4556, 3057, 3779, 8912, 4547, 6060, 5917, 7111, 7356, 9615, 398, 1712, 6419, 7777, 354, 2366, 8881, 1117, 111, 4190, 1073, 4435, 1445, 5957, 4838, 9517, 7226, 2236, 1100, 2335, 4171, 4431, 4464, 866, 9728, 881, 5640, 5502, 756, 1340, 3037, 4892, 4461, 4310, 9705, 4296, 9999, 7451, 5754, 4014, 2212, 8848, 1599, 7649, 4555, 9648, 3194, 6918, 5465, 1377, 688, 6978, 529, 2303, 6619, 8839, 5117, 1084, 7782, 8294, 9178, 7626, 5442, 3427, 8685, 6819, 4711, 8248, 9574, 8002, 6275, 8794, 2557, 9548, 3353, 6543, 1245, 2616, 8350, 699, 3195, 9804, 6672, 6060, 959, 3095, 3751, 9801, 5523, 2152, 7475, 8382, 9403, 8091, 6338, 8876, 5585, 488, 9180, 4793, 5580, 893, 6373, 7080, 5157, 5165, 6154, 2394, 5023, 336, 9320, 389, 8206, 5626, 1001, 5956, 4862, 8565, 9837, 4119, 6182, 8617, 3301, 8339, 7306, 7588, 7370, 9247, 5142, 6024, 6890, 3601, 312, 3682, 3629, 7202, 2397, 6406, 8993, 9017, 133, 5079, 7927, 7796, 4719, 6254, 9076, 1655, 278, 5447, 2255, 276, 4421, 5970, 3878, 2757, 4905, 8150, 209, 8749, 6655, 5915, 6060, 4761, 1199, 3770, 9577, 5496, 1387, 5102, 3056, 3588, 2079, 5168, 6680, 621, 1359, 1948, 2894, 7044, 2850, 278, 5047, 2184, 1408, 6463, 4129, 1467, 8976, 1034, 7452, 894, 1345, 5569, 4187, 8805, 8779, 8410, 5412, 2512, 770, 6850, 6009, 3646, 3469, 543, 4900, 1361, 5227, 2326, 1307, 361, 3805, 4666, 2852, 5137, 6348, 345, 6662, 9622, 5549, 430, 1343, 2353, 4006, 138, 5509, 827, 8170, 8414, 8762, 8031, 1538, 505, 679, 9652, 4034, 4574, 4740, 5109, 6783, 8091, 7932, 5541, 287, 2517, 6796, 9980, 7755, 3404, 8467, 8919, 867, 2416, 2689, 4882, 9211, 2939, 9109, 2523, 4536, 9300, 5008, 7222, 1920, 8451, 3480, 1141, 8341, 3434, 7521, 8296, 1084, 1322, 7171, 1416, 4531, 7505, 7557, 6122, 3069, 9097, 5119, 8539, 1830, 915, 3285, 6900, 6467, 6257, 7893, 1613, 7558, 134, 9403, 825, 7182, 3841, 5903, 86, 7531, 300, 9331, 9861, 9838, 6851, 3403, 5680, 9358, 3977, 4772, 609, 924, 4976, 4586, 712, 4396, 5949, 2758, 346, 5343, 9485, 1011, 4952, 7084, 3026, 1093, 5967, 2107, 8826, 3594, 8571, 1277, 1252, 4499, 3809, 4100, 9079, 5373, 4006, 6092, 6047, 2890, 8352, 4238, 8251, 2155, 6999, 1648, 5880, 2103, 4969, 5415, 8074, 4007, 1138, 8096, 5173, 4342, 4363, 7272, 3933, 8581, 2055, 1836, 400, 585, 9541, 3398, 9246, 6296, 1726, 2391, 4759, 5522, 7330, 4349, 7005, 4841, 8308, 3430, 4565, 5331, 2340, 5662, 7640, 3471, 6680, 9704, 190, 9089, 4307, 9509, 9781, 9634, 6454, 6034, 8678, 8360, 4332, 9062, 9506, 812, 8303, 2106, 5525, 3011, 7519, 7996, 3735, 9013, 1331, 9127, 5355, 9036, 6337, 8698, 6949, 2177, 4321, 6814, 8410, 1243, 4736, 9794, 4478, 2139, 552, 5919, 6114, 7366, 286, 8855, 7989, 3329, 2678, 3868, 1653, 1597, 9925, 3868, 5261, 913, 5903, 2802, 5995, 7468, 3298, 596, 6200, 3325, 6615, 8033, 5964, 3465, 8833, 5307, 5793, 8924, 5221, 6960, 1337, 4153, 1886, 1332, 3359, 93, 393, 1110, 4858, 1010, 4941, 4397, 6858, 2636, 5872, 60, 5721, 5361, 4290, 3727, 3212, 7619, 1649, 2711, 1020, 5154, 4901, 4000, 76, 6661, 4333, 1229, 4189, 4476, 3358, 1118, 7183, 7029, 1944, 8240, 1347, 6050, 4093, 9165, 163, 9984, 1605, 9344, 7047, 1599, 5558, 6846, 754, 6623, 629, 2141, 8122, 3719, 9051, 19, 9810, 3832, 7389, 8724, 7013, 9213, 535, 6480, 9749, 3846, 2032, 5097, 4809, 7529, 6022, 7212, 3095, 2759, 8742, 576, 3909, 7377, 8960, 3324, 9006, 1050, 6282, 7177, 3780, 1650, 4675, 5421, 9537, 1238, 2748, 9652, 4450, 7835, 9826, 6339, 9165, 6096, 7218, 5202, 554, 3642, 5441, 9254, 7588, 3891, 4083, 2032, 8210, 2506, 2344, 2140, 4168, 1695, 9169, 6206, 8583, 8850, 7437, 3253, 3769, 5631, 6691, 1026, 488, 8686, 9632, 121, 5503, 61, 1168, 9434, 3484, 8944, 3592, 4524, 345, 456, 4885, 246, 5866, 8567, 345, 3302, 5096, 8474, 7506, 115, 5313, 3820, 9708, 2149, 9718, 2996, 3554, 6744, 6555, 1776, 730, 157, 3211, 6083, 2623, 4452, 5405, 4694, 8672, 8060, 3263, 7182, 7639, 2699, 9128, 4758, 4861, 7135, 2303, 5485, 5190, 8145, 946, 7496, 2265, 4700, 7188, 1147, 4783, 8164, 6862, 9408, 8980, 6651, 8800, 4808, 7150, 2633, 1278, 9848, 1461, 411, 5720, 880, 8134, 893, 7764, 2139, 9377, 1803, 1643, 6337, 2149, 8520, 3559, 5304, 1142, 4885, 3875, 6961, 8933, 5921, 9762, 8815, 8738, 6703, 4100, 8253, 6397, 6988, 664, 9078, 2809, 8919, 9760, 7039, 2839, 2396, 2732, 7166, 7057, 5624, 5133, 5840, 5721, 7713, 6023, 3203, 7173, 7194, 9600, 6789, 3444, 6259, 3760, 6791, 5544, 6864, 1204, 1432, 3983, 9656, 4621, 133, 8209, 5767, 1569, 1596, 5023, 3689, 7358, 5365, 1337, 742, 9411, 4756, 8126, 256, 2618, 4882, 1294, 3603, 6805, 2566, 3611, 8834, 3948, 7086, 6598, 1365, 9298, 3775, 3795, 7494, 3276, 7819, 2405, 159, 8510, 3865, 8816, 1066, 4821, 5947, 7302, 5309, 5268, 5778, 9750, 2255, 5638, 5135, 1716, 7793, 6435, 1403, 8510, 195, 2508, 6357, 9553, 625, 6630, 4853, 423, 7152, 3715, 1583, 5567, 7565, 292, 592, 1568, 6620, 2011, 9354, 9657, 8638, 5574, 7111, 5092, 1509, 1713, 4480, 859, 8260, 9264, 5758, 1165, 3885, 1728, 2452, 3583, 7144, 9857, 8421, 1830, 6610, 8842, 6124, 4824, 8247, 964, 7464, 1626, 4660, 301, 91, 7856, 7987, 9703, 7493, 2275, 3047, 3341, 2737, 9941, 8780, 8531, 1591, 4765, 3251, 9817, 335, 4332, 7149, 2198, 7532, 7481, 5007, 735, 3916, 9933, 1744, 6274, 1775, 9548, 7626, 9376, 1056, 1047, 6418, 8374, 5355, 9341, 3158, 6261, 7667, 8268, 492, 8763, 5040, 8813, 9303, 1634, 6325, 3450, 9319, 1364, 3300, 737, 5460, 1911, 6832, 3569, 5456, 2480, 3177, 1945, 413, 6801, 8625, 5336, 6623, 6463, 9235, 4530, 1414, 2136, 6220, 3020, 9676, 5462, 4502, 402, 8085, 9833, 1788, 2105, 8716, 2131, 642, 4659, 2219, 8494, 7234, 6858, 5914, 6572, 4600, 8411, 895, 8968, 4936, 6898, 6123, 1491, 1671, 8399, 1298, 3418, 7077, 2399, 312, 2268, 7077, 8416, 7622, 4435, 7579, 6482, 8881, 8262, 3695, 2478, 657, 689, 5423, 6220, 4232, 4375, 8254, 6575, 3855, 5068, 1986, 7415, 9132, 8248, 6713, 4121, 6464, 2127, 4449, 5712, 4857, 5019, 1480, 3317, 5156, 8147, 6292, 6412, 2917, 141, 7217, 4792, 9097, 3578, 3283, 6705, 685, 8320, 3763, 2840, 8747, 4530, 5794, 3189, 8590, 6745, 1985, 8591, 5600, 7338, 8973, 519, 7479, 68, 5811, 8965, 8012, 2838, 6723, 4404, 2496, 5746, 1484, 1727, 3981, 4978, 4393, 9277, 8183, 5377, 3891, 946, 8030, 3128, 3491, 5158, 3675, 1787, 7763, 7293, 5861, 106, 678, 4519, 4902, 6035, 8661, 5831, 4868, 8920, 5877, 1303, 8264, 1884, 5708, 4560, 5247, 2258, 29, 4118, 8100, 3483, 3109, 9782, 5346, 9176, 5440, 1084, 6752, 2218, 6625, 2012, 4749, 3777, 4015, 3916, 3850, 2631, 7338, 6461, 3875, 5509, 3246, 9661, 5445, 8166, 3686, 80, 2073, 8284, 6271, 376, 267, 9212, 9856, 3423, 2979, 9673, 9971, 7997, 5853, 3926, 3149, 517, 1892, 6130, 5222, 629, 9244, 2609, 2227, 3901, 1118, 2684, 9835, 4207, 8310, 5889, 961, 6211, 7239, 7973, 9178, 6523, 2213, 7341, 5617, 5630, 3394, 5511, 680, 1204, 2167, 4795, 5780, 2245, 6564, 2308, 7535, 6609, 9433, 7121, 5849, 4833, 450, 5331, 2102, 9287, 310, 4215, 5894, 4511, 8618, 8820, 5711, 8190, 841, 2394, 8116, 4041, 7608, 2581, 3796, 3795, 1405, 47, 1813, 6620, 9498, 1880, 6736, 5490, 4194, 1872, 1039, 3435, 7612, 9207, 5173, 7348, 9118, 8579, 7380, 3328, 9887, 6209, 9885, 1111, 5809, 8993, 8487, 4087, 6587, 6674, 9038, 5790, 8816, 6343, 772, 3672, 4926, 3948, 4069, 3369, 1219, 5618, 6351, 9587, 3807, 9501, 4558, 5224, 723, 1754, 3880, 5899, 8703, 4475, 2823, 939, 7545, 913, 859, 424, 3911, 7703, 576, 6167, 4951, 2658, 5, 3820, 8740, 6212, 7999, 5351, 1891, 6660, 5694, 616, 1443, 5715, 5907, 1682, 6451, 4679, 2515, 1084, 5608, 9679, 7761, 6951, 6736, 4927, 5643, 2033, 9479, 6107, 2591, 8807, 5815, 3622, 2544, 4753, 6695, 8536, 604, 8817, 9060, 531, 106, 5534, 2321, 3275, 183, 6018, 1869, 5953, 4312, 2276, 1913, 9373, 4113, 1956, 8098, 3508, 4518, 9179, 8423, 9074, 2321, 137, 9691, 1934, 6714, 9365, 5316, 2520, 5698, 2252, 4522, 230, 3557, 8097, 7568, 1534, 4179, 6059, 6925, 225, 969, 7136, 9017, 614, 4618, 7712, 7340, 8719, 6576, 6622, 7927, 8688, 6697, 1677, 8603, 8761, 1906, 5480, 6069, 8470, 5196, 4381, 8078, 8217, 4216, 1364, 1310, 9133, 6559, 3770, 4110, 6021, 2421, 1733, 9476, 2073, 1594, 5753, 7326, 1938, 1111, 9590, 285, 9697, 3309, 376, 4376, 3846, 8711, 766, 8141, 3954, 4741, 8763, 2678, 7244, 2789, 8755, 3395, 7215, 1531, 3348, 533, 6077, 7462, 2201, 8972, 9977, 4848, 4832, 9227, 8564, 4510, 9389, 484, 7672, 819, 1583, 975, 6120, 9835, 5115, 7552, 620, 2158, 7459, 8464, 2009, 8258, 976, 750, 6734, 3775, 911, 6134, 640, 4073, 7054, 7518, 7903, 8334, 552, 8055, 9753, 3270, 7288, 1187, 4632, 2588, 988, 1635, 4377, 9472, 8880, 598, 1694, 2291, 3386, 38, 7956, 5225, 9515, 6432, 3198, 6647, 5949, 9286, 2952, 7260, 4612, 1432, 9547, 8112, 9699, 3745, 3488, 8549, 536, 5353, 7895, 8985, 1739, 3530, 4422, 594, 746, 6458, 62, 6833, 3406, 4672, 5818, 1450, 2129, 6918, 151, 2676, 5650, 6087, 7024, 4024, 5106, 7091, 990, 2760, 4820, 9787, 6646, 5324, 399, 3489, 8802, 1126, 8996, 4725, 3140, 6579, 8468, 5183, 2226, 2867, 4062, 9109, 6137, 1385, 7806, 7818, 3675, 6577, 1001, 9839, 7192, 4936, 3819, 3069, 2651, 5534, 4686, 8871, 1528, 1362, 5928, 5458, 9510, 2548, 8164, 519, 6933, 3204, 7282, 1253, 9115, 7401, 4895, 6706, 3581, 3698, 4927, 3737, 4242, 1578, 8553, 7875, 6315, 2954, 5460, 1695, 8582, 8570, 2037, 2424, 8218, 4799, 5423, 898, 9400, 138, 5107, 9009, 5221, 1171, 6531, 1406, 7065, 7648, 7139, 9018, 5916, 8559, 7470, 6999, 8137, 3878, 6932, 2003, 1776, 7544, 3982, 8706, 843, 8683, 2531, 8466, 5559, 1525, 7551, 2539, 8619, 4789, 5368, 8662, 923, 1702, 1841, 1151, 3578, 470, 1538, 1508, 1505, 8119, 8825, 481, 7236, 7876, 9844, 4553, 8, 9951, 7486, 7063, 2478, 7381, 3508, 5752, 7588, 370, 3779, 1467, 5056, 9656, 47, 9401, 9066, 3169, 1391, 4286, 7625, 5081, 3095, 4113, 2397, 7570, 402, 627, 812, 9139, 674, 2729, 8460, 9186, 9109, 6307, 2745, 8375, 3810, 9845, 1000, 8053, 7167, 333, 4241, 5161, 7614, 8324, 7286, 1038, 5387, 2212, 4185, 8622, 3213, 6623, 1283, 5565, 9643, 7013, 81, 6489, 4831, 7944, 3716, 2396, 4170, 3387, 7505, 5018, 948, 4395, 9983, 2759, 4661, 3227, 272, 2687, 4575, 5996, 5034, 416, 3586, 4447, 343, 5956, 38, 1731, 5708, 8007, 6012, 7992, 1453, 3050, 5049, 9412, 1401, 1818, 3016, 5425, 5668, 5691, 7826, 6001, 5478, 321, 9819, 2721, 8893, 9142, 9785, 5163, 1857, 1135, 1477, 4359, 8566, 482, 7863, 708, 4804, 1759, 3866, 7793, 1120, 9302, 6177, 4154, 3482, 9479, 3243, 7026, 4094, 1164, 935, 8568] Times for Selection Sort: 3.564925E7, 1.9631292E7, 4697333.0, 4717000.0, 4718833.0, 4673334.0, 4937875.0, 4904708.0, 4581583.0, 4705959.0, 4529041.0, 4664666.0, Times for Bubble Sort: 2.8965833E7, 2639458.0, 2671708.0, 2604167.0, 2595875.0, 2552125.0, 2816167.0, 2557750.0, 2630625.0, 2589250.0, 2561458.0, 2558334.0, Times for Merge Sort: 760917.0, 196250.0, 193500.0, 192500.0, 210583.0, 1587250.0, 531916.0, 196916.0, 219625.0, 220209.0, 189375.0, 232459.0, Times for Insertion Sort: 123500.0, 122125.0, 123750.0, 122250.0, 123750.0, 121958.0, 147458.0, 114834.0, 120167.0, 116542.0, 114666.0, 127125.0, . Counting Swaps and Compares . public class sortSteps { // selection sort public static void selectionSort(int[] arr) { int selectionCompare = 0; int selectionSwap = 0; System.out.println(&quot;Selection Sort&quot;); int n = arr.length; for (int i = 0; i &lt; n - 1; i++) { int minIndex = i; for (int j = i + 1; j &lt; n; j++) { selectionCompare ++; // comparing two values if (arr[j] &lt; arr[minIndex]) { minIndex = j; } } if (minIndex != i) { int temp = arr[minIndex]; arr[minIndex] = arr[i]; arr[i] = temp; selectionSwap ++; // swapping two values } } System.out.println(&quot;Number of Comparisons: &quot; + selectionCompare); System.out.println(&quot;Number of Swaps: &quot; + selectionSwap + &quot; n&quot;); } // bubble sort public static void bubbleSort(int[] array) { int bubbleCompare = 0; int bubbleSwap = 0; System.out.println(&quot;Bubble Sort&quot;); int n = array.length; for (int i = 0; i &lt; n-1; i++) { for (int j = 0; j &lt; n-i-1; j++) { bubbleCompare ++; // comparing two values // if (array[j] &gt; array[j+1]) { // // swaps array[j] and array[j+1] // int temp = array[j]; // array[j] = array[j+1]; // array[j+1] = temp; // bubbleSwap ++; //swapping two values // System.out.println(&quot;Number of Swapsyyyy: &quot; + bubbleSwap + &quot; n&quot;); // } } } System.out.println(&quot;Number of Comparisons: &quot; + bubbleCompare); System.out.println(&quot;Number of Swaps: &quot; + bubbleSwap + &quot; n&quot;); } // merge sort public static void mergeSort(int[] arr, int left, int right) { if (left &lt; right) { int mid = (left + right) / 2; mergeSort(arr, left, mid); mergeSort(arr, mid + 1, right); merge(arr, left, mid, right); } } public static void merge(int[] arr, int left, int mid, int right) { int[] temp = new int[right - left + 1]; int i = left, j = mid + 1, k = 0; while (i &lt;= mid &amp;&amp; j &lt;= right) { if (arr[i] &lt; arr[j]) { temp[k++] = arr[i++]; } else { temp[k++] = arr[j++]; } } while (i &lt;= mid) { temp[k++] = arr[i++]; } while (j &lt;= right) { temp[k++] = arr[j++]; } for (i = left; i &lt;= right; i++) { arr[i] = temp[i - left]; } } // insertion sort public static void insertionSort(int[] arr) { int n = arr.length; for (int i = 1; i &lt; n; ++i) { int key = arr[i]; int j = i - 1; while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) { arr[j + 1] = arr[j]; j = j - 1; } arr[j + 1] = key; } } public static void main(String[] args) { Integer [] integerArray = {}; // create an array ArrayList&lt;Integer&gt; integerArrayList = new ArrayList&lt;Integer&gt; (Arrays.asList(integerArray)); // convert array to array list // input 5000 random integers between 0 and 10,000 into arrayList for (int i = 0; i &lt; 5000; i++) { Random random = new Random(); int rn = random.nextInt(10000); integerArrayList.add(rn); } int [] arr0 = integerArrayList.stream().mapToInt(i -&gt; i).toArray(); System.out.println(Arrays.toString(arr0)); // selection sort int[] arr1 = arr0; selectionSort(arr1); // bubble sort int [] arr2 = arr0; bubbleSort(arr2); System.out.println(&quot;Bubble: &quot; + Arrays.toString(arr2)); } } sortSteps.main(null); . [9786, 5457, 920, 7293, 1142, 7737, 3152, 7783, 3086, 3666, 5192, 4584, 7164, 9226, 1107, 1992, 4343, 1697, 7253, 1902, 5246, 6505, 7037, 8543, 3837, 6011, 1120, 2730, 8091, 2202, 2095, 9680, 8740, 1422, 4353, 5603, 4358, 7391, 3680, 31, 9180, 9925, 9570, 8836, 2642, 3738, 42, 8274, 3882, 3346, 3552, 7385, 3886, 1727, 4743, 8382, 4077, 3447, 3525, 5031, 3161, 4859, 7763, 3577, 2786, 1499, 6266, 5287, 7945, 2817, 1220, 624, 4027, 2964, 5029, 6962, 7457, 3, 11, 2761, 9208, 2984, 259, 6748, 6563, 9259, 9522, 7312, 3789, 308, 7130, 1432, 6307, 9995, 9361, 7456, 2101, 3517, 7182, 9062, 5407, 5737, 1457, 4143, 3139, 1536, 7218, 851, 5701, 1640, 3927, 4423, 4891, 7659, 5511, 3028, 955, 2462, 8445, 1248, 7048, 4180, 429, 7824, 1434, 310, 5669, 8802, 960, 9566, 2157, 3848, 6623, 4343, 3563, 2453, 3839, 6669, 8858, 684, 6266, 9721, 4683, 6981, 5862, 4615, 1783, 1371, 4347, 2255, 1945, 4284, 8359, 4654, 9890, 7867, 2714, 4327, 1200, 2085, 6055, 573, 4600, 1879, 4547, 9928, 1258, 7664, 8392, 9387, 9345, 1296, 6159, 6417, 7346, 748, 5709, 1867, 6517, 2502, 9548, 4193, 18, 2169, 7635, 9377, 3315, 7848, 4903, 3385, 6173, 7996, 3083, 6642, 6394, 9314, 4699, 8394, 8298, 4210, 2804, 8775, 2654, 3058, 4825, 560, 1974, 2959, 2988, 5710, 8281, 8920, 2124, 1446, 5684, 3516, 4177, 787, 5875, 671, 8914, 2309, 493, 4933, 3000, 8079, 7966, 7596, 5160, 8657, 572, 9810, 6286, 7268, 6118, 3209, 7806, 1608, 1878, 9676, 9638, 6784, 842, 72, 2028, 6807, 1772, 7609, 5758, 2968, 818, 7566, 77, 5601, 6620, 2277, 169, 6095, 7976, 4867, 6523, 1964, 6194, 3188, 4049, 4812, 5027, 6355, 2165, 8459, 2176, 7972, 6274, 3322, 6194, 2920, 7868, 8855, 309, 8648, 4567, 3434, 8739, 7391, 551, 2557, 504, 832, 1320, 2741, 1677, 1878, 5787, 3006, 6319, 3501, 6870, 6692, 8401, 4793, 7808, 3150, 9588, 9471, 870, 499, 655, 9073, 261, 2014, 6076, 3945, 5529, 8428, 7895, 4172, 8742, 3424, 5634, 1736, 6106, 9896, 9825, 2076, 8680, 9938, 9735, 7171, 1680, 5309, 5080, 2284, 7783, 9347, 9619, 858, 6537, 7490, 1908, 6649, 543, 9789, 8037, 2440, 417, 5794, 3286, 7469, 7270, 3599, 7893, 4423, 1564, 8268, 1142, 7474, 3767, 4066, 5091, 5528, 4520, 1912, 1527, 6131, 6580, 9252, 3480, 3110, 5582, 975, 5337, 3755, 9245, 9370, 1581, 7840, 5289, 3405, 9288, 623, 4018, 8617, 9439, 7809, 2939, 1956, 9677, 292, 4400, 4035, 8636, 7086, 9905, 6512, 2652, 2247, 9503, 9332, 5237, 8855, 8592, 4886, 2353, 4383, 3415, 5440, 3182, 5493, 1465, 4163, 3569, 279, 508, 4237, 5324, 8437, 6595, 7558, 7798, 8068, 1637, 2992, 1398, 1373, 1196, 4125, 6875, 6380, 2912, 7011, 9495, 6290, 320, 979, 1907, 280, 2809, 1468, 3486, 9518, 4023, 7488, 704, 1784, 2136, 2286, 2840, 9338, 9833, 7037, 3604, 4280, 3947, 5058, 673, 5761, 8561, 3678, 418, 488, 5011, 5208, 2381, 3838, 6836, 3402, 842, 4380, 8245, 8444, 4597, 8082, 1839, 7278, 3535, 731, 479, 4120, 7305, 3461, 4085, 3995, 6795, 7040, 8025, 6519, 3932, 5956, 8528, 6751, 1848, 5844, 5632, 5910, 7833, 9175, 6384, 3954, 6574, 2179, 3600, 8830, 6472, 7159, 9879, 6880, 8920, 9505, 527, 5870, 6438, 1796, 4760, 7644, 1810, 2001, 219, 2212, 4635, 1500, 2048, 5684, 244, 9190, 3568, 1824, 4708, 3287, 3317, 1944, 3693, 213, 8792, 9583, 6106, 9976, 4658, 3060, 5841, 1778, 6806, 2892, 1367, 1105, 8300, 3385, 2590, 4546, 8292, 8144, 8154, 1927, 6383, 6129, 1159, 3774, 324, 7632, 9624, 9824, 5626, 1974, 9538, 6816, 698, 6361, 9101, 4302, 7909, 7279, 1192, 3414, 1378, 3086, 5604, 1922, 7265, 1139, 7542, 8896, 4669, 7014, 191, 631, 2807, 5325, 5887, 6074, 350, 1097, 9817, 9254, 5892, 2697, 4658, 2179, 6275, 3174, 3712, 7869, 2678, 2929, 6442, 8473, 4211, 4699, 9728, 425, 6899, 3426, 6732, 5252, 8653, 5297, 4267, 4818, 3788, 796, 4335, 5646, 4869, 4313, 382, 2321, 4285, 3543, 8555, 9310, 8331, 6165, 8686, 8812, 6643, 1291, 4192, 8762, 6890, 8558, 7753, 8194, 5614, 2607, 7745, 51, 4727, 3743, 3037, 5797, 8153, 6484, 9313, 4294, 9357, 4089, 6227, 8281, 8932, 4755, 3312, 1337, 6593, 6036, 8356, 6164, 4184, 8036, 6125, 5657, 3476, 1013, 2253, 4210, 2206, 5245, 8404, 3721, 6317, 2502, 3353, 3978, 5520, 6361, 6934, 854, 8292, 2558, 9178, 8394, 9057, 5754, 6453, 7520, 6715, 5240, 5819, 7315, 8109, 6974, 8238, 4641, 2643, 4096, 4435, 2717, 5053, 2436, 5949, 9479, 3487, 4479, 7273, 8070, 1631, 1197, 6899, 7779, 6858, 7378, 3328, 5317, 1467, 8979, 284, 2431, 5509, 1580, 7325, 5136, 3584, 1060, 4635, 919, 5690, 7884, 4787, 7934, 7096, 8306, 4965, 1143, 1568, 7647, 4932, 1989, 9135, 7031, 130, 3375, 4937, 5636, 1225, 7723, 7161, 1520, 8892, 5263, 7184, 3437, 9574, 4413, 8753, 961, 5788, 2368, 9320, 5161, 6221, 6816, 1995, 2711, 7955, 9661, 7912, 5656, 3936, 9367, 9427, 1081, 5151, 4031, 1821, 4734, 9493, 1864, 9471, 475, 724, 3128, 1267, 8360, 4244, 3324, 8009, 5478, 7730, 3005, 8118, 649, 6585, 7946, 909, 5284, 8964, 5434, 2517, 439, 5894, 7947, 4455, 5071, 4061, 6777, 3383, 589, 1405, 8969, 4448, 2828, 2963, 6982, 980, 5097, 2952, 9943, 553, 8091, 6244, 2202, 6024, 2536, 8906, 157, 254, 2888, 4910, 3437, 9355, 6356, 7121, 932, 1584, 8654, 8993, 2648, 752, 6689, 7053, 205, 9091, 2594, 3878, 5304, 5516, 4341, 649, 8500, 7472, 9956, 1608, 2100, 2124, 7662, 3240, 2040, 9769, 9190, 2187, 5225, 403, 6937, 7733, 851, 3497, 8691, 2483, 4554, 890, 8386, 7861, 2487, 279, 9181, 7600, 3620, 7191, 4845, 1797, 1277, 9029, 9335, 1533, 9589, 9819, 820, 1894, 3349, 6357, 7612, 9948, 2954, 4025, 7926, 9647, 947, 1456, 3216, 535, 3355, 3882, 9668, 3010, 5730, 904, 9679, 7127, 4509, 8483, 125, 7800, 4413, 6684, 262, 6157, 8736, 641, 8582, 7503, 1619, 2690, 7855, 914, 7270, 2549, 4026, 7795, 881, 4229, 1259, 3887, 4025, 2262, 9371, 5123, 7398, 3092, 9665, 5619, 4980, 1456, 1085, 9899, 6398, 8839, 9658, 6464, 4293, 4206, 40, 2555, 665, 5431, 6957, 6891, 7831, 2859, 2609, 7976, 8152, 8515, 8335, 8803, 8837, 619, 6643, 1874, 7484, 2872, 1653, 7468, 1233, 4503, 5295, 4835, 7220, 4826, 3024, 8135, 5684, 3417, 6454, 9345, 9182, 2014, 3870, 1396, 147, 3603, 5431, 5339, 5893, 8844, 1672, 2563, 1753, 2055, 6790, 7717, 2917, 1343, 2919, 6176, 4074, 5826, 3907, 7915, 9937, 6408, 9062, 240, 8940, 6509, 5838, 2377, 6455, 2451, 1954, 9194, 9143, 8409, 4237, 3255, 1149, 1179, 4093, 693, 1448, 3053, 8512, 7976, 3808, 5175, 6030, 9696, 3803, 4085, 4737, 3611, 6235, 2424, 8075, 2064, 2998, 9608, 9949, 7374, 678, 2246, 214, 8265, 9181, 8728, 5240, 9584, 1506, 5339, 1141, 2012, 9028, 1018, 170, 4790, 5670, 1743, 7014, 3981, 9882, 2309, 9000, 4977, 8449, 3483, 6881, 7605, 3887, 6983, 2105, 1175, 9020, 703, 6785, 4072, 1341, 4951, 1462, 900, 4835, 5623, 9852, 3891, 769, 933, 7377, 5640, 9110, 8304, 3794, 2889, 3245, 5464, 2856, 3721, 7017, 8255, 5065, 7041, 5419, 3445, 67, 284, 8472, 5287, 1049, 3845, 5120, 2921, 7444, 5627, 661, 4121, 4501, 1141, 7812, 1217, 770, 7604, 4559, 831, 778, 380, 3990, 3291, 2023, 209, 4977, 6648, 3515, 5359, 4572, 2409, 4277, 4317, 1767, 4455, 1188, 4171, 6737, 6071, 8264, 7233, 9653, 8701, 2129, 5408, 8145, 2909, 215, 5021, 2413, 4143, 491, 613, 6235, 5136, 872, 5496, 9833, 2748, 8884, 8680, 4818, 7026, 7328, 8483, 5259, 6489, 4667, 1270, 1300, 935, 8732, 9094, 8815, 3531, 670, 9861, 3215, 6203, 355, 9033, 1440, 4978, 3163, 7890, 1988, 2924, 8174, 7521, 939, 8734, 8442, 470, 7006, 5145, 5656, 2637, 1546, 4862, 8169, 7924, 157, 5131, 2433, 6737, 5942, 8493, 6882, 3642, 3508, 5449, 9621, 3117, 735, 9586, 2207, 6062, 629, 9668, 2069, 2678, 7268, 5456, 3523, 5416, 6452, 9802, 9476, 1639, 9452, 6239, 8081, 8683, 7123, 167, 8183, 9026, 4874, 9987, 7939, 1621, 531, 715, 4155, 4402, 4500, 153, 6644, 904, 4159, 2573, 2716, 3803, 832, 3905, 4409, 4017, 3923, 2191, 4747, 146, 949, 3705, 8398, 2785, 6312, 4447, 6676, 3643, 3213, 2157, 3188, 606, 6729, 4612, 5617, 3825, 4681, 7145, 6895, 5910, 3632, 2963, 6345, 2225, 4881, 1315, 5865, 6163, 67, 9535, 5423, 5820, 3493, 1811, 4412, 1346, 6848, 2720, 6860, 8476, 5159, 4172, 4221, 6905, 6952, 3921, 8943, 8627, 8005, 9341, 4066, 7030, 1632, 2734, 2459, 3001, 7926, 9801, 3349, 4617, 7288, 9687, 6010, 9165, 1683, 891, 9904, 2567, 3333, 869, 4444, 9276, 5792, 3367, 4972, 3067, 7396, 1297, 837, 3201, 955, 341, 8854, 7371, 2487, 7297, 9371, 7117, 5557, 9819, 1375, 5059, 5675, 133, 4032, 3404, 9568, 3673, 9554, 4271, 3229, 339, 7393, 1228, 4681, 3425, 2222, 247, 3381, 1486, 2751, 2581, 1984, 8872, 3734, 4529, 7329, 4771, 4099, 7682, 5770, 6965, 3410, 7475, 9503, 5457, 5692, 229, 3609, 2849, 9777, 3163, 9704, 3803, 352, 7871, 3046, 2286, 7745, 5344, 7130, 9743, 5818, 4884, 6627, 5315, 8677, 8790, 1235, 4044, 2444, 4676, 6641, 8831, 153, 9192, 1951, 999, 9831, 7062, 4371, 4124, 7974, 4935, 376, 8952, 7766, 2006, 1204, 3156, 314, 342, 582, 3376, 4296, 6003, 9827, 163, 8439, 5449, 809, 7618, 5083, 787, 1827, 9925, 4738, 5780, 9372, 6465, 1096, 3441, 1247, 3034, 2685, 6669, 1506, 9457, 7188, 6980, 7361, 1677, 4006, 6147, 3038, 556, 9641, 5855, 8835, 9832, 2830, 8285, 5303, 5078, 4792, 3711, 2255, 7144, 7864, 2597, 1776, 8480, 7368, 4118, 2976, 3063, 6881, 1321, 1309, 5368, 2936, 774, 3569, 5527, 6381, 5431, 6751, 9116, 9852, 1469, 8569, 9464, 2097, 9891, 6685, 9029, 4695, 2921, 5168, 7229, 6666, 1188, 7456, 708, 9686, 8825, 555, 7561, 2181, 8181, 7438, 4901, 3369, 7408, 7715, 7708, 4029, 4386, 6315, 8024, 986, 5994, 3876, 3127, 3355, 3914, 6824, 2687, 1395, 7561, 7654, 74, 763, 1470, 3697, 8849, 2088, 4566, 2269, 3499, 7637, 2371, 2210, 6075, 8974, 4847, 7788, 9960, 9763, 4651, 9287, 2050, 5482, 5975, 2200, 1697, 722, 5362, 7305, 1681, 3784, 227, 7492, 649, 9153, 8587, 8590, 3831, 4027, 2192, 7151, 2717, 7922, 9528, 6701, 9549, 5148, 3114, 8993, 1094, 2670, 6092, 6964, 7283, 7341, 1571, 3564, 1739, 4814, 8967, 3696, 9700, 923, 2555, 802, 4734, 5143, 5196, 6948, 2501, 9309, 3966, 1433, 5213, 7864, 5584, 2031, 4889, 6653, 6660, 8526, 36, 5116, 1596, 9088, 7069, 5406, 161, 3236, 3412, 1630, 1702, 2540, 3283, 9197, 7064, 3188, 5332, 854, 6045, 6196, 8862, 4381, 6946, 6366, 1179, 3315, 7693, 3155, 7526, 3216, 120, 959, 7640, 8456, 2603, 8019, 3198, 2456, 4631, 7508, 2090, 9049, 4009, 8992, 6797, 401, 4381, 6399, 5838, 4916, 3855, 5197, 2071, 8982, 5102, 1523, 651, 8645, 8363, 1562, 5946, 9384, 6733, 8211, 3152, 139, 8789, 569, 548, 1586, 2969, 8762, 326, 4048, 367, 8083, 1441, 4564, 3367, 3195, 185, 1470, 5404, 3260, 5509, 6488, 7689, 6784, 3680, 9547, 2501, 2604, 1795, 3117, 1908, 1795, 1145, 6437, 1026, 8421, 3465, 5358, 9763, 5881, 3234, 7447, 488, 9302, 3951, 9686, 867, 9881, 5905, 7334, 7148, 5858, 7146, 983, 7127, 9874, 9819, 298, 9133, 5039, 6928, 2417, 9084, 1104, 4923, 2160, 8468, 8025, 2129, 1049, 936, 5752, 964, 8830, 1366, 5922, 2338, 8445, 5273, 6171, 1371, 3845, 1, 5952, 3212, 4443, 8465, 9715, 4849, 609, 9571, 9449, 2876, 2579, 4878, 4314, 983, 4252, 1715, 2414, 9090, 6032, 8942, 331, 3585, 5174, 4320, 5712, 21, 5781, 5793, 3501, 1327, 9523, 4098, 8413, 2233, 7067, 3534, 242, 6192, 5315, 1912, 5291, 3212, 3195, 3869, 9416, 1964, 8057, 4213, 1282, 9529, 7584, 6874, 2629, 5306, 9989, 6233, 1681, 7318, 3461, 4500, 4066, 6064, 9406, 2763, 4115, 7373, 6640, 747, 6839, 5558, 6942, 1918, 47, 9616, 9973, 6942, 1997, 4139, 3883, 5321, 9281, 5618, 1517, 2308, 9122, 9455, 3396, 8529, 9515, 9356, 9992, 3588, 7115, 8103, 4081, 2671, 1028, 7468, 4871, 3476, 4226, 6639, 9955, 9492, 4282, 5567, 6621, 1642, 6780, 9549, 8241, 2143, 2462, 6182, 4622, 6664, 7360, 8681, 5878, 1244, 307, 6215, 4834, 4260, 6242, 6262, 2591, 676, 9016, 6382, 1423, 5388, 3934, 7370, 6651, 4135, 7013, 2540, 6959, 5419, 9946, 2814, 5098, 1222, 3222, 5732, 1107, 6978, 5325, 6785, 13, 2069, 5644, 2286, 2125, 7814, 9169, 2369, 131, 897, 2111, 5409, 7923, 2455, 8951, 9180, 9821, 9413, 8468, 8610, 3222, 5409, 1332, 5905, 9805, 6374, 7414, 6515, 6219, 9341, 236, 447, 5576, 9753, 4072, 3278, 7251, 3481, 3391, 371, 9087, 6246, 2256, 622, 6191, 1724, 4204, 9136, 7496, 5279, 390, 7585, 5630, 4704, 7245, 19, 7698, 5197, 8963, 6231, 4317, 8005, 4296, 5604, 1192, 6073, 930, 5874, 7173, 3872, 2810, 6781, 3902, 9641, 8409, 7914, 2052, 7602, 3952, 1972, 3984, 8672, 8507, 5236, 4925, 709, 5188, 6303, 5733, 2863, 6038, 9650, 6583, 6627, 5089, 7356, 8622, 744, 2135, 635, 2119, 4934, 8070, 8914, 9191, 1266, 637, 3642, 104, 8052, 8756, 7855, 6215, 9809, 6300, 3823, 8473, 9828, 8027, 2813, 3964, 2987, 9365, 6440, 4814, 1271, 3002, 5539, 792, 134, 9496, 6861, 8042, 6689, 9845, 7173, 7833, 8974, 3333, 9193, 5028, 2686, 9571, 5346, 6227, 606, 6128, 4245, 6737, 9198, 4402, 6940, 5951, 1704, 1489, 8393, 5742, 7418, 9910, 364, 3810, 3335, 9120, 2816, 3928, 2185, 7203, 1600, 8261, 180, 9375, 9913, 9208, 5015, 5600, 8480, 2026, 8320, 693, 3864, 8472, 2279, 4850, 3690, 236, 5413, 8911, 7114, 6170, 7677, 2157, 8543, 891, 9676, 5832, 7751, 9157, 8135, 5208, 3447, 4563, 9604, 2347, 8941, 9080, 3882, 1170, 4829, 1906, 787, 2095, 34, 3497, 1584, 3013, 9949, 7412, 8947, 2167, 7958, 2349, 822, 5025, 6140, 2268, 3850, 579, 9058, 1243, 4133, 4812, 7549, 1501, 8096, 6236, 38, 8649, 9875, 3761, 7557, 5318, 7539, 7655, 4430, 9203, 8072, 9602, 7869, 5111, 7429, 3493, 8314, 7694, 3312, 1202, 9849, 1439, 2141, 7781, 3754, 1039, 1769, 3476, 1794, 8342, 9399, 963, 6125, 9448, 5332, 2608, 5337, 1062, 8763, 3847, 4499, 5910, 6314, 8382, 366, 5108, 6561, 3407, 9073, 586, 2725, 668, 7295, 332, 8869, 500, 1587, 1023, 710, 6931, 4483, 765, 6474, 3090, 4951, 6419, 5227, 7385, 2740, 814, 6783, 4790, 9279, 7773, 5976, 9039, 5169, 4775, 6592, 8037, 4096, 3079, 3045, 7822, 8101, 454, 7644, 2355, 7863, 2828, 9297, 1544, 4408, 4497, 9279, 7923, 9260, 9019, 2086, 7592, 126, 1430, 4162, 2722, 2205, 1306, 9327, 2553, 2021, 8758, 3302, 951, 4403, 2499, 288, 6055, 1052, 7771, 781, 7339, 7614, 590, 9206, 9081, 6175, 9821, 8173, 5550, 5461, 2206, 1248, 9498, 7293, 7547, 9520, 1150, 9916, 1375, 1325, 9093, 2916, 4975, 293, 964, 6504, 330, 1844, 9446, 9581, 5069, 6640, 6147, 550, 3701, 4131, 7614, 5966, 1487, 4823, 4195, 6635, 1866, 5417, 7131, 2394, 320, 8068, 4890, 4117, 7707, 9418, 8423, 9317, 6072, 821, 6431, 4192, 8641, 9768, 6215, 777, 5607, 6114, 6005, 5267, 9083, 9429, 4486, 827, 8581, 823, 8539, 3360, 4556, 550, 819, 4548, 9630, 9656, 1472, 8977, 4883, 7438, 1906, 1342, 2373, 2917, 5690, 144, 9974, 730, 503, 9054, 9775, 6405, 9012, 4160, 4593, 9177, 1681, 1541, 4456, 681, 615, 5674, 6457, 6271, 3806, 5686, 5136, 1011, 8638, 5188, 8704, 1623, 6861, 3663, 8018, 5572, 9211, 8091, 2153, 4519, 4081, 191, 1324, 8315, 59, 6467, 8477, 1730, 3938, 144, 1279, 6155, 8869, 4686, 4592, 1365, 6605, 5233, 7189, 6532, 3871, 262, 5562, 4327, 4534, 8879, 9437, 8009, 2550, 58, 2399, 3974, 3595, 657, 7660, 5249, 2259, 6632, 7079, 6204, 448, 7209, 9260, 3259, 8910, 5952, 6826, 867, 2676, 94, 4499, 3160, 1211, 9544, 7423, 7176, 9581, 142, 1420, 3349, 8490, 6582, 2585, 1701, 6695, 3197, 5208, 7592, 6140, 6011, 1550, 4480, 6638, 3483, 5529, 9898, 3776, 983, 307, 1738, 1161, 1864, 8232, 8372, 9985, 9984, 5690, 2472, 3060, 5174, 4358, 7054, 756, 5087, 7652, 8999, 784, 5565, 5109, 5212, 4168, 7570, 608, 5758, 4033, 5041, 1011, 6340, 9120, 3243, 7374, 6445, 7836, 9208, 9430, 4896, 3820, 1634, 5598, 7932, 3926, 7273, 3260, 5633, 1864, 9652, 3894, 9974, 248, 9544, 251, 956, 5013, 6309, 4419, 209, 3908, 2308, 9554, 9158, 7134, 7347, 1996, 5408, 8279, 9567, 6406, 9851, 9401, 6929, 7789, 2752, 8905, 7837, 9724, 3370, 1491, 7459, 9176, 7983, 2636, 7142, 9015, 476, 8516, 815, 2152, 6572, 7577, 2548, 501, 6779, 8552, 6139, 7816, 6626, 958, 3842, 1880, 7030, 584, 7744, 8594, 3158, 7930, 9, 5422, 1532, 9433, 1313, 5301, 9691, 8840, 4338, 1864, 1093, 328, 8295, 4320, 5576, 3046, 8221, 1147, 4488, 1144, 8100, 4922, 8391, 708, 4153, 5501, 3645, 9395, 7605, 8518, 3721, 91, 7850, 8469, 1747, 1670, 6861, 6968, 3715, 4887, 6371, 9799, 5159, 7127, 6029, 1415, 652, 2433, 2283, 191, 1251, 679, 4649, 6929, 9400, 6280, 1500, 9965, 5545, 3644, 902, 7451, 7608, 4218, 1920, 4851, 779, 6002, 4295, 9708, 5542, 7456, 4158, 7705, 9702, 634, 687, 2251, 6344, 6849, 6595, 5284, 2715, 5779, 7240, 7589, 2594, 5045, 9965, 1520, 7846, 7371, 1764, 6753, 6569, 2446, 8367, 3527, 9773, 2865, 688, 7254, 7580, 5742, 6790, 3642, 1237, 6035, 316, 5090, 7614, 5530, 1978, 4026, 3654, 3103, 5129, 1716, 9920, 3587, 4009, 5976, 9256, 9149, 2515, 4358, 9414, 361, 9796, 2591, 8687, 5164, 829, 4386, 5426, 5289, 6828, 3614, 6273, 395, 5930, 4840, 3122, 2230, 4330, 8438, 4312, 3755, 6888, 9202, 3281, 8860, 7798, 3254, 1486, 3092, 3659, 6746, 2961, 190, 8411, 2432, 1026, 9657, 4522, 8146, 7453, 2954, 7824, 6593, 7746, 4460, 7170, 2227, 9143, 8241, 1541, 7042, 4860, 4813, 2213, 5560, 2633, 9914, 1192, 1483, 6026, 6316, 7861, 1241, 1500, 2050, 8870, 6125, 1775, 5902, 4498, 6408, 2406, 5613, 1356, 2354, 6029, 3936, 5614, 7741, 3986, 6053, 2736, 8260, 3527, 534, 4312, 3094, 981, 9058, 7467, 1278, 5458, 9289, 1182, 9957, 1085, 8228, 1270, 5057, 600, 3397, 6791, 2189, 1982, 6536, 446, 2744, 814, 6260, 9087, 9693, 1166, 5430, 7855, 6656, 3561, 1830, 8976, 6349, 8593, 8546, 1928, 3906, 9546, 4935, 2368, 5983, 3112, 7018, 9872, 4489, 5702, 2639, 4245, 7673, 193, 3320, 826, 9203, 7127, 1223, 2284, 200, 504, 2401, 9323, 3652, 8113, 178, 7025, 3546, 2036, 692, 6645, 8198, 2286, 3202, 7544, 4825, 7963, 2522, 5552, 5383, 4210, 9854, 507, 445, 7, 6578, 7667, 3721, 7778, 7464, 6317, 8549, 4705, 7303, 7094, 9070, 2759, 5922, 1115, 955, 5082, 4416, 9093, 8302, 9254, 2428, 7680, 881, 3875, 7146, 904, 6712, 8194, 7874, 504, 4372, 9511, 3369, 3962, 8419, 6957, 1267, 7323, 1198, 9547, 7230, 1124, 8683, 1753, 985, 7222, 7333, 9625, 7998, 5832, 3325, 4126, 2332, 753, 2027, 9603, 660, 2693, 2290, 3962, 6330, 3353, 6822, 5442, 8835, 7054, 826, 8152, 2255, 7768, 8517, 7159, 3113, 9136, 4771, 457, 3088, 7141, 275, 6804, 94, 3568, 1521, 1667, 297, 3583, 8321, 810, 3817, 5449, 2418, 4280, 8565, 3919, 3075, 1619, 2651, 1063, 6070, 2223, 7747, 4647, 3892, 5270, 6212, 4421, 7475, 4189, 880, 2742, 7023, 584, 1927, 139, 3400, 6056, 8689, 1596, 8421, 1437, 6633, 8647, 1071, 3779, 9181, 6001, 9075, 5342, 3527, 6723, 1619, 7136, 994, 4225, 8544, 3458, 7279, 4408, 7046, 5325, 3682, 9712, 4852, 4806, 8477, 2351, 688, 6707, 3898, 5292, 8601, 3332, 5064, 1969, 9999, 7076, 9268, 337, 8916, 3832, 6063, 8022, 3831, 8544, 3614, 575, 9400, 4544, 2792, 9970, 4511, 5394, 9144, 713, 9386, 3898, 74, 905, 2661, 5890, 3968, 5162, 1798, 4362, 9569, 7099, 8734, 6889, 9607, 2194, 6322, 4770, 7832, 5331, 4948, 5310, 1300, 6724, 2439, 4535, 2178, 3749, 3463, 1442, 8781, 6927, 6449, 9702, 4285, 3724, 3964, 9036, 7143, 4733, 9488, 4513, 1709, 5868, 9024, 3176, 1482, 6185, 2920, 8598, 8811, 5077, 9736, 6698, 8405, 5926, 6356, 245, 8822, 2505, 2487, 5263, 2564, 7030, 5714, 3087, 1456, 1934, 5262, 7239, 9113, 9660, 3488, 3107, 679, 261, 9133, 6544, 8450, 2127, 7999, 1251, 8214, 1340, 4316, 9344, 7667, 8822, 1558, 571, 3685, 2197, 64, 2208, 6774, 2897, 3560, 2901, 3839, 6942, 1410, 14, 5899, 6442, 2461, 6562, 7284, 7757, 8071, 7361, 6776, 6247, 1558, 7877, 5101, 4764, 7238, 8714, 8349, 8262, 2915, 6233, 5419, 9398, 643, 8254, 4259, 6350, 8750, 9224, 4151, 9681, 662, 4121, 8954, 5773, 4937, 1543, 870, 2094, 9, 1469, 5968, 8702, 2405, 8225, 1264, 6209, 8360, 8380, 7669, 4296, 2906, 4364, 2139, 482, 4245, 3935, 8753, 4240, 9157, 1786, 4924, 8689, 2801, 416, 6530, 462, 6536, 6670, 2954, 6618, 6884, 7937, 4686, 1432, 8912, 4032, 6052, 1257, 9251, 3856, 3649, 6466, 2019, 5187, 7239, 1885, 5074, 8376, 180, 1965, 3482, 2525, 9640, 9197, 2933, 2555, 2933, 2141, 1422, 2363, 9673, 1074, 2275, 6308, 5522, 5759, 1091, 336, 756, 9055, 5904, 5503, 9753, 1716, 5351, 2397, 4729, 9428, 772, 48, 3712, 5477, 6086, 108, 3297, 6180, 2318, 106, 512, 4436, 4368, 6558, 8262, 4768, 6945, 2226, 5817, 1851, 5624, 6695, 5539, 9031, 3445, 5079, 7938, 5231, 6775, 8079, 2919, 7032, 9512, 453, 4260, 3594, 2576, 233, 3168, 7140, 1087, 2782, 7561, 6531, 8985, 8132, 6826, 1345, 4343, 484, 4737, 3740, 5339, 7230, 1403, 7022, 1419, 4621, 3270, 5411, 8628, 3364, 6557, 3914, 2947, 865, 7732, 3478, 8870, 3729, 1445, 9452, 7841, 3690, 7540, 1873, 1793, 7725, 871, 8083, 551, 5214, 8878, 1761, 5885, 8507, 2364, 1555, 5516, 3873, 4461, 2866, 3122, 9865, 5785, 1841, 6697, 7738, 5070, 3976, 7434, 5129, 5241, 1085, 1495, 8071, 2543, 2039, 732, 7963, 7425, 4972, 4676, 1304, 7882, 5593, 5119, 1664, 7974, 6700, 5227, 1858, 9278, 3756, 2256, 2436, 6854, 8168, 1583, 5610, 5369, 5012, 3971, 4558, 6989, 2651, 9310, 383, 5159, 9902, 3, 1208, 215, 5875, 9754, 755, 4017, 5182, 5213, 3333, 8284, 6015, 1787, 8722, 7218, 8324, 613, 6320, 7305, 6473, 3047, 480, 844, 9999, 6849, 4235, 6706, 2910, 6418, 8776, 6953, 7778, 8734, 9992, 3009, 5741, 6511, 5590, 7816, 6274, 2693, 872, 5789, 9287, 3034, 8868, 1655, 9613, 5554, 1513, 5673, 1114, 8582, 9610, 6936, 772, 3244, 5324, 1695, 1860, 1787, 8551, 6644, 9753, 7681, 1659, 827, 397, 3619, 7753, 7898, 1985, 1742, 5153, 5097, 4544, 4571, 6557, 374, 4688, 3414, 9235, 7795, 8053, 5667, 370, 1515, 5060, 90, 1365, 8041, 5163, 5840, 491, 4669, 1027, 5343, 3797, 3619, 9941, 112, 2527, 151, 6640, 6728, 1790, 1912, 1946, 6690, 63, 2091, 2861, 8086, 1954, 4766, 1122, 6828, 4490, 3620, 786, 3951, 580, 9514, 5540, 3034, 7028, 5393, 5002, 3916, 6708, 5108, 3040, 5089, 8334, 5686, 2797, 897, 7943, 686, 5863, 9507, 3286, 6205, 5207, 9203, 7654, 4505, 5026, 1924, 3437, 5306, 2573, 8744, 4784, 2175, 8975, 8011, 7542, 4744, 6539, 1428, 6412, 341, 4828, 8357, 4658, 4174, 3769, 6830, 9375, 452, 6714, 7531, 8068, 1003, 2960, 716, 7389, 3323, 2406, 2580, 5403, 9577, 2574, 3259, 6086, 2151, 1022, 8178, 2454, 5820, 3523, 394, 4732, 6960, 1448, 5204, 7493, 2554, 3602, 7363, 8361, 2669, 7110, 8879, 7011, 2118, 2448, 3748, 1339, 6169, 9860, 2733, 7466, 2798, 2733, 6855, 2246, 3492, 6416, 1527, 2817, 8762, 3363, 5047, 6621, 2500, 3394, 2360, 7077, 2930, 6209, 3081, 8372, 4105, 1299, 2591, 4126, 4668, 7012, 1015, 5503, 269, 8040, 5395, 9784, 6886, 763, 4693, 5896, 8391, 6336, 6458, 3668, 794, 5804, 3315, 6976, 1762, 4874, 9022, 4500, 1290, 915, 8874, 3295, 5191, 1165, 7061, 3176, 5247, 9069, 3034, 4708, 8552, 3252, 1711, 3501, 567, 3790, 9115, 3011, 8224, 6375, 6230, 4836, 4976, 6284, 8605, 772, 5488, 7308, 5005, 8799, 3911, 4686, 948, 7726, 9818, 9120, 4836, 9060, 8765, 2646, 473, 6530, 6824, 9108, 8099, 145, 8418, 2908, 5964, 3332, 9762, 3220, 5918, 353, 6143, 951, 1834, 4296, 5224, 5273, 8595, 1635, 3951, 7629, 8291, 8636, 9620, 8470, 8925, 4228, 4066, 45, 6846, 5827, 5991, 6808, 3309, 9089, 6551, 6263, 1889, 4423, 3901, 8388, 1947, 2999, 274, 7139, 8530, 3530, 9566, 3831, 9374, 1133, 2289, 5358, 1881, 3535, 9555, 2794, 9712, 3126, 2325, 3523, 4429, 8618, 1381, 7778, 6049, 9688, 8393, 8457, 8326, 4252, 9303, 1959, 6981, 6214, 2682, 7239, 3540, 9180, 3608, 8561, 6375, 8665, 4944, 8094, 7796, 9457, 5057, 2503, 5846, 2126, 4565, 8771, 9878, 8777, 6795, 8823, 5544, 8272, 4240, 873, 2600, 8723, 7973, 4701, 620, 5862, 6832, 8077, 8756, 3859, 9571, 4855, 7345, 3604, 4941, 6371, 280, 8102, 9904, 4613, 2701, 8171, 6221, 6903, 3023, 3292, 9944, 2548, 641, 7231, 1280, 5999, 5222, 2824, 1910, 4239, 9116, 7266, 921, 579, 3224, 9163, 7549, 323, 7624, 3468, 5855, 5603, 9901, 7558, 2194, 9934, 9667, 5033, 8548, 1642, 424, 2249, 9332, 1329, 5479, 8405, 7289, 696, 6357, 7829, 2188, 232, 4364, 2813, 6791, 9510, 5747, 6944, 6044, 7482, 3234, 318, 9647, 9484, 1295, 9817, 2190, 7679, 6105, 630, 7537, 8804, 6103, 7623, 286, 5954, 6873, 6143, 8925, 4123, 2852, 1782, 5913, 2056, 5051, 7664, 8266, 1797, 5781, 6497, 4374, 6560, 9034, 5053, 9196, 141, 7651, 6048, 4111, 4725, 9153, 2048, 5622, 7003, 9639, 5636, 826, 6073, 3658, 1425, 249, 6900, 4250, 4089, 2898, 4290, 2003, 1026, 4204, 3158, 6698, 9419, 2747, 3061, 4596, 623, 9587, 7786, 3603, 4728, 6976, 8558, 3328, 3131, 4599, 5699, 4886, 5572, 7649, 1672, 5992, 8147, 8394, 3930, 1900, 3607, 7748, 6699, 4819, 5563, 350, 599, 1860, 9015, 8630, 4539, 4493, 1385, 9713, 9568, 8404, 6895, 8145, 6591, 1974, 5067, 7041, 1601, 7246, 2029, 8975, 4311, 3330, 7503, 6951, 4606, 9301, 886, 400, 1870, 4488, 5291, 1974, 2624, 4579, 8893, 5819, 2928, 9813, 1841, 3909, 5399, 3610, 1300, 8870, 5908, 2067, 1364, 9797, 8620, 5561, 4217, 6005, 7484, 9196, 2625, 3427, 4273, 3560, 345, 147, 2511, 8726, 7119, 5477, 7061, 3294, 2942, 6069, 6420, 3134, 7728, 6798, 9987, 4671, 1372, 7413, 2319, 1219, 7261, 6458, 3689, 830, 8651, 9271, 6799, 2729, 3318, 4188, 5384, 6958, 2127, 429, 6072, 3846, 7411, 2352, 5672, 3495, 856, 8034, 1893, 9839, 8248, 1158, 8911, 3877, 6590, 8413, 7430, 732, 4685, 5007, 2454, 4398, 7190, 1566, 1323, 2105, 8680, 9352, 6251, 8557, 8127, 3818, 2564, 4239, 8173, 9713, 5390, 6947, 8726, 9195, 8062, 1520, 4454, 857, 8594, 2739, 3695, 5601, 4476, 8608, 9739, 7118, 851, 6581, 3553, 4492, 8952, 2276, 2599, 4982, 5446, 6395, 7176, 4812, 5548, 1743, 8123, 881, 9786, 8199, 924, 4887, 4736, 3667, 6343, 8646, 205, 7895, 7344, 5435, 3096, 627, 1403, 1975, 377, 4802, 1608, 9028, 6678, 767, 2631, 9954, 1321, 6680, 6537, 7123, 5909, 815, 4989, 3317, 2214, 3803, 8199, 1970, 2544, 8957, 9844, 819, 3373, 6069, 9525, 413, 8014, 7428, 323, 5879, 5482, 7334, 7736, 828, 3467, 1546, 9722, 9145, 6842, 552, 4290, 6568, 540, 3471, 1133, 471, 4520, 6109, 6938, 846, 6205, 7294, 1311, 8662, 3546, 1157, 7230, 8849, 5341, 8914, 2485, 9120, 5316, 1976, 4119, 5802, 7046, 6511, 6676, 9395, 1079, 6847, 6334, 6922, 5611, 551, 3115, 4228, 1505, 3715, 7049, 7720, 3306, 5300, 2526, 7550, 3684, 7599, 8964, 578, 9681, 9257, 746, 3471, 9152, 9928, 2532, 3465, 4485, 1938, 1757, 5948, 5595, 7432, 275, 8958, 8790, 6849, 3208, 7390, 891, 652, 4031, 4811, 6366, 6192, 7442, 1518, 5298, 6147, 7416, 6828, 3163, 4257, 9250, 4827, 7446, 8078, 4972, 1402, 3214, 1881, 1886, 3459, 6380, 8464, 934, 536, 8615, 9523, 457, 8354, 8788, 1191, 8647, 4688, 8498, 9731, 1274, 9563, 3763, 982, 1620, 7445, 1000, 9785, 3849, 8595, 5580, 8815, 6776, 4339, 4901, 7482, 7390, 8052, 2167, 771, 8243, 7666, 7582, 8768, 479, 9275, 3786, 3241, 9532, 2278, 9802, 412, 1640, 969, 5925, 6524, 9807, 209, 4234, 6672, 7137, 1207, 1201, 9583, 6359, 7845, 2661, 1742, 536, 5591, 9112, 711, 1148, 9321, 7864, 2379, 3170, 7766, 3279, 3395, 7201, 3859, 6671, 9825, 4452, 5704, 7150, 1284, 7169, 4767, 3363, 8010, 4662, 1519, 8858, 8340, 7670, 5920, 4405, 5011, 8437, 4871, 299, 6271, 9417, 4053, 1757, 3384, 4579, 87, 6074, 426, 8024, 8055, 9177, 3089, 1623, 1839, 2274, 7363, 5241, 2964, 2427, 7288, 7113, 7410, 4356, 1988, 6532, 7892, 6771, 929, 5874, 5103, 5357, 4036, 3501, 1349, 2147, 9484, 256, 5360, 2923, 1939, 4751, 2150, 6176, 5054, 9299, 9345, 7348, 6730, 2697, 7290, 2476, 291, 9574, 5995, 8552, 3285, 83, 5156, 1417, 2851, 5286, 6043, 7632, 5649, 3119, 6781, 6977, 860, 83, 9975, 4644, 1466, 277, 524, 4638, 7962, 3349, 8468, 9820, 374, 7115, 4264, 1372, 1752, 3058, 682, 6015, 9019, 7590, 5625, 6575, 1996, 7042, 7078, 5929, 9624, 2045, 5996, 6697, 4277, 3947, 6178, 6240, 7455, 9883, 1233, 7879, 6993, 5253, 5256, 8640, 4044, 2661, 160, 5430, 4068, 9165, 4567, 3738, 3231, 8787, 4229, 6043, 6360, 4511, 8017, 5859, 8616, 6948, 7912, 8256, 2344, 5733, 251, 4085, 7925, 1505, 6275, 924, 9027, 3943, 5124, 3705, 3744, 5650, 3999, 4008, 6700, 4835, 2122, 9369, 453, 5668, 4687, 4843, 6897, 7331, 7598, 1359, 2377, 8281, 1525, 3014, 5152, 104, 1202, 8705, 5905, 485, 4708, 5288, 2369, 1417, 3980, 4282, 5571, 7019, 4641, 412, 6007, 2105, 3705, 213, 1798, 9470, 5087, 6869, 4114, 7025, 2909, 5874, 7250, 3637, 5425, 7923, 9276, 416, 3902, 1309, 3214, 5327, 7750, 4380, 9494, 5346, 8853, 7153, 1449, 7331, 5328, 2286, 3300, 6586, 1490, 7383, 2603, 3681, 9825, 5707, 4252, 1292, 1953, 2425, 8554, 2135, 3705, 7474, 8399, 2575, 8717, 8555, 4891, 62, 7619, 911, 7916, 9824, 7854, 6683, 4158, 7550, 3283, 8974, 2501, 4691, 4155, 9868, 2377, 5498, 6836, 1853, 9155, 6466, 6453, 178, 6631, 2083, 1784, 4529, 6089, 1901, 1976, 3624, 644, 422, 2272, 2185, 622, 5533, 1474, 6461, 9703, 3600, 6920, 5916, 3592, 7807, 9669, 9076, 6989, 5491, 2217, 7321, 4546, 8950, 7902, 7183, 6134, 9589, 2469, 7111, 6191, 7039, 4908, 6336, 3394, 2543, 7994, 5953, 2202, 2742, 2159, 4206, 5861, 2514, 4043, 1533, 2904, 5971, 1045, 454, 1882, 8060, 7373, 8481, 4137, 9819, 7046, 9837, 2657, 8325, 2066, 3818, 5093, 824, 6832, 7907, 411, 6811, 8752, 2719, 1217, 7158, 8312, 880, 5311, 6533, 6376, 7149, 5970, 6877, 473, 4005, 7501, 1671, 8146, 8169, 4938, 756, 1987, 3113, 4690, 6122, 4330, 8555, 8391, 3135, 5298, 5702, 8098, 4419, 184, 8418, 8897, 2207, 8005, 5365, 4524, 5707, 2708, 8690, 1482, 4215, 6859, 5544, 4084, 1610, 8478, 4623, 6990, 688, 7252, 9561, 9394, 6621, 7066, 1425, 3848, 6599, 6185, 4705, 3988, 1466, 7148, 9439, 7874, 7835, 501, 1183, 5394, 4812, 3784, 7945, 364, 8464, 3010, 1422, 3264, 641, 6740, 8467, 8379, 8514, 429, 8927, 9101, 6326, 3052, 6918, 9304, 6100, 9752, 9882, 6109, 6819, 1424, 848, 5768, 4965, 9010, 381, 4332, 1170, 5330, 6685, 8641, 6689, 5291, 8728, 1477, 1141, 8239, 4449, 1872, 1748, 6572, 1980, 3939, 8796, 5703, 3245, 1514, 4769, 7698, 3102, 7264, 3988, 7998, 5015, 91, 7527, 434, 7381, 8203, 5819, 521, 4235, 7792, 2000, 9059, 655, 32, 6786, 1766, 5051, 7412, 6310, 7719, 2064, 8821, 8999, 647, 4759, 6014, 7712, 8297, 303, 3137, 6160, 2696, 5305, 4185, 265, 7126, 4835, 9709, 6553, 5133, 9516, 9127, 2267, 963, 1317, 4591, 8839, 6090, 2401, 6832, 1924, 6881, 2035, 6342, 1547, 8041, 9375, 6137, 3008, 4812, 5066, 2793, 5476, 9354, 1905, 4464, 7753, 8605, 406, 1994, 2144, 8709, 8416, 5660, 3489, 2929, 8740, 586, 9964, 4650, 5403, 6721, 7964, 7249, 2306, 9077, 4677, 7239, 7604, 4338, 2650, 3627, 9965, 8774, 6613, 3174, 4728, 1060, 8060, 2860, 9845, 29, 1641, 2939, 6092, 6494, 4803, 9024, 2404, 9512, 3683, 8863, 4397, 1437, 7596, 7981, 1031, 8083, 330, 5505, 7703, 8486, 2848, 8878, 2379, 8060, 1393, 8156] Selection Sort Number of Comparisons: 12497500 Number of Swaps: 4993 Bubble Sort Number of Comparisons: 12497500 Number of Swaps: 0 Bubble: [1, 3, 3, 7, 9, 9, 11, 13, 14, 18, 19, 21, 29, 31, 32, 34, 36, 38, 40, 42, 45, 47, 48, 51, 58, 59, 62, 63, 64, 67, 67, 72, 74, 74, 77, 83, 83, 87, 90, 91, 91, 94, 94, 104, 104, 106, 108, 112, 120, 125, 126, 130, 131, 133, 134, 139, 139, 141, 142, 144, 144, 145, 146, 147, 147, 151, 153, 153, 157, 157, 160, 161, 163, 167, 169, 170, 178, 178, 180, 180, 184, 185, 190, 191, 191, 191, 193, 200, 205, 205, 209, 209, 209, 213, 213, 214, 215, 215, 219, 227, 229, 232, 233, 236, 236, 240, 242, 244, 245, 247, 248, 249, 251, 251, 254, 256, 259, 261, 261, 262, 262, 265, 269, 274, 275, 275, 277, 279, 279, 280, 280, 284, 284, 286, 288, 291, 292, 293, 297, 298, 299, 303, 307, 307, 308, 309, 310, 314, 316, 318, 320, 320, 323, 323, 324, 326, 328, 330, 330, 331, 332, 336, 337, 339, 341, 341, 342, 345, 350, 350, 352, 353, 355, 361, 364, 364, 366, 367, 370, 371, 374, 374, 376, 377, 380, 381, 382, 383, 390, 394, 395, 397, 400, 401, 403, 406, 411, 412, 412, 413, 416, 416, 417, 418, 422, 424, 425, 426, 429, 429, 429, 434, 439, 445, 446, 447, 448, 452, 453, 453, 454, 454, 457, 457, 462, 470, 471, 473, 473, 475, 476, 479, 479, 480, 482, 484, 485, 488, 488, 491, 491, 493, 499, 500, 501, 501, 503, 504, 504, 504, 507, 508, 512, 521, 524, 527, 531, 534, 535, 536, 536, 540, 543, 548, 550, 550, 551, 551, 551, 552, 553, 555, 556, 560, 567, 569, 571, 572, 573, 575, 578, 579, 579, 580, 582, 584, 584, 586, 586, 589, 590, 599, 600, 606, 606, 608, 609, 613, 613, 615, 619, 620, 622, 622, 623, 623, 624, 627, 629, 630, 631, 634, 635, 637, 641, 641, 641, 643, 644, 647, 649, 649, 649, 651, 652, 652, 655, 655, 657, 660, 661, 662, 665, 668, 670, 671, 673, 676, 678, 679, 679, 681, 682, 684, 686, 687, 688, 688, 688, 692, 693, 693, 696, 698, 703, 704, 708, 708, 709, 710, 711, 713, 715, 716, 722, 724, 730, 731, 732, 732, 735, 744, 746, 747, 748, 752, 753, 755, 756, 756, 756, 763, 763, 765, 767, 769, 770, 771, 772, 772, 772, 774, 777, 778, 779, 781, 784, 786, 787, 787, 787, 792, 794, 796, 802, 809, 810, 814, 814, 815, 815, 818, 819, 819, 820, 821, 822, 823, 824, 826, 826, 826, 827, 827, 828, 829, 830, 831, 832, 832, 837, 842, 842, 844, 846, 848, 851, 851, 851, 854, 854, 856, 857, 858, 860, 865, 867, 867, 869, 870, 870, 871, 872, 872, 873, 880, 880, 881, 881, 881, 886, 890, 891, 891, 891, 897, 897, 900, 902, 904, 904, 904, 905, 909, 911, 914, 915, 919, 920, 921, 923, 924, 924, 929, 930, 932, 933, 934, 935, 936, 939, 947, 948, 949, 951, 951, 955, 955, 955, 956, 958, 959, 960, 961, 963, 963, 964, 964, 969, 975, 979, 980, 981, 982, 983, 983, 983, 985, 986, 994, 999, 1000, 1003, 1011, 1011, 1013, 1015, 1018, 1022, 1023, 1026, 1026, 1026, 1027, 1028, 1031, 1039, 1045, 1049, 1049, 1052, 1060, 1060, 1062, 1063, 1071, 1074, 1079, 1081, 1085, 1085, 1085, 1087, 1091, 1093, 1094, 1096, 1097, 1104, 1105, 1107, 1107, 1114, 1115, 1120, 1122, 1124, 1133, 1133, 1139, 1141, 1141, 1141, 1142, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1157, 1158, 1159, 1161, 1165, 1166, 1170, 1170, 1175, 1179, 1179, 1182, 1183, 1188, 1188, 1191, 1192, 1192, 1192, 1196, 1197, 1198, 1200, 1201, 1202, 1202, 1204, 1207, 1208, 1211, 1217, 1217, 1219, 1220, 1222, 1223, 1225, 1228, 1233, 1233, 1235, 1237, 1241, 1243, 1244, 1247, 1248, 1248, 1251, 1251, 1257, 1258, 1259, 1264, 1266, 1267, 1267, 1270, 1270, 1271, 1274, 1277, 1278, 1279, 1280, 1282, 1284, 1290, 1291, 1292, 1295, 1296, 1297, 1299, 1300, 1300, 1300, 1304, 1306, 1309, 1309, 1311, 1313, 1315, 1317, 1320, 1321, 1321, 1323, 1324, 1325, 1327, 1329, 1332, 1337, 1339, 1340, 1341, 1342, 1343, 1345, 1346, 1349, 1356, 1359, 1364, 1365, 1365, 1366, 1367, 1371, 1371, 1372, 1372, 1373, 1375, 1375, 1378, 1381, 1385, 1393, 1395, 1396, 1398, 1402, 1403, 1403, 1405, 1410, 1415, 1417, 1417, 1419, 1420, 1422, 1422, 1422, 1423, 1424, 1425, 1425, 1428, 1430, 1432, 1432, 1433, 1434, 1437, 1437, 1439, 1440, 1441, 1442, 1445, 1446, 1448, 1448, 1449, 1456, 1456, 1456, 1457, 1462, 1465, 1466, 1466, 1467, 1468, 1469, 1469, 1470, 1470, 1472, 1474, 1477, 1482, 1482, 1483, 1486, 1486, 1487, 1489, 1490, 1491, 1495, 1499, 1500, 1500, 1500, 1501, 1505, 1505, 1506, 1506, 1513, 1514, 1515, 1517, 1518, 1519, 1520, 1520, 1520, 1521, 1523, 1525, 1527, 1527, 1532, 1533, 1533, 1536, 1541, 1541, 1543, 1544, 1546, 1546, 1547, 1550, 1555, 1558, 1558, 1562, 1564, 1566, 1568, 1571, 1580, 1581, 1583, 1584, 1584, 1586, 1587, 1596, 1596, 1600, 1601, 1608, 1608, 1608, 1610, 1619, 1619, 1619, 1620, 1621, 1623, 1623, 1630, 1631, 1632, 1634, 1635, 1637, 1639, 1640, 1640, 1641, 1642, 1642, 1653, 1655, 1659, 1664, 1667, 1670, 1671, 1672, 1672, 1677, 1677, 1680, 1681, 1681, 1681, 1683, 1695, 1697, 1697, 1701, 1702, 1704, 1709, 1711, 1715, 1716, 1716, 1724, 1727, 1730, 1736, 1738, 1739, 1742, 1742, 1743, 1743, 1747, 1748, 1752, 1753, 1753, 1757, 1757, 1761, 1762, 1764, 1766, 1767, 1769, 1772, 1775, 1776, 1778, 1782, 1783, 1784, 1784, 1786, 1787, 1787, 1790, 1793, 1794, 1795, 1795, 1796, 1797, 1797, 1798, 1798, 1810, 1811, 1821, 1824, 1827, 1830, 1834, 1839, 1839, 1841, 1841, 1844, 1848, 1851, 1853, 1858, 1860, 1860, 1864, 1864, 1864, 1864, 1866, 1867, 1870, 1872, 1873, 1874, 1878, 1878, 1879, 1880, 1881, 1881, 1882, 1885, 1886, 1889, 1893, 1894, 1900, 1901, 1902, 1905, 1906, 1906, 1907, 1908, 1908, 1910, 1912, 1912, 1912, 1918, 1920, 1922, 1924, 1924, 1927, 1927, 1928, 1934, 1938, 1939, 1944, 1945, 1946, 1947, 1951, 1953, 1954, 1954, 1956, 1959, 1964, 1964, 1965, 1969, 1970, 1972, 1974, 1974, 1974, 1974, 1975, 1976, 1976, 1978, 1980, 1982, 1984, 1985, 1987, 1988, 1988, 1989, 1992, 1994, 1995, 1996, 1996, 1997, 2000, 2001, 2003, 2006, 2012, 2014, 2014, 2019, 2021, 2023, 2026, 2027, 2028, 2029, 2031, 2035, 2036, 2039, 2040, 2045, 2048, 2048, 2050, 2050, 2052, 2055, 2056, 2064, 2064, 2066, 2067, 2069, 2069, 2071, 2076, 2083, 2085, 2086, 2088, 2090, 2091, 2094, 2095, 2095, 2097, 2100, 2101, 2105, 2105, 2105, 2111, 2118, 2119, 2122, 2124, 2124, 2125, 2126, 2127, 2127, 2129, 2129, 2135, 2135, 2136, 2139, 2141, 2141, 2143, 2144, 2147, 2150, 2151, 2152, 2153, 2157, 2157, 2157, 2159, 2160, 2165, 2167, 2167, 2169, 2175, 2176, 2178, 2179, 2179, 2181, 2185, 2185, 2187, 2188, 2189, 2190, 2191, 2192, 2194, 2194, 2197, 2200, 2202, 2202, 2202, 2205, 2206, 2206, 2207, 2207, 2208, 2210, 2212, 2213, 2214, 2217, 2222, 2223, 2225, 2226, 2227, 2230, 2233, 2246, 2246, 2247, 2249, 2251, 2253, 2255, 2255, 2255, 2256, 2256, 2259, 2262, 2267, 2268, 2269, 2272, 2274, 2275, 2276, 2277, 2278, 2279, 2283, 2284, 2284, 2286, 2286, 2286, 2286, 2286, 2289, 2290, 2306, 2308, 2308, 2309, 2309, 2318, 2319, 2321, 2325, 2332, 2338, 2344, 2347, 2349, 2351, 2352, 2353, 2354, 2355, 2360, 2363, 2364, 2368, 2368, 2369, 2369, 2371, 2373, 2377, 2377, 2377, 2379, 2379, 2381, 2394, 2397, 2399, 2401, 2401, 2404, 2405, 2406, 2406, 2409, 2413, 2414, 2417, 2418, 2424, 2425, 2427, 2428, 2431, 2432, 2433, 2433, 2436, 2436, 2439, 2440, 2444, 2446, 2448, 2451, 2453, 2454, 2454, 2455, 2456, 2459, 2461, 2462, 2462, 2469, 2472, 2476, 2483, 2485, 2487, 2487, 2487, 2499, 2500, 2501, 2501, 2501, 2502, 2502, 2503, 2505, 2511, 2514, 2515, 2517, 2522, 2525, 2526, 2527, 2532, 2536, 2540, 2540, 2543, 2543, 2544, 2548, 2548, 2549, 2550, 2553, 2554, 2555, 2555, 2555, 2557, 2558, 2563, 2564, 2564, 2567, 2573, 2573, 2574, 2575, 2576, 2579, 2580, 2581, 2585, 2590, 2591, 2591, 2591, 2594, 2594, 2597, 2599, 2600, 2603, 2603, 2604, 2607, 2608, 2609, 2624, 2625, 2629, 2631, 2633, 2636, 2637, 2639, 2642, 2643, 2646, 2648, 2650, 2651, 2651, 2652, 2654, 2657, 2661, 2661, 2661, 2669, 2670, 2671, 2676, 2678, 2678, 2682, 2685, 2686, 2687, 2690, 2693, 2693, 2696, 2697, 2697, 2701, 2708, 2711, 2714, 2715, 2716, 2717, 2717, 2719, 2720, 2722, 2725, 2729, 2730, 2733, 2733, 2734, 2736, 2739, 2740, 2741, 2742, 2742, 2744, 2747, 2748, 2751, 2752, 2759, 2761, 2763, 2782, 2785, 2786, 2792, 2793, 2794, 2797, 2798, 2801, 2804, 2807, 2809, 2810, 2813, 2813, 2814, 2816, 2817, 2817, 2824, 2828, 2828, 2830, 2840, 2848, 2849, 2851, 2852, 2856, 2859, 2860, 2861, 2863, 2865, 2866, 2872, 2876, 2888, 2889, 2892, 2897, 2898, 2901, 2904, 2906, 2908, 2909, 2909, 2910, 2912, 2915, 2916, 2917, 2917, 2919, 2919, 2920, 2920, 2921, 2921, 2923, 2924, 2928, 2929, 2929, 2930, 2933, 2933, 2936, 2939, 2939, 2942, 2947, 2952, 2954, 2954, 2954, 2959, 2960, 2961, 2963, 2963, 2964, 2964, 2968, 2969, 2976, 2984, 2987, 2988, 2992, 2998, 2999, 3000, 3001, 3002, 3005, 3006, 3008, 3009, 3010, 3010, 3011, 3013, 3014, 3023, 3024, 3028, 3034, 3034, 3034, 3034, 3037, 3038, 3040, 3045, 3046, 3046, 3047, 3052, 3053, 3058, 3058, 3060, 3060, 3061, 3063, 3067, 3075, 3079, 3081, 3083, 3086, 3086, 3087, 3088, 3089, 3090, 3092, 3092, 3094, 3096, 3102, 3103, 3107, 3110, 3112, 3113, 3113, 3114, 3115, 3117, 3117, 3119, 3122, 3122, 3126, 3127, 3128, 3131, 3134, 3135, 3137, 3139, 3150, 3152, 3152, 3155, 3156, 3158, 3158, 3160, 3161, 3163, 3163, 3163, 3168, 3170, 3174, 3174, 3176, 3176, 3182, 3188, 3188, 3188, 3195, 3195, 3197, 3198, 3201, 3202, 3208, 3209, 3212, 3212, 3213, 3214, 3214, 3215, 3216, 3216, 3220, 3222, 3222, 3224, 3229, 3231, 3234, 3234, 3236, 3240, 3241, 3243, 3244, 3245, 3245, 3252, 3254, 3255, 3259, 3259, 3260, 3260, 3264, 3270, 3278, 3279, 3281, 3283, 3283, 3285, 3286, 3286, 3287, 3291, 3292, 3294, 3295, 3297, 3300, 3302, 3306, 3309, 3312, 3312, 3315, 3315, 3315, 3317, 3317, 3318, 3320, 3322, 3323, 3324, 3325, 3328, 3328, 3330, 3332, 3332, 3333, 3333, 3333, 3335, 3346, 3349, 3349, 3349, 3349, 3353, 3353, 3355, 3355, 3360, 3363, 3363, 3364, 3367, 3367, 3369, 3369, 3370, 3373, 3375, 3376, 3381, 3383, 3384, 3385, 3385, 3391, 3394, 3394, 3395, 3396, 3397, 3400, 3402, 3404, 3405, 3407, 3410, 3412, 3414, 3414, 3415, 3417, 3424, 3425, 3426, 3427, 3434, 3437, 3437, 3437, 3441, 3445, 3445, 3447, 3447, 3458, 3459, 3461, 3461, 3463, 3465, 3465, 3467, 3468, 3471, 3471, 3476, 3476, 3476, 3478, 3480, 3481, 3482, 3483, 3483, 3486, 3487, 3488, 3489, 3492, 3493, 3493, 3495, 3497, 3497, 3499, 3501, 3501, 3501, 3501, 3508, 3515, 3516, 3517, 3523, 3523, 3523, 3525, 3527, 3527, 3527, 3530, 3531, 3534, 3535, 3535, 3540, 3543, 3546, 3546, 3552, 3553, 3560, 3560, 3561, 3563, 3564, 3568, 3568, 3569, 3569, 3577, 3583, 3584, 3585, 3587, 3588, 3592, 3594, 3595, 3599, 3600, 3600, 3602, 3603, 3603, 3604, 3604, 3607, 3608, 3609, 3610, 3611, 3614, 3614, 3619, 3619, 3620, 3620, 3624, 3627, 3632, 3637, 3642, 3642, 3642, 3643, 3644, 3645, 3649, 3652, 3654, 3658, 3659, 3663, 3666, 3667, 3668, 3673, 3678, 3680, 3680, 3681, 3682, 3683, 3684, 3685, 3689, 3690, 3690, 3693, 3695, 3696, 3697, 3701, 3705, 3705, 3705, 3705, 3711, 3712, 3712, 3715, 3715, 3721, 3721, 3721, 3721, 3724, 3729, 3734, 3738, 3738, 3740, 3743, 3744, 3748, 3749, 3754, 3755, 3755, 3756, 3761, 3763, 3767, 3769, 3774, 3776, 3779, 3784, 3784, 3786, 3788, 3789, 3790, 3794, 3797, 3803, 3803, 3803, 3803, 3806, 3808, 3810, 3817, 3818, 3818, 3820, 3823, 3825, 3831, 3831, 3831, 3832, 3837, 3838, 3839, 3839, 3842, 3845, 3845, 3846, 3847, 3848, 3848, 3849, 3850, 3855, 3856, 3859, 3859, 3864, 3869, 3870, 3871, 3872, 3873, 3875, 3876, 3877, 3878, 3882, 3882, 3882, 3883, 3886, 3887, 3887, 3891, 3892, 3894, 3898, 3898, 3901, 3902, 3902, 3905, 3906, 3907, 3908, 3909, 3911, 3914, 3914, 3916, 3919, 3921, 3923, 3926, 3927, 3928, 3930, 3932, 3934, 3935, 3936, 3936, 3938, 3939, 3943, 3945, 3947, 3947, 3951, 3951, 3951, 3952, 3954, 3962, 3962, 3964, 3964, 3966, 3968, 3971, 3974, 3976, 3978, 3980, 3981, 3984, 3986, 3988, 3988, 3990, 3995, 3999, 4005, 4006, 4008, 4009, 4009, 4017, 4017, 4018, 4023, 4025, 4025, 4026, 4026, 4027, 4027, 4029, 4031, 4031, 4032, 4032, 4033, 4035, 4036, 4043, 4044, 4044, 4048, 4049, 4053, 4061, 4066, 4066, 4066, 4066, 4068, 4072, 4072, 4074, 4077, 4081, 4081, 4084, 4085, 4085, 4085, 4089, 4089, 4093, 4096, 4096, 4098, 4099, 4105, 4111, 4114, 4115, 4117, 4118, 4119, 4120, 4121, 4121, 4123, 4124, 4125, 4126, 4126, 4131, 4133, 4135, 4137, 4139, 4143, 4143, 4151, 4153, 4155, 4155, 4158, 4158, 4159, 4160, 4162, 4163, 4168, 4171, 4172, 4172, 4174, 4177, 4180, 4184, 4185, 4188, 4189, 4192, 4192, 4193, 4195, 4204, 4204, 4206, 4206, 4210, 4210, 4210, 4211, 4213, 4215, 4217, 4218, 4221, 4225, 4226, 4228, 4228, 4229, 4229, 4234, 4235, 4235, 4237, 4237, 4239, 4239, 4240, 4240, 4244, 4245, 4245, 4245, 4250, 4252, 4252, 4252, 4257, 4259, 4260, 4260, 4264, 4267, 4271, 4273, 4277, 4277, 4280, 4280, 4282, 4282, 4284, 4285, 4285, 4290, 4290, 4293, 4294, 4295, 4296, 4296, 4296, 4296, 4302, 4311, 4312, 4312, 4313, 4314, 4316, 4317, 4317, 4320, 4320, 4327, 4327, 4330, 4330, 4332, 4335, 4338, 4338, 4339, 4341, 4343, 4343, 4343, 4347, 4353, 4356, 4358, 4358, 4358, 4362, 4364, 4364, 4368, 4371, 4372, 4374, 4380, 4380, 4381, 4381, 4383, 4386, 4386, 4397, 4398, 4400, 4402, 4402, 4403, 4405, 4408, 4408, 4409, 4412, 4413, 4413, 4416, 4419, 4419, 4421, 4423, 4423, 4423, 4429, 4430, 4435, 4436, 4443, 4444, 4447, 4448, 4449, 4452, 4454, 4455, 4455, 4456, 4460, 4461, 4464, 4476, 4479, 4480, 4483, 4485, 4486, 4488, 4488, 4489, 4490, 4492, 4493, 4497, 4498, 4499, 4499, 4500, 4500, 4500, 4501, 4503, 4505, 4509, 4511, 4511, 4513, 4519, 4520, 4520, 4522, 4524, 4529, 4529, 4534, 4535, 4539, 4544, 4544, 4546, 4546, 4547, 4548, 4554, 4556, 4558, 4559, 4563, 4564, 4565, 4566, 4567, 4567, 4571, 4572, 4579, 4579, 4584, 4591, 4592, 4593, 4596, 4597, 4599, 4600, 4606, 4612, 4613, 4615, 4617, 4621, 4622, 4623, 4631, 4635, 4635, 4638, 4641, 4641, 4644, 4647, 4649, 4650, 4651, 4654, 4658, 4658, 4658, 4662, 4667, 4668, 4669, 4669, 4671, 4676, 4676, 4677, 4681, 4681, 4683, 4685, 4686, 4686, 4686, 4687, 4688, 4688, 4690, 4691, 4693, 4695, 4699, 4699, 4701, 4704, 4705, 4705, 4708, 4708, 4708, 4725, 4727, 4728, 4728, 4729, 4732, 4733, 4734, 4734, 4736, 4737, 4737, 4738, 4743, 4744, 4747, 4751, 4755, 4759, 4760, 4764, 4766, 4767, 4768, 4769, 4770, 4771, 4771, 4775, 4784, 4787, 4790, 4790, 4792, 4793, 4802, 4803, 4806, 4811, 4812, 4812, 4812, 4812, 4812, 4813, 4814, 4814, 4818, 4818, 4819, 4823, 4825, 4825, 4826, 4827, 4828, 4829, 4834, 4835, 4835, 4835, 4835, 4836, 4836, 4840, 4843, 4845, 4847, 4849, 4850, 4851, 4852, 4855, 4859, 4860, 4862, 4867, 4869, 4871, 4871, 4874, 4874, 4878, 4881, 4883, 4884, 4886, 4886, 4887, 4887, 4889, 4890, 4891, 4891, 4896, 4901, 4901, 4903, 4908, 4910, 4916, 4922, 4923, 4924, 4925, 4932, 4933, 4934, 4935, 4935, 4937, 4937, 4938, 4941, 4944, 4948, 4951, 4951, 4965, 4965, 4972, 4972, 4972, 4975, 4976, 4977, 4977, 4978, 4980, 4982, 4989, 5002, 5005, 5007, 5011, 5011, 5012, 5013, 5015, 5015, 5021, 5025, 5026, 5027, 5028, 5029, 5031, 5033, 5039, 5041, 5045, 5047, 5051, 5051, 5053, 5053, 5054, 5057, 5057, 5058, 5059, 5060, 5064, 5065, 5066, 5067, 5069, 5070, 5071, 5074, 5077, 5078, 5079, 5080, 5082, 5083, 5087, 5087, 5089, 5089, 5090, 5091, 5093, 5097, 5097, 5098, 5101, 5102, 5103, 5108, 5108, 5109, 5111, 5116, 5119, 5120, 5123, 5124, 5129, 5129, 5131, 5133, 5136, 5136, 5136, 5143, 5145, 5148, 5151, 5152, 5153, 5156, 5159, 5159, 5159, 5160, 5161, 5162, 5163, 5164, 5168, 5169, 5174, 5174, 5175, 5182, 5187, 5188, 5188, 5191, 5192, 5196, 5197, 5197, 5204, 5207, 5208, 5208, 5208, 5212, 5213, 5213, 5214, 5222, 5224, 5225, 5227, 5227, 5231, 5233, 5236, 5237, 5240, 5240, 5241, 5241, 5245, 5246, 5247, 5249, 5252, 5253, 5256, 5259, 5262, 5263, 5263, 5267, 5270, 5273, 5273, 5279, 5284, 5284, 5286, 5287, 5287, 5288, 5289, 5289, 5291, 5291, 5291, 5292, 5295, 5297, 5298, 5298, 5300, 5301, 5303, 5304, 5305, 5306, 5306, 5309, 5310, 5311, 5315, 5315, 5316, 5317, 5318, 5321, 5324, 5324, 5325, 5325, 5325, 5327, 5328, 5330, 5331, 5332, 5332, 5337, 5337, 5339, 5339, 5339, 5341, 5342, 5343, 5344, 5346, 5346, 5351, 5357, 5358, 5358, 5359, 5360, 5362, 5365, 5368, 5369, 5383, 5384, 5388, 5390, 5393, 5394, 5394, 5395, 5399, 5403, 5403, 5404, 5406, 5407, 5408, 5408, 5409, 5409, 5411, 5413, 5416, 5417, 5419, 5419, 5419, 5422, 5423, 5425, 5426, 5430, 5430, 5431, 5431, 5431, 5434, 5435, 5440, 5442, 5446, 5449, 5449, 5449, 5456, 5457, 5457, 5458, 5461, 5464, 5476, 5477, 5477, 5478, 5479, 5482, 5482, 5488, 5491, 5493, 5496, 5498, 5501, 5503, 5503, 5505, 5509, 5509, 5511, 5516, 5516, 5520, 5522, 5527, 5528, 5529, 5529, 5530, 5533, 5539, 5539, 5540, 5542, 5544, 5544, 5545, 5548, 5550, 5552, 5554, 5557, 5558, 5560, 5561, 5562, 5563, 5565, 5567, 5571, 5572, 5572, 5576, 5576, 5580, 5582, 5584, 5590, 5591, 5593, 5595, 5598, 5600, 5601, 5601, 5603, 5603, 5604, 5604, 5607, 5610, 5611, 5613, 5614, 5614, 5617, 5618, 5619, 5622, 5623, 5624, 5625, 5626, 5627, 5630, 5632, 5633, 5634, 5636, 5636, 5640, 5644, 5646, 5649, 5650, 5656, 5656, 5657, 5660, 5667, 5668, 5669, 5670, 5672, 5673, 5674, 5675, 5684, 5684, 5684, 5686, 5686, 5690, 5690, 5690, 5692, 5699, 5701, 5702, 5702, 5703, 5704, 5707, 5707, 5709, 5710, 5712, 5714, 5730, 5732, 5733, 5733, 5737, 5741, 5742, 5742, 5747, 5752, 5754, 5758, 5758, 5759, 5761, 5768, 5770, 5773, 5779, 5780, 5781, 5781, 5785, 5787, 5788, 5789, 5792, 5793, 5794, 5797, 5802, 5804, 5817, 5818, 5819, 5819, 5819, 5820, 5820, 5826, 5827, 5832, 5832, 5838, 5838, 5840, 5841, 5844, 5846, 5855, 5855, 5858, 5859, 5861, 5862, 5862, 5863, 5865, 5868, 5870, 5874, 5874, 5874, 5875, 5875, 5878, 5879, 5881, 5885, 5887, 5890, 5892, 5893, 5894, 5896, 5899, 5902, 5904, 5905, 5905, 5905, 5908, 5909, 5910, 5910, 5910, 5913, 5916, 5918, 5920, 5922, 5922, 5925, 5926, 5929, 5930, 5942, 5946, 5948, 5949, 5951, 5952, 5952, 5953, 5954, 5956, 5964, 5966, 5968, 5970, 5971, 5975, 5976, 5976, 5983, 5991, 5992, 5994, 5995, 5996, 5999, 6001, 6002, 6003, 6005, 6005, 6007, 6010, 6011, 6011, 6014, 6015, 6015, 6024, 6026, 6029, 6029, 6030, 6032, 6035, 6036, 6038, 6043, 6043, 6044, 6045, 6048, 6049, 6052, 6053, 6055, 6055, 6056, 6062, 6063, 6064, 6069, 6069, 6070, 6071, 6072, 6072, 6073, 6073, 6074, 6074, 6075, 6076, 6086, 6086, 6089, 6090, 6092, 6092, 6095, 6100, 6103, 6105, 6106, 6106, 6109, 6109, 6114, 6118, 6122, 6125, 6125, 6125, 6128, 6129, 6131, 6134, 6137, 6139, 6140, 6140, 6143, 6143, 6147, 6147, 6147, 6155, 6157, 6159, 6160, 6163, 6164, 6165, 6169, 6170, 6171, 6173, 6175, 6176, 6176, 6178, 6180, 6182, 6185, 6185, 6191, 6191, 6192, 6192, 6194, 6194, 6196, 6203, 6204, 6205, 6205, 6209, 6209, 6212, 6214, 6215, 6215, 6215, 6219, 6221, 6221, 6227, 6227, 6230, 6231, 6233, 6233, 6235, 6235, 6236, 6239, 6240, 6242, 6244, 6246, 6247, 6251, 6260, 6262, 6263, 6266, 6266, 6271, 6271, 6273, 6274, 6274, 6275, 6275, 6280, 6284, 6286, 6290, 6300, 6303, 6307, 6308, 6309, 6310, 6312, 6314, 6315, 6316, 6317, 6317, 6319, 6320, 6322, 6326, 6330, 6334, 6336, 6336, 6340, 6342, 6343, 6344, 6345, 6349, 6350, 6355, 6356, 6356, 6357, 6357, 6359, 6360, 6361, 6361, 6366, 6366, 6371, 6371, 6374, 6375, 6375, 6376, 6380, 6380, 6381, 6382, 6383, 6384, 6394, 6395, 6398, 6399, 6405, 6406, 6408, 6408, 6412, 6416, 6417, 6418, 6419, 6420, 6431, 6437, 6438, 6440, 6442, 6442, 6445, 6449, 6452, 6453, 6453, 6454, 6455, 6457, 6458, 6458, 6461, 6464, 6465, 6466, 6466, 6467, 6472, 6473, 6474, 6484, 6488, 6489, 6494, 6497, 6504, 6505, 6509, 6511, 6511, 6512, 6515, 6517, 6519, 6523, 6524, 6530, 6530, 6531, 6532, 6532, 6533, 6536, 6536, 6537, 6537, 6539, 6544, 6551, 6553, 6557, 6557, 6558, 6560, 6561, 6562, 6563, 6568, 6569, 6572, 6572, 6574, 6575, 6578, 6580, 6581, 6582, 6583, 6585, 6586, 6590, 6591, 6592, 6593, 6593, 6595, 6595, 6599, 6605, 6613, 6618, 6620, 6621, 6621, 6621, 6623, 6626, 6627, 6627, 6631, 6632, 6633, 6635, 6638, 6639, 6640, 6640, 6640, 6641, 6642, 6643, 6643, 6644, 6644, 6645, 6648, 6649, 6651, 6653, 6656, 6660, 6664, 6666, 6669, 6669, 6670, 6671, 6672, 6676, 6676, 6678, 6680, 6683, 6684, 6685, 6685, 6689, 6689, 6689, 6690, 6692, 6695, 6695, 6697, 6697, 6698, 6698, 6699, 6700, 6700, 6701, 6706, 6707, 6708, 6712, 6714, 6715, 6721, 6723, 6724, 6728, 6729, 6730, 6732, 6733, 6737, 6737, 6737, 6740, 6746, 6748, 6751, 6751, 6753, 6771, 6774, 6775, 6776, 6776, 6777, 6779, 6780, 6781, 6781, 6783, 6784, 6784, 6785, 6785, 6786, 6790, 6790, 6791, 6791, 6795, 6795, 6797, 6798, 6799, 6804, 6806, 6807, 6808, 6811, 6816, 6816, 6819, 6822, 6824, 6824, 6826, 6826, 6828, 6828, 6828, 6830, 6832, 6832, 6832, 6836, 6836, 6839, 6842, 6846, 6847, 6848, 6849, 6849, 6849, 6854, 6855, 6858, 6859, 6860, 6861, 6861, 6861, 6869, 6870, 6873, 6874, 6875, 6877, 6880, 6881, 6881, 6881, 6882, 6884, 6886, 6888, 6889, 6890, 6891, 6895, 6895, 6897, 6899, 6899, 6900, 6903, 6905, 6918, 6920, 6922, 6927, 6928, 6929, 6929, 6931, 6934, 6936, 6937, 6938, 6940, 6942, 6942, 6942, 6944, 6945, 6946, 6947, 6948, 6948, 6951, 6952, 6953, 6957, 6957, 6958, 6959, 6960, 6962, 6964, 6965, 6968, 6974, 6976, 6976, 6977, 6978, 6980, 6981, 6981, 6982, 6983, 6989, 6989, 6990, 6993, 7003, 7006, 7011, 7011, 7012, 7013, 7014, 7014, 7017, 7018, 7019, 7022, 7023, 7025, 7025, 7026, 7028, 7030, 7030, 7030, 7031, 7032, 7037, 7037, 7039, 7040, 7041, 7041, 7042, 7042, 7046, 7046, 7046, 7048, 7049, 7053, 7054, 7054, 7061, 7061, 7062, 7064, 7066, 7067, 7069, 7076, 7077, 7078, 7079, 7086, 7094, 7096, 7099, 7110, 7111, 7113, 7114, 7115, 7115, 7117, 7118, 7119, 7121, 7123, 7123, 7126, 7127, 7127, 7127, 7127, 7130, 7130, 7131, 7134, 7136, 7137, 7139, 7140, 7141, 7142, 7143, 7144, 7145, 7146, 7146, 7148, 7148, 7149, 7150, 7151, 7153, 7158, 7159, 7159, 7161, 7164, 7169, 7170, 7171, 7173, 7173, 7176, 7176, 7182, 7183, 7184, 7188, 7189, 7190, 7191, 7201, 7203, 7209, 7218, 7218, 7220, 7222, 7229, 7230, 7230, 7230, 7231, 7233, 7238, 7239, 7239, 7239, 7239, 7240, 7245, 7246, 7249, 7250, 7251, 7252, 7253, 7254, 7261, 7264, 7265, 7266, 7268, 7268, 7270, 7270, 7273, 7273, 7278, 7279, 7279, 7283, 7284, 7288, 7288, 7289, 7290, 7293, 7293, 7294, 7295, 7297, 7303, 7305, 7305, 7305, 7308, 7312, 7315, 7318, 7321, 7323, 7325, 7328, 7329, 7331, 7331, 7333, 7334, 7334, 7339, 7341, 7344, 7345, 7346, 7347, 7348, 7356, 7360, 7361, 7361, 7363, 7363, 7368, 7370, 7371, 7371, 7373, 7373, 7374, 7374, 7377, 7378, 7381, 7383, 7385, 7385, 7389, 7390, 7390, 7391, 7391, 7393, 7396, 7398, 7408, 7410, 7411, 7412, 7412, 7413, 7414, 7416, 7418, 7423, 7425, 7428, 7429, 7430, 7432, 7434, 7438, 7438, 7442, 7444, 7445, 7446, 7447, 7451, 7453, 7455, 7456, 7456, 7456, 7457, 7459, 7464, 7466, 7467, 7468, 7468, 7469, 7472, 7474, 7474, 7475, 7475, 7482, 7482, 7484, 7484, 7488, 7490, 7492, 7493, 7496, 7501, 7503, 7503, 7508, 7520, 7521, 7526, 7527, 7531, 7537, 7539, 7540, 7542, 7542, 7544, 7547, 7549, 7549, 7550, 7550, 7557, 7558, 7558, 7561, 7561, 7561, 7566, 7570, 7577, 7580, 7582, 7584, 7585, 7589, 7590, 7592, 7592, 7596, 7596, 7598, 7599, 7600, 7602, 7604, 7604, 7605, 7605, 7608, 7609, 7612, 7614, 7614, 7614, 7618, 7619, 7623, 7624, 7629, 7632, 7632, 7635, 7637, 7640, 7644, 7644, 7647, 7649, 7651, 7652, 7654, 7654, 7655, 7659, 7660, 7662, 7664, 7664, 7666, 7667, 7667, 7669, 7670, 7673, 7677, 7679, 7680, 7681, 7682, 7689, 7693, 7694, 7698, 7698, 7703, 7705, 7707, 7708, 7712, 7715, 7717, 7719, 7720, 7723, 7725, 7726, 7728, 7730, 7732, 7733, 7736, 7737, 7738, 7741, 7744, 7745, 7745, 7746, 7747, 7748, 7750, 7751, 7753, 7753, 7753, 7757, 7763, 7766, 7766, 7768, 7771, 7773, 7778, 7778, 7778, 7779, 7781, 7783, 7783, 7786, 7788, 7789, 7792, 7795, 7795, 7796, 7798, 7798, 7800, 7806, 7807, 7808, 7809, 7812, 7814, 7816, 7816, 7822, 7824, 7824, 7829, 7831, 7832, 7833, 7833, 7835, 7836, 7837, 7840, 7841, 7845, 7846, 7848, 7850, 7854, 7855, 7855, 7855, 7861, 7861, 7863, 7864, 7864, 7864, 7867, 7868, 7869, 7869, 7871, 7874, 7874, 7877, 7879, 7882, 7884, 7890, 7892, 7893, 7895, 7895, 7898, 7902, 7907, 7909, 7912, 7912, 7914, 7915, 7916, 7922, 7923, 7923, 7923, 7924, 7925, 7926, 7926, 7930, 7932, 7934, 7937, 7938, 7939, 7943, 7945, 7945, 7946, 7947, 7955, 7958, 7962, 7963, 7963, 7964, 7966, 7972, 7973, 7974, 7974, 7976, 7976, 7976, 7981, 7983, 7994, 7996, 7998, 7998, 7999, 8005, 8005, 8005, 8009, 8009, 8010, 8011, 8014, 8017, 8018, 8019, 8022, 8024, 8024, 8025, 8025, 8027, 8034, 8036, 8037, 8037, 8040, 8041, 8041, 8042, 8052, 8052, 8053, 8055, 8057, 8060, 8060, 8060, 8062, 8068, 8068, 8068, 8070, 8070, 8071, 8071, 8072, 8075, 8077, 8078, 8079, 8079, 8081, 8082, 8083, 8083, 8083, 8086, 8091, 8091, 8091, 8094, 8096, 8098, 8099, 8100, 8101, 8102, 8103, 8109, 8113, 8118, 8123, 8127, 8132, 8135, 8135, 8144, 8145, 8145, 8146, 8146, 8147, 8152, 8152, 8153, 8154, 8156, 8168, 8169, 8169, 8171, 8173, 8173, 8174, 8178, 8181, 8183, 8194, 8194, 8198, 8199, 8199, 8203, 8211, 8214, 8221, 8224, 8225, 8228, 8232, 8238, 8239, 8241, 8241, 8243, 8245, 8248, 8254, 8255, 8256, 8260, 8261, 8262, 8262, 8264, 8265, 8266, 8268, 8272, 8274, 8279, 8281, 8281, 8281, 8284, 8285, 8291, 8292, 8292, 8295, 8297, 8298, 8300, 8302, 8304, 8306, 8312, 8314, 8315, 8320, 8321, 8324, 8325, 8326, 8331, 8334, 8335, 8340, 8342, 8349, 8354, 8356, 8357, 8359, 8360, 8360, 8361, 8363, 8367, 8372, 8372, 8376, 8379, 8380, 8382, 8382, 8386, 8388, 8391, 8391, 8391, 8392, 8393, 8393, 8394, 8394, 8394, 8398, 8399, 8401, 8404, 8404, 8405, 8405, 8409, 8409, 8411, 8413, 8413, 8416, 8418, 8418, 8419, 8421, 8421, 8423, 8428, 8437, 8437, 8438, 8439, 8442, 8444, 8445, 8445, 8449, 8450, 8456, 8457, 8459, 8464, 8464, 8465, 8467, 8468, 8468, 8468, 8469, 8470, 8472, 8472, 8473, 8473, 8476, 8477, 8477, 8478, 8480, 8480, 8481, 8483, 8483, 8486, 8490, 8493, 8498, 8500, 8507, 8507, 8512, 8514, 8515, 8516, 8517, 8518, 8526, 8528, 8529, 8530, 8539, 8543, 8543, 8544, 8544, 8546, 8548, 8549, 8551, 8552, 8552, 8552, 8554, 8555, 8555, 8555, 8557, 8558, 8558, 8561, 8561, 8565, 8569, 8581, 8582, 8582, 8587, 8590, 8592, 8593, 8594, 8594, 8595, 8595, 8598, 8601, 8605, 8605, 8608, 8610, 8615, 8616, 8617, 8618, 8620, 8622, 8627, 8628, 8630, 8636, 8636, 8638, 8640, 8641, 8641, 8645, 8646, 8647, 8647, 8648, 8649, 8651, 8653, 8654, 8657, 8662, 8665, 8672, 8677, 8680, 8680, 8680, 8681, 8683, 8683, 8686, 8687, 8689, 8689, 8690, 8691, 8701, 8702, 8704, 8705, 8709, 8714, 8717, 8722, 8723, 8726, 8726, 8728, 8728, 8732, 8734, 8734, 8734, 8736, 8739, 8740, 8740, 8742, 8744, 8750, 8752, 8753, 8753, 8756, 8756, 8758, 8762, 8762, 8762, 8763, 8765, 8768, 8771, 8774, 8775, 8776, 8777, 8781, 8787, 8788, 8789, 8790, 8790, 8792, 8796, 8799, 8802, 8803, 8804, 8811, 8812, 8815, 8815, 8821, 8822, 8822, 8823, 8825, 8830, 8830, 8831, 8835, 8835, 8836, 8837, 8839, 8839, 8840, 8844, 8849, 8849, 8853, 8854, 8855, 8855, 8858, 8858, 8860, 8862, 8863, 8868, 8869, 8869, 8870, 8870, 8870, 8872, 8874, 8878, 8878, 8879, 8879, 8884, 8892, 8893, 8896, 8897, 8905, 8906, 8910, 8911, 8911, 8912, 8914, 8914, 8914, 8916, 8920, 8920, 8925, 8925, 8927, 8932, 8940, 8941, 8942, 8943, 8947, 8950, 8951, 8952, 8952, 8954, 8957, 8958, 8963, 8964, 8964, 8967, 8969, 8974, 8974, 8974, 8975, 8975, 8976, 8977, 8979, 8982, 8985, 8992, 8993, 8993, 8999, 8999, 9000, 9010, 9012, 9015, 9015, 9016, 9019, 9019, 9020, 9022, 9024, 9024, 9026, 9027, 9028, 9028, 9029, 9029, 9031, 9033, 9034, 9036, 9039, 9049, 9054, 9055, 9057, 9058, 9058, 9059, 9060, 9062, 9062, 9069, 9070, 9073, 9073, 9075, 9076, 9077, 9080, 9081, 9083, 9084, 9087, 9087, 9088, 9089, 9090, 9091, 9093, 9093, 9094, 9101, 9101, 9108, 9110, 9112, 9113, 9115, 9116, 9116, 9120, 9120, 9120, 9120, 9122, 9127, 9133, 9133, 9135, 9136, 9136, 9143, 9143, 9144, 9145, 9149, 9152, 9153, 9153, 9155, 9157, 9157, 9158, 9163, 9165, 9165, 9169, 9175, 9176, 9177, 9177, 9178, 9180, 9180, 9180, 9181, 9181, 9181, 9182, 9190, 9190, 9191, 9192, 9193, 9194, 9195, 9196, 9196, 9197, 9197, 9198, 9202, 9203, 9203, 9203, 9206, 9208, 9208, 9208, 9211, 9224, 9226, 9235, 9245, 9250, 9251, 9252, 9254, 9254, 9256, 9257, 9259, 9260, 9260, 9268, 9271, 9275, 9276, 9276, 9278, 9279, 9279, 9281, 9287, 9287, 9288, 9289, 9297, 9299, 9301, 9302, 9303, 9304, 9309, 9310, 9310, 9313, 9314, 9317, 9320, 9321, 9323, 9327, 9332, 9332, 9335, 9338, 9341, 9341, 9344, 9345, 9345, 9345, 9347, 9352, 9354, 9355, 9356, 9357, 9361, 9365, 9367, 9369, 9370, 9371, 9371, 9372, 9374, 9375, 9375, 9375, 9377, 9384, 9386, 9387, 9394, 9395, 9395, 9398, 9399, 9400, 9400, 9401, 9406, 9413, 9414, 9416, 9417, 9418, 9419, 9427, 9428, 9429, 9430, 9433, 9437, 9439, 9439, 9446, 9448, 9449, 9452, 9452, 9455, 9457, 9457, 9464, 9470, 9471, 9471, 9476, 9479, 9484, 9484, 9488, 9492, 9493, 9494, 9495, 9496, 9498, 9503, 9503, 9505, 9507, 9510, 9511, 9512, 9512, 9514, 9515, 9516, 9518, 9520, 9522, 9523, 9523, 9525, 9528, 9529, 9532, 9535, 9538, 9544, 9544, 9546, 9547, 9547, 9548, 9549, 9549, 9554, 9554, 9555, 9561, 9563, 9566, 9566, 9567, 9568, 9568, 9569, 9570, 9571, 9571, 9571, 9574, 9574, 9577, 9581, 9581, 9583, 9583, 9584, 9586, 9587, 9588, 9589, 9589, 9602, 9603, 9604, 9607, 9608, 9610, 9613, 9616, 9619, 9620, 9621, 9624, 9624, 9625, 9630, 9638, 9639, 9640, 9641, 9641, 9647, 9647, 9650, 9652, 9653, 9656, 9657, 9658, 9660, 9661, 9665, 9667, 9668, 9668, 9669, 9673, 9676, 9676, 9677, 9679, 9680, 9681, 9681, 9686, 9686, 9687, 9688, 9691, 9693, 9696, 9700, 9702, 9702, 9703, 9704, 9708, 9709, 9712, 9712, 9713, 9713, 9715, 9721, 9722, 9724, 9728, 9731, 9735, 9736, 9739, 9743, 9752, 9753, 9753, 9753, 9754, 9762, 9763, 9763, 9768, 9769, 9773, 9775, 9777, 9784, 9785, 9786, 9786, 9789, 9796, 9797, 9799, 9801, 9802, 9802, 9805, 9807, 9809, 9810, 9813, 9817, 9817, 9818, 9819, 9819, 9819, 9819, 9820, 9821, 9821, 9824, 9824, 9825, 9825, 9825, 9827, 9828, 9831, 9832, 9833, 9833, 9837, 9839, 9844, 9845, 9845, 9849, 9851, 9852, 9852, 9854, 9860, 9861, 9865, 9868, 9872, 9874, 9875, 9878, 9879, 9881, 9882, 9882, 9883, 9890, 9891, 9896, 9898, 9899, 9901, 9902, 9904, 9904, 9905, 9910, 9913, 9914, 9916, 9920, 9925, 9925, 9928, 9928, 9934, 9937, 9938, 9941, 9943, 9944, 9946, 9948, 9949, 9949, 9954, 9955, 9956, 9957, 9960, 9964, 9965, 9965, 9965, 9970, 9973, 9974, 9974, 9975, 9976, 9984, 9985, 9987, 9987, 9989, 9992, 9992, 9995, 9999, 9999] .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2023/04/05/checkpoint3.html",
            "relUrl": "/college%20board/java/2023/04/05/checkpoint3.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "public class SelectionSort { public static void selectionSort(int[] arr) { int n = arr.length; // One by one move boundary of unsorted subarray for (int i = 0; i &lt; n - 1; i++) { // Find the minimum element in unsorted array int minIndex = i; for (int j = i + 1; j &lt; n; j++) { if (arr[j] &lt; arr[minIndex]) { minIndex = j; } } // Swap the found minimum element with the first element int temp = arr[minIndex]; arr[minIndex] = arr[i]; arr[i] = temp; } } public static void main(String[] args) { int[] arr = { 64, 25, 12, 22, 11 }; selectionSort(arr); System.out.println(&quot;Sorted array:&quot;); for (int i = 0; i &lt; arr.length; ++i) { System.out.print(arr[i] + &quot; &quot;); } } } SelectionSort.main(null); . Sorted array: 11 12 22 25 64 .",
            "url": "https://nicholasramos5.github.io/VSCodings/2023/03/28/SelectionSort.html",
            "relUrl": "/2023/03/28/SelectionSort.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "CSUSM Speaker Event",
            "content": "The Event . Today, I was granted the opportunity to hear from the perspectives of two students from Cal State San Marcos, Ashley and John. The both of them took fairly different pathways in their lives, so I was glad I was able to hear two different perspectives. . The Speakers . Ashley, who majored in applied physics, talked about how she didn&#39;t really do so well academically in her earlier years. She has experience in working in labs at CSUSM. Ashley plans to obtain a PH. D in material sciences and engineering, which she claims she get paid to do. . John claimed he was not the best student in high school either. However, he decided to go to community college and then transfer to CSUSM, which saved him a lot of money. He now majors in computer science, and was able to obtain internships in the field. . John and Ashley spoke on their experiences in college (specifically at CSUSM), and shared with us some useful information and tips that they thought would be helpful for future college attendees. . Paying for College . For one, they explained to us how scholarships, grants, and loans work. College is a big financial investment, so being able to use and spend money wisely is crucial as a young adult. They explained the differences between a grant and a scholarship, and also advised against getting loans if possible. I personally believe this if a topic that many people don&#39;t talk about, as money can be a sensitive for many individuals. However it is quite important for people entering college to be aware of how they&#39;re going to be able to spend their money. . Internships . We, as the audience, were also given advice on how to handle internships during college. John told us that we could find useful internships via Networking, Campus events, school clubs, other universities, or even just google. Ashley made it clear that we should avoid unpaid internships. I find this interesting. I know many high schoolers that are signing up for unpaid research programs over the summer. While I do see the benefits of gaining a greater understanding in a field you are interested with, I feel that many of these research companies that offer experience to highschool students are simply exploiting eager teens who want to get into college for free labor. I feel that many of my peers will be wasting their valuable time over the summer just to try to get the upper hand into college acceptance. I predict that many of these students who do not get into their desired colleges will be devastated and feel the same way as me. . Ashley also encouraged us to get out and try new things, to get experience, and to learn more. Applying for internships that you are under qualified can simply not end badly. &quot;The worst they can say is no&quot;. . John and Ashley also touched on available programs and research projects at CSUSM. I feel that CSUSM is not unique in this matter, and many other universities will also have opportunities for students to put themselves out there. . My Takeaways . I feel that a lot of what our CSUSM speakers spoke on can resonate with me. Ashley talked about failing physics in high school, yet still majoring in applied physics. While I have never failed a class, I feel that I struggle in multiple subject. It is important for me to realize that this should not deter me from pursuing further education in those fields. . Correlation to CS . I especially feel this way about computer science. Out of all classes in high school, CS has been that hardest for me, content wise. Maybe this is partially due to the fact that I did not do CSP, but I also feel like I had no idea what to expect before making this year-long commitment to AP computer science. CS genuinely interests me. I recognize that it is super useful to know, even outside of the field. People with other majors, including Ashley, have stated that they found having some CS knowledge had been helpful in their careers. However, I find myself confused and stuck during many classes. I feel that I&#39;ve been thrown into a pool, without learning how to swim first. . On the other hand, I do feel like I am learning, not only CS, but also how to explain the work I&#39;ve done. CS is really the only class i&#39;ve taken that we have had live reviews. I think learning the skill of explaining your work is crucial in order to deepen one&#39;s understanding in the material, and also learn communication skills, which will be necessary in any work environment. I want to strive to take more time outside of school to better my understandings of computer science content. For example, I thoroughly enjoy taking practice college board MCs, where I need to use my critical thinking skills, as well as knowledge on CS fundamentals to complete them. Even if I do not major directly CS, I believe developing an understanding in the subject will be useful for my life in college and in the future. . Reflection . Overall, I am glad I was able to attend and listen to speakers who&#39;ve had experience in college. It gave me valuable information and advice, which can be applied to my college career. The idea of going to college is quite a stressful experience in my mind. Being able to hear from Ashley and John, and realize that they&#39;re doing well at CSUSM allows me to feel more comfortable about my future in college. .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2023/03/28/CSUSM.html",
            "relUrl": "/college%20board/java/2023/03/28/CSUSM.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Stack T",
            "content": "Challenge 5 . public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } public class Stack&lt;T&gt; { private LinkedList&lt;T&gt; upper; private int count; // constructor initiates null LinkedList&lt;T&gt; object + set size to 0 public Stack() { this.upper = null; this.count = 0; } // push method for a new element to upper public void push(T data) { LinkedList&lt;T&gt; newNode = new LinkedList&lt;T&gt;(data, this.upper); this.upper = newNode; this.count++; } // peek method, return upper public T peek() { try { return this.upper.getData(); } catch (NullPointerException e) { System.out.println(&quot;Stack is Empty&quot;); return null; } } // pop method, return and remove upper public T pop() { try { T data = this.upper.getData(); this.upper = this.upper.getPrevious(); this.count--; return data; } catch (NullPointerException e) { System.out.println(&quot;Stack is Empty&quot;); return null; } } public int getCount() { return this.count; } public boolean isEmpty() { return this.count == 0; } // toString method, from top to bottom public String toString() { String s = &quot;[ &quot;; LinkedList&lt;T&gt; currentNode = upper; while (currentNode != null) { s += currentNode.getData(); currentNode = currentNode.getPrevious(); if (currentNode != null) { s += &quot;, &quot;; } } s += &quot; ]&quot;; System.out.println(s); return s; } } . public class StackTest { public static void main(String[] args) { Stack&lt;Integer&gt; stackInt = new Stack&lt;Integer&gt;(); System.out.println(&quot;Pushing the Stack:&quot;); for (int i = 1; i &lt;= 5; i++) { stackInt.push(i); stackInt.toString(); } System.out.println(&quot;&quot;); System.out.println(&quot;Popping the Stack:&quot;); System.out.println(&quot;&quot;); int count = stackInt.getCount(); for (int i = 0; i &lt;= count; i++) { System.out.print(&quot;Current Stack: &quot;); stackInt.toString(); System.out.println(&quot;Top Node: &quot; + stackInt.peek()); System.out.println(&quot;Nodes in Stack: &quot; + stackInt.getCount()); System.out.println(&quot;Stack Empty: &quot; + stackInt.isEmpty()); stackInt.pop(); System.out.println(&quot;&quot;); } } } StackTest.main(null); . Pushing the Stack: [ 1 ] [ 2, 1 ] [ 3, 2, 1 ] [ 4, 3, 2, 1 ] [ 5, 4, 3, 2, 1 ] Popping the Stack: Current Stack: [ 5, 4, 3, 2, 1 ] Top Node: 5 Nodes in Stack: 5 Stack Empty: false Current Stack: [ 4, 3, 2, 1 ] Top Node: 4 Nodes in Stack: 4 Stack Empty: false Current Stack: [ 3, 2, 1 ] Top Node: 3 Nodes in Stack: 3 Stack Empty: false Current Stack: [ 2, 1 ] Top Node: 2 Nodes in Stack: 2 Stack Empty: false Current Stack: [ 1 ] Top Node: 1 Nodes in Stack: 1 Stack Empty: false Current Stack: [ ] Stack is Empty Top Node: null Nodes in Stack: 0 Stack Empty: true Stack is Empty . public class StackMerger&lt;T&gt; { private final Stack&lt;T&gt; s1; private final Stack&lt;T&gt; s2; private Stack&lt;T&gt; s3; // constructor for Stackmerger public StackMerger(Stack&lt;T&gt; s1, Stack&lt;T&gt; s2) { this.s1 = s1; this.s2 = s2; this.merge(s1, s2); } public void merge(Stack&lt;T&gt; s1, Stack&lt;T&gt; s2) { Stack&lt;T&gt; mergedStack = new Stack&lt;T&gt;(); // if both stacks are not empty, while (!s1.isEmpty() &amp;&amp; !s2.isEmpty()) { mergedStack.push(s1.pop()); mergedStack.push(s2.pop()); } // if s1 is empty, pop from s2 and push to mergedStack while (!s2.isEmpty()) { mergedStack.push(s2.pop()); } // if s2 is empty, pop from s1 and push to mergedStack while (!s1.isEmpty()) { mergedStack.push(s1.pop()); } s3 = mergedStack; } // toString method using Stack&lt;T&gt; toString public String toString() { return s3.toString(); } } public class TesterTwo { public static void main(String[] args) { // test stack with Integer wrapper class Stack&lt;Integer&gt; stack1 = new Stack&lt;Integer&gt;(); for (int i = 1; i &lt;=5; i++){ stack1.push(i); } stack1.toString(); Stack&lt;Integer&gt; stack2 = new Stack&lt;Integer&gt;(); for (int i = 6; i &lt;=10; i++){ stack2.push(i); } stack2.toString(); StackMerger&lt;Integer&gt; stack12 = new StackMerger&lt;Integer&gt;(stack1, stack2); stack12.toString(); } } TesterTwo.main(null); . [ 5, 4, 3, 2, 1 ] [ 10, 9, 8, 7, 6 ] [ 6, 1, 7, 2, 8, 3, 9, 4, 10, 5 ] .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2023/03/26/Stack.html",
            "relUrl": "/college%20board/java/2023/03/26/Stack.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Checkpoint 2",
            "content": "Blog and Define the details of a Class . Access Modifiers . Access modifiers determine the level of access or visibility of a class, method, or variable from other parts of the program. There are four access modifiers: public, private, protected, and default (also known as package-private). . Public access modifier: The class, method, or variable can be accessed from anywhere in the program, even from outside the package. . Private access modifier: The class, method, or variable can only be accessed within the same class. . Protected access modifier: Allows access within the same class and any subclasses, as well as classes in the same package. . Default access modifier: (no keyword is used) restricts access to within the same package. . public String a = &quot;Public&quot;; private String b = &quot;Private&quot;; protected String c = &quot;Protected&quot;; String d = &quot;Default&quot;; public class Public { } private class Private { } protected class Protected { } class Default { } . Constructors . A constructor is a type of method that is used to initialize objects of a class. It has the same name as the class and does not have a return type (not even void). A constructor is called when an object of a class is created using the &quot;new&quot; keyword. It initializes the instance variables of the object and sets it up for use. Constructors can be parameterized, meaning they can accept parameters, or they can be default constructors with no parameters. . public class Car { private String make; private String model; // Constructor public Car(String make, String model) { this.make = make; this.model = model; } } . Getters . Getters are methods that provide access to the private fields of a class. They are used to retrieve the value of a private field from an instance of a class. By using getters, we can keep the data encapsulated within the class, while still providing access to it from outside the class. . public class Person { private String name; public Person(String name) { this.name = name; } //Getter Method public String getName() { return this.name; //accesses the private String name } } . Setters . Setters are methods that provide a way to update the value of a private field in a class.They are used to modify the value of a private field from outside the class. By using setters, we can keep the data encapsulated within the class and provide a controlled way to update it. . public class Person { private String name; public Person(String name) { this.name = name; } public String getName() { return this.name; } //Setter Method public void setName(String name) { this.name = name; //Updates the value of private String name } } . /* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; LinkedList&lt;T&gt; node = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; extends Queue&lt;T&gt;{ // queue data private final String name; // name of queue protected int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of Words Object[] words = new String[] { &quot;seven&quot;, &quot;slimy&quot;, &quot;snakes&quot;, &quot;sallying&quot;, &quot;slowly&quot;, &quot;slithered&quot;, &quot;southward&quot;}; QueueManager qWords = new QueueManager(&quot;Words&quot;, words ); qWords.printQueue(); // Create iterable Queue of Integers Object[] numbers = new Integer[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; QueueManager qNums = new QueueManager(&quot;Integers&quot;, numbers ); qNums.printQueue(); // // Create iterable Queue of NCS Generics // Animal.setOrder(Animal.KeyType.name); // Alphabet.setOrder(Alphabet.KeyType.letter); // Cupcake.setOrder(Cupcake.KeyType.flavor); // // Illustrates use of a series of repeating arguments // QueueManager qGenerics = new QueueManager(&quot;My Generics&quot;, // Alphabet.alphabetData(), // Animal.animals(), // Cupcake.cupcakes() // ); // qGenerics.printQueue(); // Create iterable Queue of Mixed types of data QueueManager qMix = new QueueManager(&quot;Mixed&quot;); qMix.queue.add(&quot;Start&quot;); qMix.addList( words, numbers ); // Alphabet.alphabetData(), // Animal.animals(), // Cupcake.cupcakes() qMix.queue.add(&quot;End&quot;); qMix.printQueue(); } } QueueTester.main(null); . Words count: 7 Words data: seven slimy snakes sallying slowly slithered southward Integers count: 10 Integers data: 0 1 2 3 4 5 6 7 8 9 Mixed count: 17 Mixed data: Start seven slimy snakes sallying slowly slithered southward 0 1 2 3 4 5 6 7 8 9 End . Start of My Code . import java.util.Random; /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueChange&lt;T&gt; { // queue data private final String name; // name of queue protected int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object private String lastOperation = &quot;&quot;; private String lastObject = &quot;&quot;; /** * Queue constructor * Title with empty queue */ public QueueChange(String name) { this.name = name; } public int getCount() { return this.count; } /** * Print any array objects from queue */ public void printQueue() { System.out.println(lastOperation + &quot;: &quot; + lastObject); System.out.print(this.name + &quot; count: &quot; + count); System.out.print(&quot;, data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } public void printIntQueue() { for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } /** * Add an objects to queue */ public void add(T object) { //accepts single generic T Object this.queue.add(object); this.count++; this.lastOperation = &quot;Enqueued&quot;; this.lastObject = object.toString(); } public LinkedList&lt;T&gt; getHead() { return this.queue.getHead(); } public T delete() { //accepts single generic T Object T headObject = this.queue.delete(); this.count--; this.lastOperation = &quot;Dequeued&quot;; this.lastObject = headObject.toString(); return headObject; } public T peek() { //accepts single generic T Object return this.queue.peek(); } public LinkedList&lt;T&gt; getNode(int index) { LinkedList&lt;T&gt; node = queue.getHead(); for (int i = 0; i &lt; index; i++) { node = node.getNext(); } return node; } public void shuffle() { for(LinkedList&lt;T&gt; node1 = queue.getHead(); node1 != null; node1 = node1.getNext()) { Random random = new Random(); int index = random.nextInt(count); LinkedList&lt;T&gt; node2 = getNode(index); T temp = node1.getData(); node1.setData(node2.getData()); node2.setData(temp); } } } . Challenge #1 . class QueueChangeTester { public static void main(String[] args) { Object[] words = new String[] { &quot;seven&quot;, &quot;slimy&quot;, &quot;snakes&quot;, &quot;sallying&quot;, &quot;slowly&quot;, &quot;slithered&quot;, &quot;southward&quot;}; QueueChange qWords = new QueueChange(&quot;Words&quot;); for (Object o : words) { qWords.add(o); qWords.printQueue(); } for (Object o : words) { qWords.delete(); qWords.printQueue(); } Object[] FRQs = new String[] { &quot;2021 Question 1&quot;, &quot;2019 Question 2&quot;, &quot;2020 Question 3&quot;, &quot;2003 Question 4&quot;, &quot;2016 Question 3&quot;, &quot;2018 Question 2&quot;, &quot;2005 Question 1&quot;}; QueueChange qFRQs = new QueueChange(&quot;FRQs&quot;); for (Object o : FRQs) { qFRQs.add(o); qFRQs.printQueue(); } for (Object o : FRQs) { qFRQs.delete(); qFRQs.printQueue(); } } } QueueChangeTester.main(null); . Enqueued: seven Words count: 1, data: seven Enqueued: slimy Words count: 2, data: seven slimy Enqueued: snakes Words count: 3, data: seven slimy snakes Enqueued: sallying Words count: 4, data: seven slimy snakes sallying Enqueued: slowly Words count: 5, data: seven slimy snakes sallying slowly Enqueued: slithered Words count: 6, data: seven slimy snakes sallying slowly slithered Enqueued: southward Words count: 7, data: seven slimy snakes sallying slowly slithered southward Dequeued: seven Words count: 6, data: slimy snakes sallying slowly slithered southward Dequeued: slimy Words count: 5, data: snakes sallying slowly slithered southward Dequeued: snakes Words count: 4, data: sallying slowly slithered southward Dequeued: sallying Words count: 3, data: slowly slithered southward Dequeued: slowly Words count: 2, data: slithered southward Dequeued: slithered Words count: 1, data: southward Dequeued: southward Words count: 0, data: Enqueued: 2021 Question 1 FRQs count: 1, data: 2021 Question 1 Enqueued: 2019 Question 2 FRQs count: 2, data: 2021 Question 1 2019 Question 2 Enqueued: 2020 Question 3 FRQs count: 3, data: 2021 Question 1 2019 Question 2 2020 Question 3 Enqueued: 2003 Question 4 FRQs count: 4, data: 2021 Question 1 2019 Question 2 2020 Question 3 2003 Question 4 Enqueued: 2016 Question 3 FRQs count: 5, data: 2021 Question 1 2019 Question 2 2020 Question 3 2003 Question 4 2016 Question 3 Enqueued: 2018 Question 2 FRQs count: 6, data: 2021 Question 1 2019 Question 2 2020 Question 3 2003 Question 4 2016 Question 3 2018 Question 2 Enqueued: 2005 Question 1 FRQs count: 7, data: 2021 Question 1 2019 Question 2 2020 Question 3 2003 Question 4 2016 Question 3 2018 Question 2 2005 Question 1 Dequeued: 2021 Question 1 FRQs count: 6, data: 2019 Question 2 2020 Question 3 2003 Question 4 2016 Question 3 2018 Question 2 2005 Question 1 Dequeued: 2019 Question 2 FRQs count: 5, data: 2020 Question 3 2003 Question 4 2016 Question 3 2018 Question 2 2005 Question 1 Dequeued: 2020 Question 3 FRQs count: 4, data: 2003 Question 4 2016 Question 3 2018 Question 2 2005 Question 1 Dequeued: 2003 Question 4 FRQs count: 3, data: 2016 Question 3 2018 Question 2 2005 Question 1 Dequeued: 2016 Question 3 FRQs count: 2, data: 2018 Question 2 2005 Question 1 Dequeued: 2018 Question 2 FRQs count: 1, data: 2005 Question 1 Dequeued: 2005 Question 1 FRQs count: 0, data: . Challenge #2 . class QueueRearrange { public static void main(String[] args) { Object[] ints1 = new Integer[] { 1, 3, 5, 7}; QueueChange q1 = new QueueChange(&quot;Queue1&quot;); Object[] ints2 = new Integer[] { 2, 4, 6, 8}; QueueChange q2 = new QueueChange(&quot;Queue2&quot;); Object[] ints3 = new Integer[] { }; QueueChange q3 = new QueueChange(&quot;Queue3&quot;); for (Object o : ints1) { q1.add(o); } for (Object o : ints2) { q2.add(o); } System.out.print(&quot;Initial Queue First: &quot;); q1.printIntQueue(); System.out.print(&quot;Initial Queue Second: &quot;); q2.printIntQueue(); while (q1.getCount() != 0 || q2.getCount() != 0) { if (q1.getCount() != 0 &amp;&amp; q2.getCount() != 0) { int i1 = (Integer) q1.peek(); int i2 = (Integer) q2.peek(); if (i1 &lt;= i2) { q3.add(q1.delete()); } else { q3.add(q2.delete()); } } else if (q1.getCount() != 0) { q3.add(q1.delete()); } else if (q2.getCount() !=0) { q3.add(q2.delete()); } else { } } System.out.print(&quot;Final Queue Third: &quot;); q3.printIntQueue(); } } QueueRearrange.main(null); . Initial Queue First: 1 3 5 7 Initial Queue Second: 2 4 6 8 Final Queue Third: 1 2 3 4 5 6 7 8 . Challenge #3 . public class ShuffleTester { public static void main(String[] args) { Object[] numbers = new Integer[] { 1, 2, 3, 4, 5}; QueueChange qNumbers = new QueueChange(&quot;Numbers&quot;); for (Object o : numbers) { qNumbers.add(o); } System.out.print(&quot;Original Queue: &quot;); qNumbers.printIntQueue(); qNumbers.shuffle(); System.out.print(&quot;Queue After Shuffling: &quot;); qNumbers.printIntQueue(); } } ShuffleTester.main(null); . Original Queue: 1 2 3 4 5 Queue After Shuffling: 1 2 3 5 4 . Challenge #4 . import java.util.Stack; public class QueueToStackExample { public static void main(String[] args) { Object[] numbers = new Integer[] { 1, 2, 3, 4, 5}; QueueChange qNumbers = new QueueChange(&quot;Numbers&quot;); for (Object o : numbers) { qNumbers.add(o); } Stack&lt;Object&gt; stack = new Stack&lt;&gt;(); System.out.println(&quot;Stack Initial: &quot; + stack); System.out.print(&quot;Queue Initial: &quot;); qNumbers.printIntQueue(); // Add integers 1 through 5 to the stack int count = qNumbers.getCount(); for (int i = 0; i &lt; count; i++) { stack.push(qNumbers.delete()); } System.out.println(&quot;Stack Full: &quot; + stack); System.out.print(&quot;Queue when Stacked: &quot;); qNumbers.printIntQueue(); for (int i = 0; i &lt; count; i++) { qNumbers.add(stack.pop()); } System.out.println(&quot;Stack Final: &quot; + stack); System.out.print(&quot;Queue Final: &quot;); qNumbers.printIntQueue(); } } QueueToStackExample.main(null); . Stack Initial: [] Queue Initial: 1 2 3 4 5 Stack Full: [1, 2, 3, 4, 5] Queue when Stacked: Stack Final: [] Queue Final: 5 4 3 2 1 .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2023/03/25/Checkpoint2.html",
            "relUrl": "/college%20board/java/2023/03/25/Checkpoint2.html",
            "date": " • Mar 25, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Checkpoint 1",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . /* * FRQ class extends Generics and defines abstract methods */ public class FRQ extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { FRQ.key = key; } public enum KeyType implements KeyTypes {title, year, problem, subject, difficulty} // Instance data private final int year; private final int problem; private final String subject; private final String difficulty; /* constructor * */ public FRQ(int year, int problem, String subject, String difficulty) { super.setType(&quot;FRQ&quot;); this.year = year; this.problem = problem; this.subject = subject; this.difficulty = difficulty; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return FRQ.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.year.equals(this.getKey())) { output += this.year; } else if (KeyType.problem.equals(this.getKey())) { output += this.problem; } else if (KeyType.subject.equals(this.getKey())) { output += this.subject; } else if (KeyType.difficulty.equals(this.getKey())) { output += this.difficulty; } else { output += super.getType() + &quot;: &quot; + this.year + &quot;, &quot; + this.problem + &quot;, &quot; + this.subject + &quot;, &quot; + this.difficulty; } return output; } // Test data initializer public static FRQ[] FRQs() { return new FRQ[]{ new FRQ(2010, 1, &quot;Methods and Control Structures&quot;, &quot;Medium&quot;), new FRQ(2017, 4, &quot;2D Arrays&quot;, &quot;Easy&quot;), new FRQ(2021, 3, &quot;Classes&quot;, &quot;Hard&quot;), new FRQ(2015, 1, &quot;Arrays&quot;, &quot;Easy&quot;), }; } /* main to test FRQ class * */ public static void main(String[] args) { // Inheritance Hierarchy FRQ[] objs = FRQs(); // print with title FRQ.setOrder(KeyType.title); FRQ.print(objs); // print subject only FRQ.setOrder(KeyType.subject); FRQ.print(objs); } } FRQ.main(null); . class [LREPL.$JShell$22I$FRQ; 4 Generic: FRQ listed by title FRQ: 2010, 1, Methods and Control Structures, Medium FRQ: 2017, 4, 2D Arrays, Easy FRQ: 2021, 3, Classes, Hard FRQ: 2015, 1, Arrays, Easy class [LREPL.$JShell$22I$FRQ; 4 Generic: FRQ listed by subject Methods and Control Structures 2D Arrays Classes Arrays . public class FRQTypes extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { FRQTypes.key = key; } public enum KeyType implements KeyTypes {title, name, year, qnum, description} // Instance data private final String name; private final int year; private final int qnum; private String description; /* constructor * */ public FRQTypes(String name, int year, int qnum, String description) { super.setType(&quot;FRQTypes&quot;); this.name = name; this.year = year; this.qnum = qnum; if (description == null) { this.description = &quot;No description&quot;; } else { this.description = description; } } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return FRQTypes.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.year.equals(this.getKey())) { output += this.year; } else if (KeyType.qnum.equals(this.getKey())) { output += this.qnum; } else if (KeyType.description.equals(this.getKey())) { output += this.description; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.year + &quot;, &quot; + this.qnum + &quot;, &quot; + this.description; } return output; } // Test data initializer public static FRQTypes[] FRQTypess() { return new FRQTypes[]{ new FRQTypes(&quot;Lightboard&quot;, 2019, 4, &quot;Creating a lightboard with methods and classes.&quot;), new FRQTypes(&quot;Steptracker&quot;, 2019, 2, &quot;Creating a fitness tracking system, writing a class with methods.&quot;) }; } /* main to test FRQTypes class * */ public static void main(String[] args) { // Inheritance Hierarchy FRQTypes[] objs = FRQTypess(); // print with title FRQTypes.setOrder(KeyType.title); FRQTypes.print(objs); // print name only FRQTypes.setOrder(KeyType.name); FRQTypes.print(objs); } } FRQTypes.main(null); . class [LREPL.$JShell$12C$FRQTypes; 2 Generic: FRQTypes listed by title FRQTypes: Lightboard, 2019, 4, Creating a lightboard with methods and classes. FRQTypes: Steptracker, 2019, 2, Creating a fitness tracking system, writing a class with methods. class [LREPL.$JShell$12C$FRQTypes; 2 Generic: FRQTypes listed by name Lightboard Steptracker . public class User extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { User.key = key; } public enum KeyType implements KeyTypes {title, uid, password, name, dob} // Instance data private final String uid; // user / person id private final String password; private final String name; private final int dob; /* constructor * */ public User(String uid, String password, String name, int dob) { super.setType(&quot;User&quot;); this.uid = uid; this.password = password; this.name = name; this.dob = dob; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return User.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.uid.equals(this.getKey())) { output += this.uid; } else if (KeyType.password.equals(this.getKey())) { output += this.password; } else if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.dob.equals(this.getKey())) { output += this.dob; } else { output += super.getType() + &quot;: &quot; + this.uid + &quot;, &quot; + this.password + &quot;, &quot; + this.name + &quot;, &quot; + this.dob; } return output; } // Test data initializer public static User[] Users() { return new User[]{ new User(&quot;100&quot;, &quot;Password1234&quot;, &quot;Krish&quot;, 101906), new User(&quot;120&quot;, &quot;lol1234&quot;, &quot;Daniel&quot;, 031505) }; } /* main to test User class * */ public static void main(String[] args) { // Inheritance Hierarchy User[] objs = Users(); // print with title User.setOrder(KeyType.title); User.print(objs); // print name only User.setOrder(KeyType.name); User.print(objs); } } User.main(null); . class [LREPL.$JShell$19B$User; 2 Generic: User listed by title User: 100, Password1234, Krish, 101906 User: 120, lol1234, Daniel, 13125 class [LREPL.$JShell$19B$User; 2 Generic: User listed by name Krish Daniel . public class Statistics extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Statistics.key = key; } public enum KeyType implements KeyTypes {title, year, overallScore, breakdown} // Instance data private final int year; private final int overallScore; private final String breakdown; /* constructor * */ public Statistics(int year, int overallScore, String breakdown) { super.setType(&quot;FRQTypes&quot;); this.year = year; this.overallScore = overallScore; this.breakdown = breakdown; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return FRQTypes.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.year.equals(this.getKey())) { output += this.year; } else if (KeyType.overallScore.equals(this.getKey())) { output += this.overallScore; } else if (KeyType.breakdown.equals(this.getKey())) { output += this.breakdown; } else { output += super.getType() + &quot;: &quot; + this.year + &quot;, &quot; + this.overallScore + &quot;, &quot; + this.breakdown; } return output; } // Test data initializer public static Statistics[] Statistics() { return new Statistics[]{ new Statistics(2021, 14, &quot;for each&quot;), // new Statistics() }; } /* main to test FRQTypes class * */ public static void main(String[] args) { // Inheritance Hierarchy Statistics[] objs = Statistics(); // print with title Statistics.setOrder(KeyType.title); Statistics.print(objs); // print name only Statistics.setOrder(KeyType.year); Statistics.print(objs); } } Statistics.main(null); . public class Stats extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Stats.key = key; } public enum KeyType implements KeyTypes {title, year, score, problem1, problem2, problem3, problem4} // Instance data private final int year; private final int score; private final int problem1; private final int problem2; private final int problem3; private final int problem4; /* constructor * */ public Stats(int year, int score, int problem1, int problem2, int problem3, int problem4) { super.setType(&quot;FRQ&quot;); this.year = year; this.score = score; this.problem1 = problem1; this.problem2 = problem2; this.problem3 = problem3; this.problem4 = problem4; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Stats.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.year.equals(this.getKey())) { output += this.year; } else if (KeyType.score.equals(this.getKey())) { output += this.score; } else if (KeyType.problem1.equals(this.getKey())) { output += this.problem1; } else if (KeyType.problem2.equals(this.getKey())) { output += this.problem2; } else if (KeyType.problem3.equals(this.getKey())) { output += this.problem3; } else if (KeyType.problem4.equals(this.getKey())) { output += this.problem4; } else { output += super.getType() + &quot;: &quot; + this.year + &quot;, Overall Score: &quot; + this.score + &quot;, n t tProblem 1 Points: &quot; + this.problem1 + &quot;, n t tProblem 2 Points: &quot; + this.problem2 + &quot;, n t tProblem 3 Points: &quot; + this.problem3 + &quot;, n t tProblem 4 Points: &quot; + this.problem4; } return output; } // Test data initializer public static Stats[] Stats() { return new Stats[]{ new Stats(2010, 23, 3, 3, 9, 8), new Stats(2017, 33, 7, 9, 8, 9), new Stats(2021, 20, 5, 9, 4, 2), new Stats(2015, 26, 7, 8, 6, 5), }; } /* main to test Stats class * */ public static void main(String[] args) { // Inheritance Hierarchy Stats[] objs = Stats(); // print with title Stats.setOrder(KeyType.title); Stats.print(objs); } } Stats.main(null); . class [LREPL.$JShell$40S$Stats; 4 Generic: FRQ listed by title FRQ: 2010, Overall Score: 23, Problem 1 Points: 3, Problem 2 Points: 3, Problem 3 Points: 9, Problem 4 Points: 8 FRQ: 2017, Overall Score: 33, Problem 1 Points: 7, Problem 2 Points: 9, Problem 3 Points: 8, Problem 4 Points: 9 FRQ: 2021, Overall Score: 20, Problem 1 Points: 5, Problem 2 Points: 9, Problem 3 Points: 4, Problem 4 Points: 2 FRQ: 2015, Overall Score: 26, Problem 1 Points: 7, Problem 2 Points: 8, Problem 3 Points: 6, Problem 4 Points: 5 .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2023/03/19/Checkpoint1.html",
            "relUrl": "/college%20board/java/2023/03/19/Checkpoint1.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Generics Types and Collections",
            "content": "Details of a Class . Access Modifier . Constructor . Modifiers/Setters . Getters . Example Code with Linked List, Queues, and Stacks .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2023/03/17/GenericTypes&Collections.html",
            "relUrl": "/college%20board/java/2023/03/17/GenericTypes&Collections.html",
            "date": " • Mar 17, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "2015 Practice MCQ",
            "content": "Final Score: 35/39 . Time: 1 Hour, 57 Minutes . Test Corrections . Problem 18 . My Answer: 405 . Reason why Incorrect: . I forgot to understand that when you divide two integers, the result will be casted as an int (integer division). Ignoring this, my thought process went as follows: 404/10 = 40.4 -- 40.4 * 10 = 404 -- 404 + 1 = 405. . Correct Answer: 401 . Reason: . Since both 404 and 10 are integers, integer division is used resulting in 40. The value 40 is then multiplied by 10, resulting in 400, and finally 1 is added, meaning 401 is printed. . Problem 22 . My Answer: B . Reason why Incorrect: . I was under the impression that in the condition of the inner for loop (int n : row), n was assigned each index of the row (0,1,2). However, I now understand n is assigned the actual value of each index in the row (1,2,3). In my original thinking, printing row[n] would have correctly printed the desired result. However, in actuality, by printing row[n], it would skip over row[0], and attempt to print row[3], which does not exist. . Correct Answer: A . Reason: . The outer for loop iterates over every row of numbers and assigns each row to the array row. The inner loop iterates over the array row accessing each element and assigning it to n. Then n is printed to the screen. In the first iteration of the outer loop, row is equal to {1, 2, 3}, and the inner loop will assign each successive value in row to n and print it to the screen, meaning 123 will be printed. For the second iteration of the outer loop, row is equal to {4, 5, 6}, and the inner loop will assign each successive value in row to n and print it to the screen, meaning 456 will be printed after 123, giving us the output 123456. . Problem 25 . My Answer: 16 . Reason why Incorrect: . I skimmed over the fact that the inner loop begins at y = x, rather than y = 0. For this reason, every next time the outer loop is run, the inner loop runs one less time. I assumed the inner loop would consistently run 4 times per each of the 4 times the outer loop was ran. This would result in a count value of 16. . Correct Answer: 10 . Reason: . The outer loop iterates four times (for x = 0, 1, 2, 3). When x is assigned 4, the loop terminates. The inner loop will iterate from the value of x to 4, not including 4. In the first iteration of the outer loop, the inner loop iterates four times (for y = 0, 1, 2, 3) and count will increase by 1 each time and will equal to 4. In the second iteration of the outer loop, the inner loop iterates three times (for y = 1, 2, 3) and count will now be 7. In the third iteration of the outer loop, the inner loop iterates two times (for y = 2, 3) and count will now be 9. In the fourth and final iteration of the outer loop, the inner loop will iterate one time (for y = 3) and count will be 10. . Problem 30 . . My Answer: II Only . Reason why Incorrect: . I failed to notice the fact that option III contained &quot;else if&quot; statements, rather than just three &quot;if&quot; statements. whoopsies! Because of the term &quot;else&quot;, the 2nd and 3rd if statements will only run if the previous are not true. Since numBoxes will always be greater than 0, the only first if statement will run, which is not what we want. If there were just three &quot;if&quot; statements (no &quot;else&quot;), then totalCost would be changed up until the numBoxes conditions was no longer met. . Correct Answer: II and III . Reason: . Choice I will compute the incorrect price for numBoxes being greater than or equal to 5. For example, if numBoxes is 10, the first boolean expression will evaluate to true and totalCost will be assigned the correct price of 15. However, the second boolean expression will also evaluate to true, changing the value of totalCost to 30. The third boolean expression will also evaluate to true, changing the value of totalCost to 50. Choice II will return the correct cost based on numBoxes. Similar to choice I, it will first see if the first boolean condition is true. If it is, it will compute the totalCost and skip the next if statement since it is nested in the else. Choice III will compute the incorrect price for numBoxes greater than or equal to 5 and will compute totalCost as numBoxes * 5.00 in all cases. This is because if numBoxes is greater than or equal to 5, it is also greater than 0 and the first if statement will evaluate to true and skip over the else statements. . Reflection . Skills I missed: . 1B: Determine code that would be used to complete code segments. | 2A: Apply the meaning of specific operators. | 2D: Determine the number of times a code segment will execute. | . I would say I need to work on questions where I need to pick possible lines of code that would need to be inserted in order to get the overall code to function properly. Furthermore, I would like to work on the time it takes me to figure out the final result of loops. Sometimes I try to do everything in my head, and I lose track of the changing value of different variables. Using a paper and pencil has really helped me with these problems. I should all improve on understanding different notations, as well as operators. Many times, I will overlook a line of code that is crucial to finding the correct answer. I believe the more I look at and write code involving different features of java, the better and quicker I will be able to analyze new code. .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2023/03/11/2015PracticeMCQ.html",
            "relUrl": "/college%20board/java/2023/03/11/2015PracticeMCQ.html",
            "date": " • Mar 11, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Half Term Code Examples",
            "content": "Small Code Exercises for Primitive Type &amp; Wrapper Classes . int . import java.util.Random; public class Example { public static void main(String[] args) { int a = (int)(Math.random() * 100); System.out.println(a); } } Example.main(null); . 81 . import java.util.Random; import java.util.ArrayList; public class Example { public static void main(String[] args) { int a = (int)(Math.random() * 100); int b = (int)(Math.random() * 100); int c = (int)(Math.random() * 100); System.out.println(&quot;int values: &quot; + a + &quot; &quot; + b + &quot; &quot; + c); Integer d = Integer.valueOf(a); Integer e = Integer.valueOf(b); Integer f = Integer.valueOf(c); ArrayList&lt;Integer&gt; myNumbers = new ArrayList&lt;Integer&gt;(); myNumbers.add(d); myNumbers.add(e); myNumbers.add(f); for (int i : myNumbers) { System.out.println(i); } System.out.println(myNumbers); } } Example.main(null); . int values: 60 94 17 60 94 17 [60, 94, 17] . double . import java.util.Random; public class Example { double a = 0.0; public static void main(String[] args) { double a = Math.random() * 100; System.out.println(a); String b = String.valueOf(a); String z = &quot;.&quot;; System.out.println(b); for (int i = 0; i &lt; 6; i++) { if (!b.substring(i,i+1).equals(z)) { System.out.println(b.substring(i,i+1)); } } } } Example.main(null); . 10.494770419381272 10.494770419381272 1 0 4 9 4 . import java.util.Random; public class Example { double a = 0.0; public static void main(String[] args) { double a = Math.random() * 100; double b = Math.random() * 100; double c = Math.random() * 100; Double d = Double.valueOf(a); Double e = Double.valueOf(b); Double f = Double.valueOf(c); List&lt;Double&gt; myDoubles = new ArrayList&lt;Double&gt;(); myDoubles.add(d); myDoubles.add(e); myDoubles.add(f); for (double i : myDoubles) { System.out.println(i); } System.out.println(myDoubles); } } Example.main(null); . 93.25888094467174 75.90992286217258 16.308528851602844 [93.25888094467174, 75.90992286217258, 16.308528851602844] . boolean . public class Example { public static void main(String[] args) { boolean x = true; boolean y = false; if (x &amp;&amp; y) { System.out.println(&quot;both true&quot;); } else if (x || y) { System.out.println(&quot;one true&quot;); } else { System.out.println(&quot;none true&quot;); } } } Example.main(null); . one true . public class Example { public static void main(String[] args) { boolean x = true; boolean y = false; if (x &amp;&amp; y) { System.out.println(&quot;both true&quot;); } else if (x || y) { System.out.println(&quot;one true&quot;); } else { System.out.println(&quot;none true&quot;); } Boolean a = Boolean.valueOf(x); Boolean b = Boolean.valueOf(y); List&lt;Boolean&gt; myBooleans = new ArrayList&lt;Boolean&gt;(); myBooleans.add(a); myBooleans.add(b); System.out.println(myBooleans); } } Example.main(null); . one true [true, false] . char . public class Example { public static void main(String[] args) { char[] charArray = new char[5]; charArray[0] = &#39;A&#39;; charArray[1] = &#39;B&#39;; charArray[2] = &#39;C&#39;; charArray[3] = &#39;D&#39;; charArray[4] = &#39;E&#39;; for (int i = 0; i &lt; 5; i++) { System.out.println(&quot;Element at index &quot; + i + &quot;: &quot; + charArray[i]); } } } Example.main(null); . Element at index 0: A Element at index 1: B Element at index 2: C Element at index 3: D Element at index 4: E . public class Example { public static void main(String[] args) { char[] charArray = new char[5]; charArray[0] = &#39;A&#39;; charArray[1] = &#39;B&#39;; charArray[2] = &#39;C&#39;; charArray[3] = &#39;D&#39;; charArray[4] = &#39;E&#39;; for (int i = 0; i &lt; 5; i++) { System.out.println(&quot;Element at index &quot; + i + &quot;: &quot; + charArray[i]); } Character f = Character.valueOf(charArray[0]); Character g = Character.valueOf(charArray[1]); Character h = Character.valueOf(charArray[2]); Character i = Character.valueOf(charArray[3]); Character j = Character.valueOf(charArray[4]); List&lt;Character&gt; myCharacters = new ArrayList&lt;Character&gt;(); myCharacters.add(f); myCharacters.add(g); myCharacters.add(h); myCharacters.add(i); myCharacters.add(j); System.out.println(myCharacters); } } Example.main(null); . Element at index 0: A Element at index 1: B Element at index 2: C Element at index 3: D Element at index 4: E [A, B, C, D, E] .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2023/03/09/HalfTermCodeExercises.html",
            "relUrl": "/college%20board/java/2023/03/09/HalfTermCodeExercises.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Binary Calculator",
            "content": "import java.util.Scanner; public class Binary { public static String binaryAddition(String binary1, String binary2){ return Integer.toBinaryString(Integer.parseInt(binary1, 2) + Integer.parseInt(binary2, 2)); } public static void main(String[] args){ System.out.print(&quot;First Binary Value: &quot;); Scanner binary10 = new Scanner(System.in); String binary1 = binary10.nextLine(); System.out.println(binary1); System.out.print(&quot;Second Binary Value: &quot;); Scanner binary20 = new Scanner(System.in); String binary2 = binary20.nextLine(); System.out.println(binary2); System.out.print(binary1 + &quot; + &quot; + binary2 + &quot; = &quot;); System.out.println(binaryAddition(binary1, binary2)); } } Binary.main(null); . First Binary Value: 1 Second Binary Value: 1 1 + 1 = 10 . import java.util.Scanner; public class Binary { public static String binaryAddition(String binary1, String binary2){ return Integer.toBinaryString(Integer.parseInt(binary1, 2) + Integer.parseInt(binary2, 2)); } public static void main(String[] args){ System.out.print(&quot;First Value: &quot;); Scanner binary10 = new Scanner(System.in); String binary1 = binary10.nextLine(); int binary11 = Integer.parseInt(binary1); //convert input string to int String binary111 = Integer.toBinaryString(binary11); //convert int to binary string System.out.println(binary1 + &quot;, Binary Value: &quot; + binary111); System.out.print(&quot;Second Value: &quot;); Scanner binary20 = new Scanner(System.in); String binary2 = binary20.nextLine(); int binary22 = Integer.parseInt(binary2); String binary222 = Integer.toBinaryString(binary22); System.out.println(binary2 + &quot;, Binary Value: &quot; + binary222); System.out.print(binary1 + &quot; + &quot; + binary2 + &quot; = &quot;); System.out.println(binary11 + binary22); System.out.print(binary111 + &quot; + &quot; + binary222 + &quot; = &quot;); System.out.println(binaryAddition(binary111, binary222)); } } Binary.main(null); . First Value: 6, Binary Value: 110 Second Value: 2, Binary Value: 10 6 + 2 = 8 110 + 10 = 1000 .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2023/03/06/BinaryCalc.html",
            "relUrl": "/college%20board/java/2023/03/06/BinaryCalc.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "College Board MC - Timed 52 Questions",
            "content": "Final Score: 42/52 . Time: 3 hours 48 minutes . Test Corrections . Question 1 . My Answer: 9 . Reason why incorrect: . This would be the result if anArray was instantiated using new int[10][9] instead of new int[10][8]. . Correct Answer: 8 . Explanation: . In the first iteration of the outer loop, j has the value 0. The first 8 iterations of the inner loop access anArray[0][0] through anArray[0][7]. When an attempt is made to access anArray[0][8], an ArrayIndexOutOfBoundsException is thrown since anArray has 8 columns, numbered 0 through 7, inclusive. . Question 2 . My Answer: 2 . Reason why incorrect: . This would be the result if the element immediately above mat[2][2] and the element immediately to its left had not been updated in an earlier iteration of the loop, so each still contained the value 1. . Correct Answer: 6 . Explanation: . Every element of mat is modified, except those in the first row and the first column, which retain their initial values. Elements are traversed in row-major order. Each element of mat is replaced by the sum of the element immediately above it and the element to its left. In row 1, mat[1][1] is assigned the value mat[0][1] + mat[1][0] = 1 + 1 = 2, then mat[1][2] is assigned the value 1 + 2 = 3, and finally mat[1][3] is assigned the value 1 + 3 = 4. In row 2, mat[2][1] is assigned 2 + 1 = 3, and then mat[2][2] is assigned 3 + 3 = 6. . Question 7 . My Answer: 00101 . Reason why incorrect: . This would be the result for the method call combine(&quot;10111&quot;, &quot;01101&quot;), for example. . Correct Answer: 00100 . Explanation: . The combine method compares corresponding substrings of length 1 from input strings one and two. If the substrings are the same, the substring is appended to res; otherwise, &quot;0&quot; is appended to res. The first and second characters of res are &quot;0&quot; because the characters in position 0 and the characters in position 1 of one and two differ. The third character of res is &quot;1&quot; because the characters in position 2 of one and two are both &quot;1&quot;. The fourth character in res is &quot;0&quot; because the characters in position 3 of one and two differ. The fifth character in res is &quot;0&quot; because the last characters of one and two are both &quot;0&quot;. The value &quot;00100&quot; is returned. . Question 10 . My Answer: 008 . Reason why incorrect: . This result would occur if the second line of code was replaced with str = str + 0 + 8;. . Correct Answer: 0008 . Explanation: . The first line of code initializes the string str to &quot;0&quot;. In the second line of code, the int values 0 and 8 are interpreted as strings. The second line of code concatenates str, &quot;0&quot;, and &quot;8&quot; and then appends the result to str, setting str to &quot;0008&quot;. . Question 18 . My Answer: . Reason why incorrect: . Since an enhanced for loop rather than a standard for loop is used, the value of num is an element in mat and not necessarily a valid column value of mat. . Correct Answer: . Explanation: . The algorithm uses nested enhanced for loops to iterate across all the elements in mat. The variable num is assigned the value of each element. If the positive difference between num and val is less than minDiff, num is the element of mat that is closest to val so far. . Question 23 . My Answer: . Reason why incorrect: . List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. We want to avoid adding a comma at the end of the list of words not after the first element, so the boolean condition should be k != sizeOfList – 1. . Correct Answer: . Explanation: . List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. To determine the size of an ArrayList we need to call the method size(). Each word will be separated by a comma, but no comma should appear after the last element in the list. Therefore, a comma is added as long as k does not equal the last index, sizeOfList – 1, since list indices start at 0. . Question 33 . My Answer: . Reason why incorrect: . The statement numbers[0].length returns the number of columns in numbers and numbers.length returns the number of rows. In this case, the outer loop will loop r from 0 to 3, not including 3. However, r is then used as the row index in printing numbers[r][c] and there are only two rows in numbers. An ArraylndexOutOfBoundsExeception will be thrown when the code attempts to access a third row that does not exist. . Correct Answer: . Explanation: . The outer for loop iterates over every row of numbers and assigns each row to the array row. The inner loop iterates over the array row accessing each element and assigning it to n. Then n is printed to the screen. In the first iteration of the outer loop, row is equal to {1, 2, 3}, and the inner loop will assign each successive value in row to n and print it to the screen, meaning 123 will be printed. For the second iteration of the outer loop, row is equal to {4, 5, 6}, and the inner loop will assign each successive value in row to n and print it to the screen, meaning 456 will be printed after 123, giving us the output 123456. . Question 42 . My Answer: [4, 2, 5, 3] . Reason why incorrect: . This would be the predicted result if List values initially contained [0, 4, 2, 5, 0, 3, 0]&lt;/p&gt; Correct Answer: [0, 4, 2, 5, 3] . Explanation: . nums.remove(k) is run when the value is 0. In turn, this decreases the index value of each number in the list. Because k constantly increase by one each time, whenever a 0 is removed, the following digit is not checked. This only becomes an issue when there are two consecutive zeroes in the list, which there are. . Question 43 . My Answer: &quot;pilercom&quot; . Reason why incorrect: . This would be the result if the first call to substring was word.substring(howFar, word.length()). . Correct Answer: &quot;ilercom&quot; . Explanation: . The two parameter substring method returns the substring beginning at the first parameter and ending at the second parameter – 1. When word is assigned “compiler” and howFar is assigned 3, the value of word.substring(howFar + 1, word.length()) is “iler”. This is the substring of “compiler” beginning at 3 + 1 or 4 and ending at 8 – 1 or 7. The value of word.substring(0, howFar) is “com”. This is the substring of “compiler” beginning at 0 and ending at 2. The method returns “ilercom”. . Question 52 . My Answer: . Reason why incorrect: . This image would require the second set of nested loops to initialize row to val – 1, increment both row and col in each iteration inner loop (instead of row being decremented) and changing the condition on the inner loop to col &lt; 5 &amp;&amp; row &lt; 5. . Correct Answer: . Explanation: . The first set of nested for loops sets each element in board to “O”. The next for loop starts val at 0 and increments by 1 until val is 4, when val is 5 the loop terminates. When val is even, board is not updated, so nothing happens when val is 0. When val is 1, row is assigned 1 and col is assigned 0. The boolean condition in the while loop is true, so board[1][0] is assigned “X”. Then col is incremented to 1 and row is decremented to 0 and board[0][1] is assigned “X”. Then col is incremented to 2 and row is decremented to -1 and the while loop terminates. When val is 2, nothing changes about board. When val is 3, row is assigned 3 and col is assigned 0. The boolean condition in the while loop is true, so board[3][0] is assigned “X”. Then col is incremented to 1 and row is decremented to 2 and board[2][1] is assigned “X”. Then col is incremented to 2 and row is decremented to 1 and board[1][2] is assigned “X”. Then col is incremented to 3 and row is decremented to 0 and board[0][3] is assigned “X”. Finally, col is incremented to 4 and row is decremented to -1 and the while loop terminates. When val is 4, nothing changes about board. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Reflection . Skills I missed: . 1B: Determine code that would be used to complete code segments. | 2A: Apply the meaning of specific operators. | 2B: Determine the result or output based on statement execution order in a code segment without method calls (other than output). | 2C: Determine the result or output based on the statement execution order in a code segment containing method calls. | 2D: Determine the number of times a code segment will execute. | . Overall, while I did do worse than the last College Board MC (66 Questions), I would say I learned more content while taking this test. For starters, I now understand what a for:each loops is, what it does, and how to use it. These loops come in handy and require little code, which is always more efficient. Something I need to work on is identifying when a variable is representing an actual value, or just the index number. This messed me up and confused me multiple times throughout the quiz, even on some questions I got correct. Lastly, I need to improve my skills when it comes to identifying errors in code. I am not very efficient in this skill, even when the issue is common (such as index decreasing, and code skipping over values). I did take longer than last quiz by about 30 minutes, and I was still over 2 hours more than the planned 1.5 hours, but I feel that my steady pace allowed me to really think about the trickier questions and understand new material. . &lt;/div&gt; .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2023/01/31/CB55Blog.html",
            "relUrl": "/college%20board/java/2023/01/31/CB55Blog.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Title",
            "content": "String oldStr = &quot;ABCDEF&quot;; String newStr = oldStr.substring(1, 3) + oldStr.substring(4); System.out.println(newStr); . BCEF . String oldStr = &quot;ABCDEF&quot;; //String newStr = oldStr.substring(1, 3) + oldStr.substring(4); System.out.println(oldStr.substring(0,1)); System.out.println(oldStr.substring(2,2)); . A . String[][] letters = {{&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;}, {&quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;}, {&quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;}}; System.out.println(letters[0][3]); System.out.println(letters[0].length); . D 4 . String[][] letters = {{&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;}, {&quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;}, {&quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;}}; for (int col = 1; col &lt; letters[0].length; col++) System.out.println(letters[0].length); { for (int row = 1; row &lt; letters.length; row++) { System.out.print(letters[row][col] + &quot; &quot;); } System.out.println(); } . 4 4 4 . | System.out.print(letters[row][col] + &#34; &#34;); cannot find symbol symbol: variable col . public static String combine() { int one = 10110; int two = 01100; String res = &quot;&quot;; for (int k = 0; k &lt; one.length(); k++) { if (one.substring(k, k + 1).equals(two.substring(k, k + 1))) { res += one.substring(k, k + 1); } else { res += &quot;0&quot;; } } return res; } . | for (int k = 0; k &lt; one.length(); k++) int cannot be dereferenced | if (one.substring(k, k + 1).equals(two.substring(k, k + 1))) int cannot be dereferenced | if (one.substring(k, k + 1).equals(two.substring(k, k + 1))) int cannot be dereferenced | res += one.substring(k, k + 1); int cannot be dereferenced | public static String combine() Modifier &#39;static&#39; not permitted in top-level declarations, ignored . String str = &quot;CompSci&quot;; System.out.println(str.substring(0, 3)); int num = str.length(); System.out.println(num); . Com 7 . String str = &quot;0&quot;; str += str + 0 + 8; System.out.println(str); . 0008 . int one = 1; int two = 2; String zee = &quot;Z&quot;; System.out.println(one + two + zee); . 3Z . List&lt;String&gt; students = new ArrayList&lt;String&gt; (); students.add(&quot;Alex&quot;); students.add (&quot;Bob&quot;); students.add (&quot;Carl&quot;); for (int k = 0; k &lt; students.size (); k++) { System.out.print (students.set (k, &quot;Alex&quot;) + &quot; &quot;); } System.out.println (); for (String str: students) { System.out.print(str + &quot; &quot;); } . Alex Bob Carl Alex Alex Alex . public static int countA(String str) { int count = 0; while (str.length() &gt; 0) { int pos = str.indexOf(&quot;A&quot;); if (pos &gt;= 0) { count++; /* missing code */ } else { return count; } } return count; } . String str = &quot;FSSACABAC&quot;; int pos = str.indexOf(&quot;A&quot;); System.out.println(pos); . 3 . ArrayList&lt;wordlist&gt; str = new ArrayList&lt;wordlist&gt;(); ArrayList wordlist = [&quot;apple&quot;, &quot;banana&quot;, &quot;coconut&quot;, &quot;lemon&quot;, &quot;orange&quot;, &quot;pear&quot;] int count = 0; for (String word : wordList) { if (word.indexOf(&quot;a&quot;) &gt;= 0) { count++; } } System.out.println(count); . | ArrayList wordlist = [&#34;apple&#34;, &#34;banana&#34;, &#34;coconut&#34;, &#34;lemon&#34;, &#34;orange&#34;, &#34;pear&#34;] illegal start of expression . int[][] arr = {{6, 2, 5, 7}, {7, 6, 1, 2}}; for (int j = 0; j &lt; arr.length; j++) { for (int k = 0; k &lt; arr[0].length; k++) { if (arr[j][k] &gt; j + k) { System.out.println(&quot;!&quot;); } } } . ! ! ! ! ! ! . int[][] data = new int[5][10]; for (int j = 0; j &lt; data.length; j++) { for (int k = 0; k &lt; data[0].length; k++) { if (j == k) { System.out.println(data[j][k]); } } } . 0 0 0 0 0 . int[][] array2D = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}; for (int[] i : array2D) { for (int x : i) { System.out.print(x + &quot;h &quot;); } System.out.println(&quot; &quot;); } . 1h 2h 3h 4h 5h 6h 7h 8h 9h 10h 11h 12h 13h 14h 15h 16h . String str = &quot;no&quot;; public static boolean mystery(String str) { String temp = &quot; &quot;; for (int k = str.length(); k &gt; 0; k--) { temp = temp + str.substring(k-1,k); } return temp.equals(str); System.out.println(temp.equals(str)); } . | System.out.println(temp.equals(str)); unreachable statement | { | String temp = &#34; &#34;; | | for (int k = str.length(); k &gt; 0; k--) | { | temp = temp + str.substring(k-1,k); | } | | return temp.equals(str); | System.out.println(temp.equals(str)); | } missing return statement | public static boolean mystery(String str) Modifier &#39;static&#39; not permitted in top-level declarations, ignored . String list = &quot;hello&quot;; System.out.println(list.size()); . | System.out.println(list.size()); cannot find symbol symbol: method size() . private List&lt;String&gt; listOfwords; public String wordswithCommas () { String result = &quot; (&quot; ; int sizeOfList = listOfWords.size() - 1 ; for (int k = 0; k &lt; sizeOfList; k++) { result = result + listOfWords.get(k); if (k! = 0) { result = result + &quot;, &quot;; } } result = result + &quot;} &quot;; return result; } . | if (k! = 0) { &#39;)&#39; expected | if (k! = 0) { illegal start of expression | if (k! = 0) { &#39;;&#39; expected . int a = 1988; int b = 1990; String claim = &quot; that the world’s athletes &quot; + &quot;competed in Olympic Games in &quot;; String s = &quot;It is &quot; + true + claim + a + &quot; but &quot; + false + claim + b + &quot;.&quot;; System.out.println(s); . It is true that the world’s athletes competed in Olympic Games in 1988 but false that the world’s athletes competed in Olympic Games in 1990. . String s = &quot;this is &quot; + true; System.out.println(s); . this is true . int[][] points = {{11, 12, 13, 14, 15}, {21, 22, 23, 24, 25}, {31, 32, 33, 34, 35}, {41, 42, 43, 44, 45}}; for (int row = 0; row &lt; points.length; row++) { for (int col = points[0].length - 1; col &gt;= row; col--) { System.out.print(points[row][col] + &quot; &quot;); } System.out.println(); } . 15 14 13 12 11 25 24 23 22 35 34 33 45 44 . public static void rowMajor(int[][] arr) { int[][] theArray = {{1, 2}, {3, 4}, {5, 6}, {7, 8}}; rowMajor(theArray); for (int[] j : arr) { for (int k : j) { System.out.print(k + &quot; &quot;); } } } . | System.out.print(k + &#34; &#34;); cannot find symbol symbol: variable k . int j = 0; ArrayList&lt;&gt; data = new ArrayList&lt;&gt;(); data.add(4); data.add(3); data.add(4); data.add(5); data.add(3); data.add(4); while (j &lt; data.size() - 1) { if (data.get(j) &gt; data.get(j + 1)) { System.out.print(data.get(j + 1) + &quot; &quot;); } j++; } . | ArrayList&lt;&gt; data = new ArrayList&lt;&gt;(); illegal start of type . int [][] numbers = {{7, 8, 9}, {4, 5, 6}}; for (int[] row : numbers) { for (int n : row) { System.out.print(row[n]); } } . java.lang.ArrayIndexOutOfBoundsException: Index 7 out of bounds for length 3 at .(#181:1) . int [][] numbers = {{1, 2, 3}, {4, 5, 6}}; for (int r = 0; r &lt; numbers.length; r++) { for (int c = 0; c &lt; numbers[0].length; c++) { System.out.print(numbers[r][c]); } } . 123456 . String s = &quot;hello&quot;; System.out.println(s.substring(0, 1)); . h . int[][] arr = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {3, 2, 1}}; for (int j = 0; j &lt; arr.length; j++) { for (int k = j; k &lt; arr[0].length; k++) { System.out.print(arr[j][k] + &quot; &quot;); } System.out.println(); } . 1 2 3 5 6 9 . int[][] arr = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}}; int sum = 0; for (int[] x : arr) { for (int y = 0; y &lt; x.length - 1; y++) { sum += x[y]; System.out.println(sum); System.out.println(&quot;--&quot;); } System.out.println(sum); System.out.println(&quot;??&quot;); } System.out.println(sum); . 1 -- 3 -- 6 -- 6 ?? 11 -- 17 -- 24 -- 24 ?? 33 -- 43 -- 54 -- 54 ?? 54 .",
            "url": "https://nicholasramos5.github.io/VSCodings/2023/01/24/CB55.html",
            "relUrl": "/2023/01/24/CB55.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Title",
            "content": "x = [1, 2, 3] y = x y[1] = 4 print(x) . [1, 4, 3] .",
            "url": "https://nicholasramos5.github.io/VSCodings/2023/01/16/python-code.html",
            "relUrl": "/2023/01/16/python-code.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 9 - Inheritance",
            "content": "Notes . Inheritance . A ability to inherit characteristics from super class to sub classes. Reduces risk of error and reduces redundancy. extends key word used to inherit characteristics from a class. You can have multiple instances of inheritance. Constructors in a sub class needs to have at least the same definition as the old class. When you call super() you call the supper class&#39;s constructor which must have all relevant parameters passed into it. @Override needed to state overriding methods of a super class and makes it readable . Creating Reference Using Inheritance Hierarchies . Tree called inheritance hierarchies where lower subclasses inherit upper super classes in the hierarchy . Polymorphism . Allows methods to take on multiple forms for code reusability of methods with different forms/implementations but execute the same way . Super Class . Includes equals() and toString() methods which are the most common methods of the Object class . Vocab . Inheritance &amp; Extends . Inheritance: a way for attributes and methods to be inherited from one class to another . | Extends: allows you to bring those attributes over from one class to another . | . Subclass Constructor, Super Keyword . subclass inherits all the members from the superclass the constructor of the superclass can be invoked from the subclass | . | super keyword: refers to superclass objects used to call superclass methods and to access the superclass constructor | . | . // Super Class public class Animal { private boolean vegetarian; private String eats; private int noOfLegs; public Animal(){} public Animal(boolean veg, String food, int legs){ this.vegetarian = veg; this.eats = food; this.noOfLegs = legs; } public boolean isVegetarian() { return vegetarian; } public void setVegetarian(boolean vegetarian) { this.vegetarian = vegetarian; } public String getEats() { return eats; } public void setEats(String eats) { this.eats = eats; } public int getNoOfLegs() { return noOfLegs; } public void setNoOfLegs(int noOfLegs) { this.noOfLegs = noOfLegs; } } . // SubClass public class Cat extends Animal{ private String color; public Cat(boolean veg, String food, int legs) { super(veg, food, legs); this.color=&quot;White&quot;; } public Cat(boolean veg, String food, int legs, String color){ super(veg, food, legs); this.color=color; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } } . Overloading a method . same name, different parameters . | a feature in java, which allows a class to have more than one method with the same name . | ideal when you want to have two methods that essentially do the same thing . | . class CalculateSquare { public void square() { System.out.println(&quot;No Parameter Method Called&quot;); } public int square( int number ) { int square = number * number; System.out.println(&quot;Method with Integer Argument Called:&quot;+square); } public float square( float number ) { float square = number * number; System.out.println(&quot;Method with float Argument Called:&quot;+square); } public static void main(String[] args) { CalculateSquare obj = new CalculateSquare(); obj.square(); obj.square(5); obj.square(2.5); } } . Overriding a method . same signature of a method . | occurs when a subclass has the same method as the parent class . | subclass provides a particular implementation of a method declared by one of its parent classes . | . // A Simple Java program to demonstrate // Overriding and Access-Modifiers class Parent { // private methods are not overridden private void m1() { System.out.println(&quot;From parent m1()&quot;); } protected void m2() { System.out.println(&quot;From parent m2()&quot;); } } class Child extends Parent { // new m1() method // unique to Child class private void m1() { System.out.println(&quot;From child m1()&quot;); } // overriding method // with more accessibility @Override public void m2() { System.out.println(&quot;From child m2()&quot;); } } // Driver class class Main { public static void main(String[] args) { Parent obj1 = new Parent(); obj1.m2(); Parent obj2 = new Child(); obj2.m2(); } } . Abstract Class &amp; Abstract Method . abstract class: cannot be instantiated, but can be subclassed | abstract method: a method that has just the method definition, but does not contain implementation | . abstract class Animal { public abstract void animalSound(); public void sleep() { System.out.println(&quot;Zzz&quot;); } } . Polymorphism . any of overloading, overriding, late binding . | the ability of a class to provide different implementations of a method . | allows the ability to perform one thing in a variety of formats . | . class Animal { public void animalSound() { System.out.println(&quot;The animal makes a sound&quot;); } } class Pig extends Animal { public void animalSound() { System.out.println(&quot;The pig says: wee wee&quot;); } } class Dog extends Animal { public void animalSound() { System.out.println(&quot;The dog says: bow wow&quot;); } } . Homework . Part I . class WorldCupTeam { private String country; private String jerseyColor; private int worldCupsWon; private String mostKnownPlayer; public WorldCupTeam() { this.country = &quot;Unknown&quot;; this.jerseyColor = &quot;None&quot;; this.worldCupsWon = 0; this.mostKnownPlayer = &quot;None&quot;; } public WorldCupTeam(String country, String jerseyColor, int worldCupsWon, String mostKnownPlayer) { this.country = country; this.jerseyColor = jerseyColor; this.worldCupsWon = worldCupsWon; this.mostKnownPlayer = mostKnownPlayer; } public String getCountry() { return country; } public String getJerseyColor() { return jerseyColor; } public int getWorldCupsWon() { return worldCupsWon; } public String getMostKnownPlayer() { return mostKnownPlayer; } public String toString() { return country + &quot;: &quot; + &quot;Jersey Color = &quot; + jerseyColor + &quot;, World Cups Won = &quot; + worldCupsWon + &quot;, Most Known Player = &quot; + mostKnownPlayer; } } class Argentina extends WorldCupTeam { private int watchPartiesInBuenosAires; public Argentina(int worldCupsWon, String mostKnownPlayer, int watchPartiesInBuenosAires) { super(&quot;Argentina&quot;, &quot;Blue &amp; White&quot;, worldCupsWon, mostKnownPlayer); this.watchPartiesInBuenosAires = watchPartiesInBuenosAires; } public String toString() { String parentString = super.toString(); return parentString + &quot;, Watch Parties in Buenos Aires = &quot; + watchPartiesInBuenosAires; } } class Brazil extends WorldCupTeam { public Brazil() { super(&quot;Brazil&quot;, &quot;Yellow &amp; Gold&quot;, 5, &quot;Neymar&quot;); } } class England extends WorldCupTeam { public England() { super(&quot;England&quot;, &quot;Blue Void&quot;, 1, &quot;Phil Foden&quot;); } } class France extends WorldCupTeam { public France() { super(&quot;France&quot;, &quot;Blue&quot;, 2, &quot;Kylian Mbappe&quot;); } } class Portugal extends WorldCupTeam { public Portugal() { super(&quot;Portugal&quot;, &quot;Red &amp; Green&quot;, 0, &quot;Cristiano Ronaldo&quot;); } } class Main { public static void main(String[] args) { WorldCupTeam generalTeam = new WorldCupTeam(); System.out.println(generalTeam); Argentina argentina = new Argentina(3, &quot;Lionel Messi&quot;, 43); System.out.println(argentina); Brazil brazil = new Brazil(); System.out.println(brazil); England england = new England(); System.out.println(england); France france = new France(); System.out.println(france); Portugal portugal = new Portugal(); System.out.println(portugal); } } Main.main(null) . Unknown: Jersey Color = None, World Cups Won = 0, Most Known Player = None Argentina: Jersey Color = Blue &amp; White, World Cups Won = 3, Most Known Player = Lionel Messi, Watch Parties in Buenos Aires = 43 Brazil: Jersey Color = Yellow &amp; Gold, World Cups Won = 5, Most Known Player = Neymar England: Jersey Color = Blue Void, World Cups Won = 1, Most Known Player = Phil Foden France: Jersey Color = Blue, World Cups Won = 2, Most Known Player = Kylian Mbappe Portugal: Jersey Color = Red &amp; Green, World Cups Won = 0, Most Known Player = Cristiano Ronaldo . Part II . import java.util.Date; import java.text.SimpleDateFormat; import java.time.LocalDate; import java.time.Period; import java.time.ZoneId; public class Person { public String name; public String birthday; public Person (String name, String birthday){ this.name = name; this.birthday = birthday; } public String getName(){ return name; } public int getAge(){ if (this.birthday != null) { // LocalDate birthDay = this.birthday.toInstant().atZone(ZoneId.systemDefault()).toLocalDate(); // return Period.between(birthDay, LocalDate.now()).getYears(); // too lazy to use a name thing } return -1; } } public class Student extends Person { private int grade; private double gpa; public Student (String name, String birthday, int grade, double gpa) { super(name, birthday); this.grade = grade; this.gpa = gpa; } public String getName() { return name; } public String getBirthday() { return birthday; } public int getGrade(){ return grade; } @Override public String toString(){ return name + &quot;: Birthday: &quot; + birthday + &quot;, Grade: &quot; + grade + &quot;, GPA: &quot; + gpa; } } public class Teacher extends Person { private String subject; public Teacher (String name, String birthday, String subject){ super(name, birthday); this.subject = subject; } @Override public String toString(){ return name + &quot;: Birthday: &quot; + birthday + &quot;, Subject: &quot; + subject; } } class Bob extends Student { public Bob() { super(&quot;Bob&quot;, &quot;January 1&quot;, 12, 4.0); } } class Ben extends Student { public Ben() { super(&quot;Ben&quot;, &quot;March 17th, 2006&quot;, 11, 4.0); } } class MrMort extends Teacher { public MrMort() { super(&quot;John Mortensen&quot;, &quot;January 1st, 1900&quot;, &quot;Computer Science&quot;); } } public class Main{ public static void main(String[] args){ Bob bob = new Bob(); System.out.println(bob); Ben ben = new Ben(); System.out.println(ben); MrMort mort = new MrMort(); System.out.println(mort); } } Main.main(null); . Bob: Birthday: January 1, Grade: 12, GPA: 4.0 Ben: Birthday: March 17th, 2006, Grade: 11, GPA: 4.0 John Mortensen: Birthday: January 1st, 1900, Subject: Computer Science .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/12/13/Unit9-Inheritance.html",
            "relUrl": "/college%20board/java/2022/12/13/Unit9-Inheritance.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 10 - Recursion",
            "content": "Intro to Recursion . A recursive method is method that calls itself. | It contains at least one base case that halts recursion and once recursive call | Each recursive call has own local variables | Parameter values take progress of recursive process | A recursion can be replaced with an iterative and give the same result | Recursion can traverse String, array, and ArrayList objects | . public static void example(int n) { if (n &gt; 0) example (n-1); } . public static void simplerRecur(int n) { System.out.println(n); if (n &gt; 2) simplerRecur(n-1); System.out.println(n); } simplerRecur(4); . 4 3 2 2 3 4 . public static int simpleRecur2(int n) { if (n == 0) return 0; return n + simpleRecur2(n/2); } simpleRecur2(8); . 15 . public int dblRecur(int n) { if (n &gt; 0) return n + dblRecur(n/2) + dblRecur(n/3); return 0; } dblRecur(5); . 9 . prints out ; computer, mputer, uter, er, then the first letter of each . public static void mystery (String s) { if (s.length() &gt; 1) { mystery(s.substring(2)); System.out.print(s.substring(0,1)); } } mystery(&quot;computer&quot;); . eumc . Binary Search with Equations . public class recursion{ public static int recursionBinarySearch(int[] array, int first, int last, int target){ int midpoint; //if the first number is greater than the last, the target number is not in the list if (first &gt; last){ System.out.println(-1); return -1; } else{ midpoint = (first+last)/2; //take the upper bound if number is greater than midpoint if (array[midpoint] &lt; target){ return recursionBinarySearch(array, midpoint+1, last, target); } // take the lower bound if the number is lesser than midpoint if (array[midpoint] &gt; target){ return recursionBinarySearch(array, first,midpoint-1, target); } System.out.println(&quot;index of target: &quot; + midpoint); return midpoint; } } public static void main(String[] args){ // test array in main int[] test_array = new int[]{ 0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40 }; recursion.recursionBinarySearch(test_array, 0, test_array.length, 24); } } recursion.main(null); . index of target: 12 . Merge Sort . used to sort arrayLists | Uses a divide and conquer algorithm to sort ArrayList Divides the array into halves first, and then calls itself for the two different halves in order to sort them | merges the two sorted halves into one list | . | merging values into one sorted array . copy the original elements into a temporary array | work from left to right in each virtual array to compare element and return them to the correct order in the original array | . | think about: mergeSort (myList) { mergeSort(left); mergeSort(right); mergeSort (left &amp; right) } . | . Recursion Tree . Recursion trees are a method for visualizing each recursive case (everytime the method is called) until the base case is reached. . Recursive blocks call themselves. In order for them to finish, there must be some special case in which they don&#39;t call themselves. That is the base case, a simpler version of the block&#39;s script that doesn&#39;t call the block itself. . There is usually a conditional with two cases: a base case for the lowest level that stops the recursion from going on forever and a recursive case that calls the block itself at lower levels until it reaches the base case. . Note: If a block keeps recursively calling itself forever, the program is stuck in an infinite loop meaning that there isn&#39;t a base case or it is not accessible. . public class example{ static int foo(int n) { if (n &lt; 0){ return 1; } else{ return foo(n-2) + foo(n-1); } } public static void main(String args[]){ System.out.println(foo(3)); } } example.main(null); . 8 . Vocab . Introduction to Recursion . a method that calls itself . | contains at least one base case that halts recursion and once recursive call . | each recursive call has own local variables . | parameter values take progress of recursive process . | a recursion can be replaced with an iterative and give the same result . | recursion can traverse string, array and arraylist objects . | . Big O notation . for Hash map, Binary Search, Single loop, Nested Loop . | describes the set of algorithms that run worse, better, or at a certain given speed . | represents the number of operations performed . | . Merge Sort . can be used to sort arraylists . | Uses a divide and conquer algorithm . | divides the array into halves and then calls itself for the two different halves in order to sort them . | merges the two sorted halves into one list . | Merging Values into One Sorted Array . | copy the original elements into a temporary array . | work from left to right in each virtual array to . | compare element and return them to the correct order in the original array . | .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/12/13/Unit10-recursion.html",
            "relUrl": "/college%20board/java/2022/12/13/Unit10-recursion.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "CompSci Technical Business Panel",
            "content": "Notes . Kathyleen Beveridge: . Her career &amp; Journey Wells Fargo, Nikko Securities, 1995 - 1996, investment advisor Stock broker | Went back to school and switched careers | . | First high tech job at HP Loved to surf there | . | Qualcomm - Senior Manager Sales Operations and Director of Global Sales | ThermoFischer - senior director of marketing Biotech | . | . | Education MBA, University of South California | BS Finance, Santa Clara University | Studied abroad in Spain | Quote she lives by: Maya angelou: “my mission in life is not merely to survive, but to thrive; and to do so with passion, some compassion, some humor, and style” | . | . | Words to live by: | SURFING DOESN’T PAY THE BILLS | Investment banking is only one to one impact | Grateful that she works for company which makes a big impact on people | . | . Company Mission Statements: . * HP: Create technology that makes life better for everyone, everywhere * Qualcomm: Inventing the tech everyone loves * Thermo Fisher Scientific: Enable our customers to make the world healthier, cleaner, and safer * Similarities: Using tech for the good of the people, main idea is to help people, doing something that people want . Every tech company that she worked in, it had a macro, global impact on the people of the world . * The product or service is life changing or generation changing * Qualcomm chips were in 99% of cell phones in the world * Everyday a billion peoples lives are impacted by Qualcomm technology! . Thermo Fisher: . * &gt; 100,000 colleagues * 7,000 R&amp;D scientists/engineers * 1.5 Billion invested in R&amp;D * &gt; 40B in revenue * Note: R&amp;D = Research and development . She: . * senior director of marketing and commercial sales * Voice of sales, voice of customers * People work really closely with scrum master to commercialize the product * No matter what you are doing, she enjoys working with all the folks. She can&#39;t do what others do. You can take a concept and build it and make it happen . She has data scientist in her team . * Join massive fragment data bases outside the company to predict customer demand and where the sales will be * They sell freezers okay (very important, remember this) * Databases predicted where the demand will be BEFORE customers place orders . Kris Porter: . Him: . * Software developer - SRE, DevOPs engineer, Infrastructure engineer * There were no CS classes when he started - * First cs class was second quarter of some year in college * Graduated in 2008 . Bachelors and Masters degree . * UCLA * Failed his first CS class; stopped after failure (thats pretty bad ) . Words to live by: It doesn&#39;t matter what you like at this age, you can have a tech career later on . * Marketable skill * Research project: internet of things * Robot that deployed somewhere in world * Costa rica: swings in the trees and gives biological readings (THATS SO COOL) . Career: . * NBC Universal, Streaming media infrastructure * Twitter (does he know elon musk?) you should ask * NOT a security engineer * Now works at Twitter (HE GOT FIRED) * Very interesting, most of his team was laid off (thanks elon musty) * Requirement to go work in the office in SF * Remote workers got kicked out * When you see companies shuffle, you have to go (don’t wait) * Mysten labs?? . Learning Highlights . * Continuous learning * CCNA training * Machine learning and Deep Learning * Python * Data Structures, Algorithms, Systems * Rest APIs in his job at twitter * Slowly movies to graph UL . Agile Methodology . * Technical perspective, different companies have their own version of agile, they use it depending on what they need * Qualcomm, - 150 engineers, interacted with each other, planned all of the work for the quarter in a big meeting that last 2 day (good way to coordinate) * Agile is important . Business landscape can change: Use Sprints . * Gone are the days where projects take 6 months * What can we do in shorter time periods? * That skillset is highly regarding . Machine Learning . * Learn how to use python libraries * Use information on when to archive and delete repositories * To cut costs . Questions: . Most important skill to have in the tech industry: . * Continuous learning * Not just learning a particular programming language, but to learn everything * Different companies have different stacks, everytime he moved companies he had to learn new programming languages * Everyone has different ways of doing things * Don&#39;t be super concerned about things you read on the news * In learning the skill to work with computers, that is self fulfilling * Start ups are a risk * Only risk is not learning (thats deep) * Be adaptive * Career path is zigzaggy * Dated herself for 35 years * Never thought she’d be doing what she’s doing * Best technical people * Listen to requirements * Translate it in terms of how the technology can solve the requirements * Help speak it to her . Biggest Challenges faced in the tech industry: . * She spent 14 years in qualcomm (semiconductor industry) * Acquisitions?? Buy other companies * The big fish in the pond (acquiring companies) * Serial killers (but not quite) * Interviews are ridiculous * Interviews are a series of timed, random tests * Could be a problem to solve in 30-45 minutes * Code has to compile with no errors . How is your work-life balance: . * When you talk to a company, you&#39;re in a position to negotiate * You&#39;re the one with the skill * Some good companies, some bad * You have to learn how to use services that are specific to certain companies . How does coding help in the business industry? . * Plenty of people were software developers academically, but moved into non-tech senior roles * Coding is a way of thinking * A way of looking at a problem and dissecting it * Critical thinking, problem solving * Think methodically * She interviews people on their ability to be a problem solver, and their ability to walk her through what you did what you did . One of her questions: . * You are in a room, not electronics, just whiteboard, pen, pencil * How many cars were sold in the United States last year? * She wants to know your assumptions, how she derived her answer . What are you interested in exploring or learning right now? . * He is interested in learning about block chain technology * AWS and google cloud stuff at large companies . How would coding help with investment and finance? . * Understanding algorithms, patterns, and analytics . Reflection . Hearing from the perspective of two people who actually work with computer science or tech-related projects in their day to day lives was quite interesting. First of all, it opened my eyes and really showed me how the things we learn in the classroom can be applied in the real world. Knowing that I am not just doing this class for a grade, but rather for life preparing allows me to understand the importance of what we do everyday. . Something that stood out to me is the emphasis on the fact that neither Kathleen Beveridge nor Kris Porter do now what they planned on doing in highschool. It&#39;s good to know that in life, people are able to fluctuate, and move around in regards to business opportunities. It can be especially stressful for many high schoolers to figure out what they want to do with their lives and how they want to make a living. Knowing that whatever we choose to major in in college is not the end all be all is relieving. . I recall Ms. Beveridge talking about one of her common interview questions. She said that she would tell her interviewee to imagine that they were in a room with no technology, and only a pen and paper. How many cars were sold in the US last year? While this seemed like a bizarre question, I found it interesting how much she cared about how someone analyzes a problem, and reaches a solution. This represents the value of not only critical thinking skills in the real world, but also one&#39;s ability to share their thought process with others. If you think about it, having that quality is crucial if you&#39;re going to work in a business with other people. You need to be able to figure out issues and communicate your thoughts with your colleagues. . One student asked a question regarding agile methodology. The experts&#39; answers revolved around the idea of communicating with your peers and getting tasks done. In the words of Kathleen Beveridge, &quot;gone are the days where you try to get a project done in six months&quot;. She goes on to explain that companies are valuing shorter, faster paced projects that may take only three months or less. This is only a result of coworkers being able to collaborate and bounce their works off of each other. . I received good insight from both experts, especially Kris Porter, who touched upon his career journey and how he partook in a variety of different jobs and multiple companies. Firstly, this provides a different perspective, compared to people who have spent that last 20+ years climbing the seniority ladder at one company. Also, in elaborating on how he played a role in different company projects, Porter explained to us how these technical skills we&#39;re learning right now can be applied to real company issues. . One of the questions asked was about the most important skill one could have in the tech industry. Both of the experts referred to this idea of continuous learning, and emphasized the importance of being able to adapt to your environment. Contrary to many other subjects, computer science and the tech industry require people to be ready to learn new things, even if they are already really good at what they do. As Kris Porter spoke about, this is because different companies have their own ways of dong things and their own websites/ systems to carry out projects. . Lastly, Beveridge talked about the importance of technical skills, even if one is not pursuing a career in software engineering. For example, she explained that skills learned in cs classes can help people understand algorithms, patterns, and analytics, which are useful skills to have for a finance career. . At the end of the day, &quot;surfing does not pay the bills&quot;. While it is important for people to do what they love in life, it is also crucial that one is able to support themselves and survive. A great way to do this is through the tech industry in today&#39;s day and age. Hearing these two experts speak on their experiences today really helped me understand the necessary skill sets needed to land a job in tech. As I get closer and closer to applying for colleges, I am slowly warming up to the idea of creating a career for myself in the software development industry. .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/12/13/CompSciPanel.html",
            "relUrl": "/college%20board/java/2022/12/13/CompSciPanel.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Cspanel",
            "content": "Kathyleen Beveridge: . Her career &amp; Journey . Wells Fargo, Nikko Securities, 1995 - 1996, investment advisor . Stock broker . | Went back to school and switched careers . | . | First high tech job at HP . Loved to surf there . | . | Qualcomm - Senior Manager Sales Operations and Director of Global Sales . | ThermoFischer - senior director of marketing . Biotech . | . | . | Education . MBA, University of South California . | BS Finance, Santa Clara University . | Studied abroad in Spain . | | . | Quote she lives by: Maya angelou: “my mission in life is not merely to survive, but to thrive; and to do so with passion, some compassion, some humor, and style” . | . | Words to live by: . SURFING DOESN’T PAY THE BILLS . | . | Investment banking is only one to one impact . | Grateful that she works for company which makes a big impact on people . | . | . Company Mission Statements: . HP: Create technology that makes life better for everyone, everywhere . | Qualcomm: Inventing the tech everyone loves . | Thermo Fisher Scientific: Enable our customers to make the world healthier, cleaner, and safer . Similarities: Using tech for the good of the people, main idea is to help people, doing something that people want . | . | . Every tech company that she worked in, it had a macro, global impact on the people of the world . The product or service is life changing or generation changing . | . Qualcomm chips were in 99% of cell phones in the world . Everyday a billion peoples lives are impacted by Qualcomm technology! . | . | . Thermo Fisher: . &gt; 100,000 colleagues . | 7,000 R &amp;D scientists/engineers . | 1.5 Billion invested in R &amp;D . | &gt; 40B in revenue . | Note: R &amp;D = Research and development . | . She: . senior director of marketing and commercial sales . | . Voice of sales, voice of customers . | People work really closely with scrum master to commercialize the product . | No matter what you are doing, she enjoys working with all the folks. She can’t do what others do. You can take a concept and build it and make it happen . | . She has data scientist in her team . Join massive fragment data bases outside the company to predict customer demand and where the sales will be . | They sell freezers okay (very important, remember this) . Databases predicted where the demand will be BEFORE customers place orders . | . | . Kris Porter: . Him: . Software developer - SRE, DevOPs engineer, Infrastructure engineer . | . There were no CS classes when he started - . | First cs class was second quarter of some year in college . | Graduated in 2008 . | . Bachelors and Masters degree . UCLA . Failed his first CS class; stopped after failure (thats pretty bad ) . | . | . Words to live by: . It doesn’t matter what you like at this age, you can have a tech career later on . Marketable skill . Research project: internet of things . | Robot that deployed somewhere in world . Costa rica: swings in the trees and gives biological readings (THATS SO COOL) . | . | . | . Career: . NBC Universal, Streaming media infrastructure . | Twitter (does he know elon musk?) you should ask . | NOT a security engineer . | Now works at Twitter (HE GOT FIRED) . Very interesting, most of his team was laid off (thanks elon musty) . | Requirement to go work in the office in SF . | Remote workers got kicked out . When you see companies shuffle, you have to go (don’t wait) . | . | . | Mysten labs?? . | . Learning Highlights . Continuous learning . | . CCNA training . | Machine learning and Deep Learning . | Python . | Data Structures, Algorithms, Systems . | . Rest APIs in his job at twitter . | Slowly movies to graph UL . | . Agile Methodology . Technical perspective, different companies have their own version of agile, they use it depending on what they need . Qualcomm, - 150 engineers, interacted with each other, planned all of the work for the quarter in a big meeting that last 2 day (good way to coordinate) . | . | Agile is important . | . Business landscape can change: Use Sprints . Gone are the days where projects take 6 months . | What can we do in shorter time periods? . | That skillset is highly regarding . | . Machine Learning . Learn how to use python libraries . | Use information on when to archive and delete repositories . | To cut costs . | . Questions: . Most important skill to have in the tech industry: . Continuous learning . Not just learning a particular programming language, but to learn everything . | Different companies have different stacks, everytime he moved companies he had to learn new programming languages . | Everyone has different ways of doing things . | . | Don’t be super concerned about things you read on the news . In learning the skill to work with computers, that is self fulfilling . | Start ups are a risk . Only risk is not learning (thats deep) . | . | . | Be adaptive . Career path is zigzaggy . | Dated herself for 35 years . | Never thought she’d be doing what she’s doing . | Best technical people . Listen to requirements . | Translate it in terms of how the technology can solve the requirements . | Help speak it to her . | . | . | . Biggest Challenges faced in the tech industry: . She spent 14 years in qualcomm (semiconductor industry) . Acquisitions?? Buy other companies . | The big fish in the pond (acquiring companies) . | Serial killers (but not quite) . | . | . Interviews are ridiculous . Interviews are a series of timed, random tests . Could be a problem to solve in 30-45 minutes . | Code has to compile with no errors . | . | . | . How is your work-life balance: . When you talk to a company, you’re in a position to negotiate . You’re the one with the skill . | Some good companies, some bad . | . | . You have to learn how to use services that are specific to certain companies . | . How does coding help in the business industry? . Plenty of people were software developers academically, but moved into non-tech senior roles . | Coding is a way of thinking . A way of looking at a problem and dissecting it . | Critical thinking, problem solving . | Think methodically . | . | She interviews people on their ability to be a problem solver, and their ability to walk her through what you did what you did . | . One of her questions: . You are in a room, not electronics, just whiteboard, pen, pencil . | . How many cars were sold in the United States last year? . She wants to know your assumptions, how she derived her answer . | . | . What are you interested in exploring or learning right now? . He is interested in learning about block chain technology . AWS and google cloud stuff at large companies . | . | . How would coding help with investment and finance? . Understanding algorithms, patterns, and analytics . | .",
            "url": "https://nicholasramos5.github.io/VSCodings/2022/12/13/CSPanel.html",
            "relUrl": "/2022/12/13/CSPanel.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "2019 FRQ #4",
            "content": "The LightBoard class models a two-dimensional display of lights, where each light is either on or off, as represented by a Boolean value. You will implement a constructor to initialize the display and a method to evaluate a light. . public class LightBoard { /** The lights on the board, where true represents on and false represents off. */ private boolean[][] lights; /** Constructs a LightBoard object having numRows rows and numCols columns. * Precondition: numRows &gt; 0, numCols &gt; 0 * Postcondition: each light has a 40% probability of being set to on. */ public LightBoard(int numRows, int numCols) { /* to be implemented in part (a) */ } /** Evaluates a light in row index row and column index col and returns a status * as described in part (b). * Precondition: row and col are valid indexes in lights. */ public boolean evaluateLight(int row, int col) { /* to be implemented in part (b) */ } // There may be additional instance variables, constructors, and methods not shown. } . import java.lang.Math; public class LightBoard { /** The lights on the board, where true represents on and false represents off. */ private boolean[][] lights; /** Constructs a LightBoard object having numRows rows and numCols columns. * Precondition: numRows &gt; 0, numCols &gt; 0 * Postcondition: each light has a 40% probability of being set to on. */ public LightBoard(int numRows, int numCols) { /* to be implemented in part (a) */ // initialize the 2D array lights = new boolean[numRows][numCols]; // Using two enhanced for loops to iterate through the 2D array for (int i = 0; i &lt; lights.length; i++) { for (int j = 0; j &lt; lights[i].length; j++){ // use math.random to generate a random number, less than 0.4, to determine if the light is on or off if (Math.random() &lt; 0.4) { lights[i][j] = true; } else { lights[i][j] = false; } } } } /** Evaluates a light in row index row and column index col and returns a status * as described in part (b). * Precondition: row and col are valid indexes in lights. */ public boolean evaluateLight(int row, int col) { /* to be implemented in part (b) */ // CHECK IF LIGHT IS ON if (lights[row][col] == true) { // return false if the number of lights in its column are even int counter = 0; // iterate through every row and check for value of the column, if true increment counter for (int i = 0; i &lt; lights.length; i++) { if (lights[i][col] == true){ counter++; } } // check if counter is even or odd if (counter % 2 == 0) { return false; } else{ return true; } } // If light is off else { int counter = 0; // Count number of lights in the column for (int i = 0; i &lt; lights.length; i++){ if (lights[i][col] == true){ counter++; } } // return true if the number of lights in the column is divisible by 3 if (counter % 3 == 0) { return true; } else { return false; } } } // There may be additional instance variables, constructors, and methods not shown. } LightBoard a = new LightBoard(5,5); System.out.println(a.evaluateLight(0,0)); System.out.println(a.evaluateLight(0,1)); System.out.println(a.evaluateLight(0,2)); . false true true .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/12/09/FRQ4.html",
            "relUrl": "/college%20board/java/2022/12/09/FRQ4.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "FRQ 1 - Methods",
            "content": "",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/11/14/FRQ1-MethodsAndControlStructures.html",
            "relUrl": "/college%20board/java/2022/11/14/FRQ1-MethodsAndControlStructures.html",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Hello",
            "content": "",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/11/08/hello.html",
            "relUrl": "/college%20board/java/2022/11/08/hello.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 6 - Arrays",
            "content": "AP Classroom Requirements 3.D - Write program code to create, traverse, and manipulate elements in 1D array or ArrayList objects. . 6.1 - Array Creation and Access | 6.2 - Traversing Arrays | 6.3 - Enhanced for Loop for Arrays | 6.4 - Developing Algorithms Using Arrays | . Primitive or Referenced? . Primitive = single variable type (int, char, float) Reference = several variable type () . array syntax . declare an array variable, it&#39;s not initialized -- by default, each element in the array is value 0 | . Common errors: --bound errors: when you access an array value that does not exist . --uninitialized and unfilled arrays . traverse an array: --accessing the values inside of it --can use any sort of iteration or loop -recommend for loops, but while loops and recursion also work . Enhanced for loops . Developing algorithms using arrays --minium, maximums, sums, manipulating each element . array.length array[i] . Declaring Arrays . Two types, arrays and ArrayLists Primitive data types contain a single var type (int, charm float) Referenced (string array classes) . Array Syntax . int[] array = new int[10]; . Traverse and Array . Main way is For loops where you go through each element of the array (enhanced or basic) Basic For loop is For when you know number of elements . public class ArrayMethods { private int[] values = {1, 2, 3, 4, 5}; for (int ) } . // Write array methods for the Array Methods class below out of the options given above. public class ArrayMethods { private int[] values = {1, 2, 3, 4, 5, 6, 7, 8, 9}; { int i; for(i = 0; i &lt; values.length; i ++);{ if (values[i] &lt; values[i+1]) { return true; } else { return false; } } } } . Vocab . Populating . giving the elements in the array values | . Array Bounds . marks start and end of array | . Traversal . visiting each element in an array from one end of array to the other | . Array Syntax . int [] array = new int[10]; | int [] array2 = {10,9,8,7,6,5,4,3,2,1}; Bound Errors | when you access an array element that does not exist Traverse an Array | Any sort of loops - main way to access is for loop | enhanced for loop: variable element is assigned to values[0] specific purpose - get elements of a collection from beg to end | better to use when the number of elements in the array is unknown | . | basic for loop - index varibale loop assigned as 0, 1 better to use when we knwo the number of iterations | . | . Homework . Write a class called ArrayMethods that contains two methods that utilize/manipulate an array. You may choose 2 of the 4 options below to complete. Extra credit for doing all 4 options. Make sure to show test cases for all of the options you choose. . Options for hacks (Pick two): . Swap the first and last element in the array | Replace all even elements with 0 | Return true if the array is currently sorted in increasing order | Return true if the array contains duplicate elements | . public class ArrayMethods { private int[] values = {0, 1, 2, 3}; public void printElements() { for(int i = 0; i &lt; values.length; i++){ System.out.println(values[i]); } } public void swapElements() { int last = values[values.length-1]; values[values.length-1] = values[0]; values[0] = last; } public void evenToZero() { for(int i = 0; i &lt; values.length; i++) { if (values[i] % 2 == 0){ values[i] = 0; } } } public static void main(String[] args) { System.out.println(&quot;First and Last Element Swap: &quot;); ArrayMethods swapElements = new ArrayMethods(); swapElements.swapElements(); swapElements.printElements(); System.out.println(&quot;Replacing All Elements w/ Zero: &quot;); ArrayMethods evenToZero = new ArrayMethods(); swapElements.evenToZero(); swapElements.printElements(); } } ArrayMethods.main(null); . First and Last Element Swap: 3 1 2 0 Replacing All Elements w/ Zero: 3 1 0 0 .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/10/25/Unit6-Arrays.html",
            "relUrl": "/college%20board/java/2022/10/25/Unit6-Arrays.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "DevOps Video",
            "content": "Describe the technical systems and processes used to ensure the ability to do continuous updates and integration of software. . Describe software and programming tools Identify authoring tools (IDE’s, Docker, GitHub) used Describe and/or show visuals of interactions and integration of programming languages, protocols, and data within project. For instance, deployed systems of Docker Images, Nginx, DNS hosting the application. Describe and/or illustrate key Web Applications, APIs, and dependency systems that will be required to complete this system (Diagram). Describe GitHub branch management and sociology used to ensure ability to perform continuous builds and integrations. GitHub projects Branching Strategies Deployment processes and automation Describe how to validate and test the complete system plus . Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. . GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. . Hello, im nicholas and I am the development operations engineer of this team. We are using Visual studio code as our IDE, which helps us immensely in developing code easily and efficiently. We also utilize docker, which allows us to carry out our code relatively quickly, and gives us less down time when working on projects. Github helps us collaborate as a team, see other projects, and organize our work into one area. . merge requests, pull requests, commits . ports are entry of access, this is where it sends and receives information = . my job: deployment and development . backend and frontend --backend = logic and data processing . we want to separate the two to develop them independently, and it makes it easier for developers to work on different parts of our project without interferring with each other&#39;s work . because we split the two, we want our front end to communicate wiht the backend - we do that with an api- our frontend will call upon our backend through and api link -- for instance, one wau this happens is when we make a table for our roster list, we call upon the backend api to retunr the data base . we use github to manage our repositories, where we have separate repositories for front end and back end . talk about: controllers - the interface between our api&#39;s, which call upon the backend, communicate with html and backend (through controller) . We use docker to form an image of our web application, which is what we use to service on the internet and our dns. dnhsscioly . nginx puts our website onto the internet .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/10/24/Video.html",
            "relUrl": "/college%20board/java/2022/10/24/Video.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 5 - Writing Classes",
            "content": "Unit Presentation . | Unit Notebook . | 2021 FRQ 1a &amp; 3a . | . Vocab . Creating a Class . Classes can be created by using the keyword &quot;class&quot;,followed by defining the class name starting with a single uppercase letter (known as CamelCase). . Format: . class ClassName { // code } . Constructor . Special method used to initialize objects . | Constructor does not return anything because it&#39;s not called directly by the code, it&#39;s called by the memory allocation and object initialization code in the runtime. Its return value (if it actually has one when compiled down to machine code) is opaque to the user - therefore, you can&#39;t specify it. . | . // Create a Main class public class Main { int x; // Create a class attribute // Create a class constructor for the Main class public Main() { x = 5; // Set the initial value for the class attribute x } public static void main(String[] args) { Main myObj = new Main(); // Create an object of class Main (This will call the constructor) System.out.println(myObj.x); // Print the value of x } } Main.main(null); // Outputs 5 . 5 . Accessor Methods . return the value of a private variable . | gives other classes access to that value stored in that variable, without having direct access to the variable itself . | Accessor methods take no parameters and have a return type that matches the type of the variable they are accessing. . | . Mutator Methods . reset the value of a private variable . | gives other classes the ability to modify the value stored in that variable without having direct access to the variable itself . | take one parameter whose type matches the type of the variable it is modifying . | always have a return type of whatever data field is being retrieved . | . Static Variables . also called class variables, as they belong to the class and not a particular instance . | | . public class Demo{ public static void main(String args[]){ Student s1 = new Student(); s1.showData(); Student s2 = new Student(); s2.showData(); //Student.b++; //s1.showData(); } } class Student { int a; //initialized to zero static int b; //initialized to zero only when class is loaded not for each object created. Student(){ //Constructor incrementing static variable b b++; } public void showData(){ System.out.println(&quot;Value of a = &quot;+a); System.out.println(&quot;Value of b = &quot;+b); } //public static void increment(){ //a++; //} } Demo.main(null); . Value of a = 0 Value of b = 1 Value of a = 0 Value of b = 2 . Access Modifiers (Public, Private, Protected) . Public - can be accessed within and outside of class . | Private - can only be accessed within the class . | Protected - can be accessed by all classes in the package and all subclass outside of the package . | . public class example{ int add(int a, int b){ return a+b; } } . public class Addition{ protected int addTwo(int a, int b){ return a+b; } } class Test extends Addition{ public static void main(String args[]){ Test obj = new Test(); } } . class outside{ private int = 10; private int square(int a){ return a*a; } } public class inside{ public static void main(String args[]){ outside obj. = new outside(); } } . Static Methods &amp; Class Methods . part of the class, rather than each object (static properties and methods) . | static methods do not require an object . | static properties only have one instance, which is the same for all objects . | . this Keyword . allows you to access properties of the class | . public class Main { int x; // Constructor with a parameter public Main(int x) { this.x = x; } // Call the constructor public static void main(String[] args) { Main myObj = new Main(5); System.out.println(&quot;Value of x = &quot; + myObj.x); } } Main.main(null); . Value of x = 5 . Main Method &amp; Tester Method . used to test a class, is automatically called when class ran . | usually creates an object and can test methods . | mostly used as a tester method for classes . | To execute the main portion of the code, a Main class with a main method is normally reserved which handles most of the executions of the code. . | . Inheritance &amp; Extends . Inheritance: a way for attributes and methods to be inherited from one class to another . | Extends: allows you to bring those attributes over from one class to another . | . Subclass Constructor, Super Keyword . subclass inherits all the members from the superclass the constructor of the superclass can be invoked from the subclass | . | super keyword: refers to superclass objects used to call superclass methods and to access the superclass constructor | . | . // Super Class public class Animal { private boolean vegetarian; private String eats; private int noOfLegs; public Animal(){} public Animal(boolean veg, String food, int legs){ this.vegetarian = veg; this.eats = food; this.noOfLegs = legs; } public boolean isVegetarian() { return vegetarian; } public void setVegetarian(boolean vegetarian) { this.vegetarian = vegetarian; } public String getEats() { return eats; } public void setEats(String eats) { this.eats = eats; } public int getNoOfLegs() { return noOfLegs; } public void setNoOfLegs(int noOfLegs) { this.noOfLegs = noOfLegs; } } . // SubClass public class Cat extends Animal{ private String color; public Cat(boolean veg, String food, int legs) { super(veg, food, legs); this.color=&quot;White&quot;; } public Cat(boolean veg, String food, int legs, String color){ super(veg, food, legs); this.color=color; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } } . Overloading a method . same name, different parameters . | a feature in java, which allows a class to have more than one method with the same name . | ideal when you want to have two methods that essentially do the same thing . | . class CalculateSquare { public void square() { System.out.println(&quot;No Parameter Method Called&quot;); } public int square( int number ) { int square = number * number; System.out.println(&quot;Method with Integer Argument Called:&quot;+square); } public float square( float number ) { float square = number * number; System.out.println(&quot;Method with float Argument Called:&quot;+square); } public static void main(String[] args) { CalculateSquare obj = new CalculateSquare(); obj.square(); obj.square(5); obj.square(2.5); } } . Overriding a method . same signature of a method . | occurs when a subclass has the same method as the parent class . | subclass provides a particular implementation of a method declared by one of its parent classes . | . // A Simple Java program to demonstrate // Overriding and Access-Modifiers class Parent { // private methods are not overridden private void m1() { System.out.println(&quot;From parent m1()&quot;); } protected void m2() { System.out.println(&quot;From parent m2()&quot;); } } class Child extends Parent { // new m1() method // unique to Child class private void m1() { System.out.println(&quot;From child m1()&quot;); } // overriding method // with more accessibility @Override public void m2() { System.out.println(&quot;From child m2()&quot;); } } // Driver class class Main { public static void main(String[] args) { Parent obj1 = new Parent(); obj1.m2(); Parent obj2 = new Child(); obj2.m2(); } } . Abstract Class &amp; Abstract Method . abstract class: cannot be instantiated, but can be subclassed | abstract method: a method that has just the method definition, but does not contain implementation | . abstract class Animal { public abstract void animalSound(); public void sleep() { System.out.println(&quot;Zzz&quot;); } } . Standard Methods . blocks of code that can be called from another location in the program or class . | toString(): returns the given value in string format . | equals(): compares two strings, true if equal . | hashCode(): returns an integer value generated by a hashing algorithm . | . Late Binding of an Object . referencing superclass object ie Animal a = new Chicken(); Animal b = new Goat(); | . | the compiler should perform no argument checks and no type checks on a method class should leave it all to the runtime | . | . // dynamic binding class Animal{ void eat(){System.out.println(&quot;animal is eating...&quot;);} } class Dog extends Animal{ void eat(){System.out.println(&quot;dog is eating...&quot;);} public static void main(String args[]){ Animal a=new Dog(); a.eat(); } } . Polymorphism . any of overloading, overriding, late binding . | the ability of a class to provide different implementations of a method . | allows the ability to perform one thing in a variety of formats . | . class Animal { public void animalSound() { System.out.println(&quot;The animal makes a sound&quot;); } } class Pig extends Animal { public void animalSound() { System.out.println(&quot;The pig says: wee wee&quot;); } } class Dog extends Animal { public void animalSound() { System.out.println(&quot;The dog says: bow wow&quot;); } } . Big O notation . for Hash map, Binary Search, Single loop, Nested Loop . | describes the set of algorithms that run worse, better, or at a certain given speed . | represents the number of operations performed . | .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/10/20/Unit5-WritingClasses.html",
            "relUrl": "/college%20board/java/2022/10/20/Unit5-WritingClasses.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Unit 2 - Using Objects",
            "content": "Object Oriented Programming . Programming paradigm around objects s | Compartmentalize data and function in such a way that data and the functions that operate on the data are bound together ## Classes | Classes are a template | Objects in the same class will share common methods and attributes | Fruit example ## Creating an Object | Members methods constructors | Initialized by calling the class constructor | Access modifier | Return type | Method name | Parameter list | Exception list | Method body | . Painter mypainter = new Painter(); . Example of declaring Methods . public int max (int x, int y){ if(x&gt;y) return x; else return y; } . Calling Methods . Allows code reuse for optimization and organization | Remember semicolons | objectReference.methodName(parameters); | Import math class to use the functions in that class | . Vocab . Wrapper Classes . Wrapper classes provide a way to use primitive data types as objects. . You need to wrap (int, double, etc.) when object references are required . Integer a = 2; Double b = 3.7; Boolean c = true; System.out.println(a); System.out.println(b); System.out.println(c); . 2 3.7 true . Concatenation . String concatenation forms a new String that is the combination of multiple strings. There are two ways to concatenate strings in Java: . By + (String concatenation) operator | By concat() method | . The operator &quot;+&quot; normally acts as an arithmetic operator unless one of its operands is a String. If so, it converts the other operand to a String before joining the second operand to the end of the first operand. . Difference between the two methods: . concat() can only concatenation String objects, whereas &quot;+&quot; silently converts non-Strings to Strings . concat() can only combine two strings, whereas &quot;+&quot; can combine any amount of strings. . String s = &quot;Nicholas&quot; + &quot;Ramos&quot;; System.out.println(s); String x = 2 + 2 + &quot;Nicholas&quot; + &quot;Ramos&quot; + 2 + 3; System.out.println(x); . NicholasRamos 4NicholasRamos23 . String s = &quot;Nicholas &quot;; String b = &quot;Ramos&quot;; System.out.println(s.concat(b)); . Nicholas Ramos . Math Class (Random Usage) . Math class contains methods that can be found within java.lang package | call Math class methods by &quot;ClassName.methodName()&quot; | . System.out.println(Math.random()); System.out.println(Math.floor(4.5)); System.out.println(Math.abs(-3)); System.out.println(Math.pow(7, 2)); System.out.println(Math.pow(36, .5)); System.out.println(Math.sqrt(36)); . 0.2898890672676253 4.0 3 49.0 6.0 6.0 . Homework . public class Goblin { private String name; private int HP; private int DMG; private double hitChance; private double criticalHitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public double getCriticalHitChance(){ return criticalHitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } public void setCriticalHitChance(double newCriticalHitChance) { this.criticalHitChance = newCriticalHitChance; } } . import java.lang.Math; public class Duel { public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (Math.random() &lt; attackerGoblin.getHitChance()) { if (Math.random() &lt; attackerGoblin.getCriticalHitChance()){ attackeeGoblin.takeDMG(2*attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; lands a critical hit!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + 2*attackerGoblin.getDMG() + &quot; damage&quot;); } else{ attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.50); goblin1.setCriticalHitChance(0.1); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(1); goblin1.setCriticalHitChance(0.5); fight(goblin1, goblin2); } } Duel.main(null); . jeffrey attacks Gunther the great! jeffrey misses... Gunther the great HP: 4 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 11 jeffrey attacks Gunther the great! jeffrey misses... Gunther the great HP: 4 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 10 jeffrey attacks Gunther the great! jeffrey hits! Gunther the great takes 2 damage Gunther the great HP: 2 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 9 jeffrey attacks Gunther the great! jeffrey misses... Gunther the great HP: 2 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 8 jeffrey attacks Gunther the great! jeffrey lands a critical hit! Gunther the great takes 4 damage Gunther the great HP: -2 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 7 Gunther the great has perished .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/10/13/Unit2-Objects.html",
            "relUrl": "/college%20board/java/2022/10/13/Unit2-Objects.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Unit 1 - Primitives",
            "content": "Vocab . Casting (division) . When you divide a double by a double (known as real division), the output (result) is a double. When both expressions are an integer, the result is an integer, which can cause complications. For example, 5/2 realistically does not produce and integer result. . Without casting, the result will be the nearest lower integer, and the remainder is disregarded. . With casting, you can cast the denominator to a double. When one value is a double and the other is an int, java casts the int into a double, which allows it to perform real division. . int x = 5/2; System.out.println(x); . 2 . double y = 7/(double)3; System.out.println(y); . 2.3333333333333335 . Casting (Truncating or Rounding) . When rounding, double values can be rounded by adding .5 (subtracting for negative numbers) and casting with (int). When you cast as an integer, java always rounds down, so by adding .5, it ensures that doubles that end in .5 or higher are casted as the integer greater than their value . When truncating, you can just cast as an int, which will always result in the integer just less than the double value, which is exactly what truncating is. . double x = 8.0/3; int rounded = (int)(x + 0.5); System.out.println(&quot;8.0/3 = &quot; + x); System.out.println(&quot;8.0/3 rounded = &quot; + rounded); System.out.println(&quot;8.0/3 truncated = &quot; + (int)x); . 8.0/3 = 2.6666666666666665 8.0/3 rounded = 3 8.0/3 truncated = 2 . 2006 FRQ . Problem 2a . A set of classes is used to represent various items that are available for purchase. Items are either taxable or nontaxable. The purchase price of a taxable item is computed from its list price and its tax rate. The purchase price of a nontaxable item is simply its list price. Part of the class hierarchy is shown in the diagram below. . *Diagram not shown The definitions of the Item interface and the TaxableItem class are shown below . public abstract class TaxableItem implements item { private double taxRate; public abstract double getListPrice(); public TaxableItem(double rate) { taxRate = rate; } // returns the price of the item including the tax public double purchasePrice() { /* to be implemented in part (a) */} } . Write the TaxableItem method purchasePrice. The purchase price of a TaxableItem is its list price plus the tax on the item. The tax is computed by multiplying the list price by the tax rate. For example, if the tax rate is 0.10 (representing 10%), the purchase price of an item with a list price of 7.15. Complete method purchasePrice below. . // returns the price of the item including the tax public double purchasePrice(){ double price = 1.1 * getListPrice(); return price; } . Problem 3a . Consider the following incomplete class that stores information about a customer, which includes a name and unique ID (a positive integer). To facilitate sorting, customers are ordered alphabetically by name. If two or more customers have the same name, they are further ordered by ID number. A particular customer is &quot;greater than&quot; another customer if that particular customer appears later in the ordering than the other customer. . public class Customer { //constructs a Customer with a given name and ID number public Customer(String name, int idNum) { /* implementation not shown */} //returns the customer&#39;s name public String getName () { /* implementation not shown */} // returns 0 when this customer is equal to other; // a positive integer when this customer is greater than other; // a negative integer when this customer is less than other; public int compareCustomer(Customer other) { /* to be implemented in part (a) */ } // There may be fields, constructors, and methods that are not shown. } . Write the Customer method compareCustomer, which compares this customer to a given customer, other. Customers are ordered alphabetically by name, using the compareTo method of the String class. If the names of the two customers are the same, then the customers are ordered by ID number. Method compareCustomer should return a positive integer if this customer is greater than other, a negative integer if this customer is less than other, and 0 if they are the same. . public int compareCustomer(Customer other){ int nameCompare = this.getName().compareTo(other.getName()); if(nameCompare == 0){ return this.getID() - other.getID(); } else{ return nameCompare; } } .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/10/12/Unit1-Primitives.html",
            "relUrl": "/college%20board/java/2022/10/12/Unit1-Primitives.html",
            "date": " • Oct 12, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Array Lists",
            "content": "Array List Explanation . An array list is an array that you can manipulate the size of. With normal arrays, they have their size set from the start and you cannot change the preassigned size of that array. However, array list elements can be added and removed from an array list whenever there is a need, helping the user with memory management. . Use of Array Lists . I have decided to use arrays to display some information about different types of cars. Array lists allow me to display information simply and in a way that is relatively easy to read. . import java.util.ArrayList; import java.util.Collections; import java.util.List; public class Vehicle{ private String model; private String make; private String cost; private String acceleration; private int seats; private String engine; public Vehicle(String model, String make, String cost, String acceleration, int seats, String engine){ this.model = model; this.make = make; this.cost = cost; this.acceleration = acceleration; this.seats = seats; this.engine = engine; } public String toString() { return String.format(&quot;%s t t%s t t%s t%s t%d t%s&quot;, model, make, cost, acceleration, seats, engine); } public static void main(String[] args){ List&lt;Vehicle&gt; listVehicles = new ArrayList&lt;Vehicle&gt;(); listVehicles.add(new Vehicle(&quot;TLX&quot;, &quot;Acura&quot;, &quot;54,500 USD&quot;, &quot;5.9 seconds&quot;, 5, &quot;355.0-hp, 3.0-liter, V6 Cylinder&quot;)); listVehicles.add(new Vehicle(&quot;Camry&quot;, &quot;Toyota&quot;, &quot;36,270 USD&quot;, &quot;5.1 seconds&quot;, 5, &quot;301.0-hp, 3.5-liter, V6 Cylinder&quot;)); listVehicles.add(new Vehicle(&quot;Camaro&quot;, &quot;Chevy&quot;, &quot;43,500 USD&quot;, &quot;5.2 seconds&quot;, 4, &quot;455.0-hp, 6.2-liter, 8 Cylinder&quot;)); listVehicles.add(new Vehicle(&quot;Model S&quot;, &quot;Tesla&quot;, &quot;135,990 USD&quot;, &quot;1.99 seconds&quot;, 5, &quot;no lol&quot;)); listVehicles.add(new Vehicle(&quot;SF90&quot;, &quot;Ferrari&quot;, &quot;511,295 USD&quot;, &quot;2.33 seconds&quot;, 2, &quot;986.0-hp, 4.0-liter, 8 Cylinder &quot;)); listVehicles.add(new Vehicle(&quot;Beetle&quot;, &quot;Volkswagen&quot;, &quot;20,895 USD&quot;, &quot;7.9 seconds&quot;, 4, )) for (Vehicle n : listVehicles){ System.out.println(n); } } } Vehicle.main(null); . TLX Acura 54,500 USD 5.9 seconds 5 355.0-hp, 3.0-liter, V6 Cylinder Camry Toyota 36,270 USD 5.1 seconds 5 301.0-hp, 3.5-liter, V6 Cylinder Camaro Chevy 43,500 USD 5.2 seconds 4 455.0-hp, 6.2-liter, 8 Cylinder Model S Tesla 135,990 USD 1.99 seconds 5 no lol SF90 Ferrari 511,295 USD 2.33 seconds 2 986.0-hp, 4.0-liter, 8 Cylinder . Science Olympiad Website . We are creating a Science Olympiad Website. To make it a fully functioning website, integration of array lists would be crucial for carrying out the functions that we would like to include. . import java.util.ArrayList; import java.util.Collections; import java.util.List; public class Member{ private String firstname; private String lastname; private String role; private int grade; private String email; public Member(String firstname, String lastname, String role, int grade, String email){ this.firstname = firstname; this.lastname = lastname; this.role = role; this.grade = grade; this.email = email; } public String toString() { return String.format(&quot;%s t%s t%s t%d t%s&quot;, firstname, lastname, role, grade, email); } public static void main(String[] args){ List&lt;Member&gt; listMembers = new ArrayList&lt;Member&gt;(); listMembers.add(new Member(&quot;Krish&quot;, &quot;Patil&quot;, &quot;Leadership&quot;, 11, &quot;krishpatil1019@gmail.com&quot;)); listMembers.add(new Member(&quot;Don&quot;, &quot;Tran &quot;, &quot;Leadership&quot;, 11, &quot;donqt@gmail.com&quot;)); listMembers.add(new Member(&quot;Rohan&quot;, &quot;Gaikwad&quot;, &quot;Vice President&quot;, 11, &quot;gaikwadrohan326@gmail.com&quot;)); listMembers.add(new Member(&quot;Audrey&quot;, &quot;Zeng&quot;, &quot;President&quot;, 12, &quot;audreyhuaxia@gmail.com &quot;)); listMembers.add(new Member(&quot;Nick&quot;, &quot;Ramos&quot;, &quot;no &quot;, 11, &quot;nicky.jay77@gmail.com&quot;)); listMembers.add(new Member(&quot;Nathan&quot;, &quot;Mananga&quot;, &quot;coder &quot;, 10, &quot;nathanmanangan@gmail.com&quot;)); for (Member n : listMembers){ System.out.println(n); } } } Member.main(null); . Krish Patil Leadership 11 krishpatil1019@gmail.com Don Tran Leadership 11 donqt@gmail.com Rohan Gaikwad Vice President 11 gaikwadrohan326@gmail.com Audrey Zeng President 12 audreyhuaxia@gmail.com Nick Ramos no 11 nicky.jay77@gmail.com Nathan Mananga coder 10 nathanmanangan@gmail.com . The above table shows some of the members, their roles, grades, and emails .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/10/05/ArrayLists.html",
            "relUrl": "/college%20board/java/2022/10/05/ArrayLists.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Arrays and Images",
            "content": "Saving PNG to GIF . Image IO read and Image IO write are focus of this code. A key portion of working with Images, or any file, is to know location of the input and output directories. . import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . Image Scaling and ASCII Conversion . In this example we print out a row of text for each row in the image. However, it seems as if the image is too tall. To address this problem, try to output a single character per block of pixels. In particular, average the grayscale values in a rectangular block that’s twice as tall as it is wide, and print out a single character for this block. . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); Pics Autumn = new Pics(&quot;Autumn&quot;, &quot;png&quot;); Autumn.printStats(&quot;Original&quot;); Autumn.resize(33); Autumn.printStats(&quot;Scaled&quot;); Autumn.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 10497 100x87 images/tmp/pumpkin.png Original: 1071473 1522x954 images/Autumn.png Scaled: 440949 502x315 images/tmp/Autumn.png . Setup for Color Scales . Prior to writing the code for color scales, it is important to create a method that will acquire data for a given image. This helps prevent the inefficient rewriting of code. . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; abstract class ImageBlueprint { protected final String inDir = &quot;images/&quot;; // location of images protected final String outDir = &quot;images/tmp/&quot;; // location of created files protected String inFile; protected String resizedFile; protected String colorFile; protected String ext; // extension of file protected long bytes; protected int width; protected int height; // get attributes of picture public ImageBlueprint(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.colorFile = this.outDir + name + &quot;New&quot; + &quot;.png&quot;; this.setStats(); } public ImageBlueprint(String image) { this(image, &quot;png&quot;); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } //ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // Will be used later protected abstract void conversion(); } . . Color Scaling . For the primary colors (RGB), all that&#39;s needed is to set the values of the non scaled color to be 00. . Gray-scaling is more complicated, and requires averaging the R, G, and B values, meaning add the values together and divide by three. . public class RedConversion extends ImageBlueprint { public RedConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;Red&quot; + &quot;.png&quot;; } public RedConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;Red&quot; + &quot;.png&quot;; } @Override protected void conversion() { BufferedImage img = null; PrintWriter colorPrt = null; FileWriter colorWrt = null; // Just deletes file if already exists in tmp try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } // try { // colorPrt = new PrintWriter(colorWrt = new FileWriter(this.colorFile, true)); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(col.getRed(), 0, 0).getRGB(); img.setRGB(j, i, rgb); } } try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } public static void main(String[] args) { RedConversion autumn = new RedConversion(&quot;autumn&quot;, &quot;png&quot;); autumn.conversion(); } } RedConversion.main(null); . . public class GreenConversion extends ImageBlueprint { public GreenConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;Green&quot; + &quot;.png&quot;; } public GreenConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;Green&quot; + &quot;.png&quot;; } @Override protected void conversion() { BufferedImage img = null; PrintWriter colorPrt = null; FileWriter colorWrt = null; // Just deletes file if already exists in tmp try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } // try { // colorPrt = new PrintWriter(colorWrt = new FileWriter(this.colorFile, true)); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(0, col.getGreen(), 0).getRGB(); img.setRGB(j, i, rgb); } } try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } public static void main(String[] args) { GreenConversion Autumn = new GreenConversion(&quot;Autumn&quot;, &quot;png&quot;); Autumn.conversion(); } } GreenConversion.main(null); . . public class BlueConversion extends ImageBlueprint { public BlueConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;Blue&quot; + &quot;.png&quot;; } public BlueConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;Blue&quot; + &quot;.png&quot;; } @Override protected void conversion() { BufferedImage img = null; PrintWriter colorPrt = null; FileWriter colorWrt = null; // Just deletes file if already exists in tmp try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } // try { // colorPrt = new PrintWriter(colorWrt = new FileWriter(this.colorFile, true)); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } for (int i = 0; i &lt; this.height; i++) { for (int j = 0; j &lt; this.width; j++) { Color col = new Color(img.getRGB(j, i)); int rgb = new Color(0, 0, col.getBlue()).getRGB(); img.setRGB(j, i, rgb); } } try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } public static void main(String[] args) { BlueConversion Autumn = new BlueConversion(&quot;Autumn&quot;, &quot;png&quot;); Autumn.conversion(); } } BlueConversion.main(null); . . public class GrayConversion extends ImageBlueprint { public GrayConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;Gray&quot; + &quot;.png&quot;; } public GrayConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;Gray&quot; + &quot;.png&quot;; } @Override protected void conversion() { BufferedImage img = null; PrintWriter colorPrt = null; FileWriter colorWrt = null; // Just deletes file if already exists in tmp try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } // try { // colorPrt = new PrintWriter(colorWrt = new FileWriter(this.colorFile, true)); // } catch (IOException e) { // // TODO Auto-generated catch block // e.printStackTrace(); // } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } for (int i = 0; i &lt; this.height; i++){ for (int j = 0; j &lt; this.width; j++){ Color col = new Color(img.getRGB(j,i)); int rgb = new Color(((col.getRed()+ col.getGreen()+ col.getBlue())/3), ((col.getRed()+ col.getGreen()+ col.getBlue())/3), ((col.getRed()+ col.getGreen()+ col.getBlue())/3)).getRGB(); img.setRGB(j, i, rgb); } } try { ImageIO.write(img, &quot;png&quot;, new File(this.colorFile) ); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } public static void main(String[] args) { GrayConversion Autumn = new GrayConversion(&quot;Autumn&quot;, &quot;png&quot;); Autumn.conversion(); } } GrayConversion.main(null); . . ASCII . We are going to convert images to ASCII characters. The existing problem with the current method is that it stretched the image out, hurting the appeal. The best solution is to take 4 rows and 2 columns of pixels and convert them into a single ASCII character. . The finished result still looks horrible. . public class ASCIIConversion extends ImageBlueprint { public ASCIIConversion(String name, String ext) { super(name, ext); this.colorFile = this.outDir + name + &quot;ASCII&quot; + &quot;.txt&quot;; } public ASCIIConversion(String name) { super(name); this.colorFile = this.outDir + name + &quot;ASCII&quot; + &quot;.txt&quot;; } @Override protected void conversion() { // Controls how big chunks are taken for ASCII characters final int XLENGTH = 1; final int YLENGTH = 2; BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; Color col = null; try { File file = new File(this.colorFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.colorFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i += 4) { for (int j = 0; j &lt; img.getWidth(); j += 2) { // colorSum stores total sum of RGB values, counter keeps track of how many are being counted // colorSum/counter = average // average is taken to get ASCII character double colorSum = 0; int counter = 0; for (int k = 0; k &lt; XLENGTH; k++) { for (int l = 0; l &lt; YLENGTH; l++) { if (k &lt; img.getWidth() &amp;&amp; l &lt; img.getHeight()) { counter++; col = new Color(img.getRGB(j + k, i + l)); colorSum += (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); } } } double average = colorSum / counter; try { asciiPrt.print(asciiChar(average)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } public static void main(String[] args) { ASCIIConversion Autumn = new ASCIIConversion(&quot;Autumn&quot;, &quot;png&quot;); Autumn.conversion(); } } ASCIIConversion.main(null); . Atrocious ASCII-Scaled Autumn . Hello . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=2) { for (int j = 0; j &lt; img.getWidth(); j+=1) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); Pics autumn = new Pics(&quot;autumn&quot;, &quot;png&quot;); autumn.printStats(&quot;Original&quot;); autumn.resize(33); autumn.printStats(&quot;Scaled&quot;); autumn.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 10497 100x87 images/tmp/pumpkin.png Original: 1071473 1522x954 images/autumn.png Scaled: 440949 502x315 images/tmp/autumn.png . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/10/02/Arrays-And-Images.html",
            "relUrl": "/college%20board/java/2022/10/02/Arrays-And-Images.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "API Implementation",
            "content": "Explanation . API&#39;s (Application Programming Interface) provide a way to store a large amount of data, and then allow you to access that data easily, without having to take it directly from another source. You can call API&#39;s in java and have that data be transferred. JSON is used to transmit this data. Since they&#39;re a massive data pool, you can easily take out data, allowing you to save time and code efficiently. . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://wft-geo-db.p.rapidapi.com/v1/geo/cities/Q65/locatedIn&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;f4dbb6f12cmsh8393e3c31992857p1076ddjsnf78a3b66c369&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;wft-geo-db.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;data&#34;:{&#34;id&#34;:172136,&#34;wikiDataId&#34;:&#34;Q104994&#34;,&#34;type&#34;:&#34;ADM2&#34;,&#34;city&#34;:&#34;Los Angeles County&#34;,&#34;name&#34;:&#34;Los Angeles County&#34;,&#34;country&#34;:&#34;United States of America&#34;,&#34;countryCode&#34;:&#34;US&#34;,&#34;region&#34;:&#34;California&#34;,&#34;regionCode&#34;:&#34;CA&#34;,&#34;elevationMeters&#34;:3,&#34;latitude&#34;:34.05,&#34;longitude&#34;:-118.25,&#34;population&#34;:10014009,&#34;timezone&#34;:&#34;America__Los_Angeles&#34;,&#34;deleted&#34;:false}} . Build a Web Service . This code provides output with information on certain cities. In this case, we are looking at Los Angeles County. We have access to information about this city, such as country, region, elevation, latitude, and population. . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://wft-geo-db.p.rapidapi.com/v1/geo/cities/Q65/locatedIn&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;f4dbb6f12cmsh8393e3c31992857p1076ddjsnf78a3b66c369&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;wft-geo-db.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/geodb-cities&quot;) //prefix of API public class CovidApiController { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getGeo() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://wft-geo-db.p.rapidapi.com/v1/geo/cities/Q65/locatedIn&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;f4dbb6f12cmsh8393e3c31992857p1076ddjsnf78a3b66c369&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;wft-geo-db.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . {&#34;data&#34;:{&#34;id&#34;:172136,&#34;wikiDataId&#34;:&#34;Q104994&#34;,&#34;type&#34;:&#34;ADM2&#34;,&#34;city&#34;:&#34;Los Angeles County&#34;,&#34;name&#34;:&#34;Los Angeles County&#34;,&#34;country&#34;:&#34;United States of America&#34;,&#34;countryCode&#34;:&#34;US&#34;,&#34;region&#34;:&#34;California&#34;,&#34;regionCode&#34;:&#34;CA&#34;,&#34;elevationMeters&#34;:3,&#34;latitude&#34;:34.05,&#34;longitude&#34;:-118.25,&#34;population&#34;:10014009,&#34;timezone&#34;:&#34;America__Los_Angeles&#34;,&#34;deleted&#34;:false}} . | import org.json.simple.JSONObject; package org.json.simple does not exist .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/10/02/API-Implementation.html",
            "relUrl": "/college%20board/java/2022/10/02/API-Implementation.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "JavaScript UI Development",
            "content": "function logItType(output) { console.log(typeof output, &quot;;&quot;, output); //&quot;typeof&quot; keyword returns the type. } . function Person(name, email, classOf) { this.name = name; this.email = email; this.classOf = classOf; this.role = &quot;&quot;; } Person.prototype.setRole = function(role) { this.role = role; } Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.email, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jmortensen@powayusd.com&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, email: &#39;jmortensen@powayusd.com&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jmortensen@powayusd.com&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, email: &#39;jmortensen@powayusd.com&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jmortensen@powayusd.com&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . var students = [ new Person(&quot;Krishtopher Patil&quot;, &quot;krishpatil1019@gmail.com&quot;, 2024), new Person(&quot;Donald Tran&quot;, &quot;donqt15@gmail.com&quot;, 2024), new Person(&quot;Nathan Manangan&quot;, &quot;prorichyman@gmail.com&quot;, 2024), new Person(&quot;Nicholas Ramos&quot;, &quot;nicky.jay77@gmail.com&quot;, 2024), ]; function Classroom(teacher, students){ teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } compsci = new Classroom(teacher, students); logItType(compsci.classroom); logItType(compsci.classroom[0].name); logItType(compsci.json[0]); logItType(JSON.parse(compsci.json[0])); . object ; [ Person { name: &#39;Mr M&#39;, email: &#39;jmortensen@powayusd.com&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Krishtopher Patil&#39;, email: &#39;krishpatil1019@gmail.com&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Donald Tran&#39;, email: &#39;donqt15@gmail.com&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Nathan Manangan&#39;, email: &#39;prorichyman@gmail.com&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Nicholas Ramos&#39;, email: &#39;nicky.jay77@gmail.com&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jmortensen@powayusd.com&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jmortensen@powayusd.com&#39;, classOf: 1977, role: &#39;Teacher&#39; } . Classroom.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid white;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em black;&quot; ); var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Email&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row of compsci.classroom) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.email + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(compsci._toHtml()); . NameEmailClass OfRole . Mr M | jmortensen@powayusd.com | 1977 | Teacher | Krishtopher Patil | krishpatil1019@gmail.com | 2024 | Student | Donald Tran | donqt15@gmail.com | 2024 | Student | Nathan Manangan | prorichyman@gmail.com | 2024 | Student | Nicholas Ramos | nicky.jay77@gmail.com | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/09/25/javascript.html",
            "relUrl": "/college%20board/java/2022/09/25/javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Fibonacci - Extends and Data Modeling",
            "content": "Fibonacci Class . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Fibonacci using a For Loop . import javax.swing.JOptionPane; public class FiboFor { public static void main(String[] args) { String inpStr = JOptionPane.showInputDialog(&quot;Give the amount of Fibo numbers that you would like to print&quot;); int inpNum = Integer.parseInt(inpStr); int first = 0; int second = 1; System.out.println(&quot;Here is the Fibonacci Sequence for &quot; + inpNum + &quot; terms:&quot;); for (int i = 1; i &lt;= inpNum; i++) { System.out.print(first + &quot; &quot;); int nextNum = first + second; first = second; second = nextNum; } } } FiboFor.main(null); . Here is the Fibonacci Sequence for 10 terms: 0 1 1 2 3 5 8 13 21 34 . Fibonacci using While Loop . import javax.swing.JOptionPane; public class FiboWhile { public static void main(String[] args) { int start = 0; String inpStr = JOptionPane.showInputDialog(&quot;Give the amount of Fibo numbers that you would like to print&quot;); int inpNum = Integer.parseInt(inpStr); int first = 0; int second = 1; System.out.println(&quot;Here is the Fibonacci Sequence for &quot; + inpNum + &quot; terms:&quot;); while (start &lt; inpNum) { System.out.print(first + &quot; &quot;); int nextNum = first + second; first = second; second = nextNum; start++; } } } FiboWhile.main(null); . Here is the Fibonacci Sequence for 10 terms: 0 1 1 2 3 5 8 13 21 34 . Fibonacci Recursion Loop . import javax.swing.JOptionPane; public class FiboRec{ public static int Recursion(int n){ if(n == 0){ return 0; } if(n == 1 || n == 2){ return 1; } return Recursion(n-2) + Recursion(n-1); } public static void main(String args[]) { String num = JOptionPane.showInputDialog(&quot;Give the amount of Fibo numbers that you would like to print&quot;); int end = Integer.parseInt(num); System.out.println(&quot;Here is the Fibonacci Sequence for &quot; + num + &quot; terms:&quot;); for(int i = 0; i &lt; end; i++){ System.out.print(Recursion(i) +&quot; &quot;); } } } FiboRec.main(null); . Here is the Fibonacci Sequence for 10 terms: 0 1 1 2 3 5 8 13 21 34 . Fibonacci Abstraction . abstract class Fibonacci { abstract void run(); private int first; private int second; public void setFirst(int num) { first = num; } public int getFirst() { return first; } public void setSecond(int num) { second = num; } public int getSecond() { return second; } } class Fibo extends Fibonacci { void run() { String inpStr = JOptionPane.showInputDialog(&quot;Give the amount of Fibo numbers that you would like to print&quot;); int inpNum = Integer.parseInt(inpStr); setFirst(0); setSecond(1); System.out.println(&quot;Here is the Fibonacci Sequence for &quot; + inpNum + &quot; terms:&quot;); for (int i = 1; i &lt;= inpNum; i++) { System.out.print(getFirst() + &quot; &quot;); int nextNum = getFirst() + getSecond(); setFirst(getSecond()); setSecond(nextNum); } } public static void main(String args[]) { Fibonacci obj = new Fibo(); obj.run(); } } Fibo.main(null); . Here is the Fibonacci Sequence for 10 terms: 0 1 1 2 3 5 8 13 21 34 . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Hacks Questions . Skill 1.B: Used different types of loops or methods of program for each situation . Skill 4.C: Code segments produce same results because the output is printed in the same format, the only thing changing is the type of loop. Key Finding: Different Loops can produce same output as long as the loops have the same purpose- in this case with for and while loops . Skill 5.A: Recursion runs the fastest since it&#39;s not a loop, but all methods work equally well. It&#39;s important to know how to recreate a program in different ways. .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/09/25/fibo-extends-data-modeling.html",
            "relUrl": "/college%20board/java/2022/09/25/fibo-extends-data-modeling.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Iteration Mini Lab - The Food Cycle",
            "content": "Iteration allows you to go through a list of items relatively quickly. It is easier to store items in a list (known as an array) and then call forth each item later, rather than have to list everything out each and every time. . The Food Cycle . In this example, we can see how iteration and 2d arrays function via animals eating each other :) . public class FoodCycle{ String [][] foodcycle; public FoodCycle(){ foodcycle = new String[][]{ { &quot; .--. .--. &quot;, &quot; : ( . _......_ . /) : &quot;, &quot; &#39;. ` ` .&#39; &quot;, &quot; /&#39; _ _ ` &quot;, &quot; / 0} {0 &quot;, &quot; | / | &quot;, &quot; | /&#39; ` | &quot;, &quot; | . .==. . | / &quot;, &quot; &#39;._ .&#39; __// &#39;./ _.&#39; &quot;, &quot; / ``&#39;._-&#39;&#39;-_.&#39;`` &quot;, &quot; &quot; }, { &quot; . &quot;, &quot; / V &quot;, &quot; / ` / &quot;, &quot; &lt;&lt; | &quot;, &quot; / | &quot;, &quot; / | &quot;, &quot; / | &quot;, &quot; / / &quot;, &quot; ( ) | | &quot;, &quot;_________| _//_ | | &quot;, &quot;&lt;__________ _____) __) &quot; }, { &quot; / __ &quot;, &quot; ( @ ___ &quot;, &quot; / O &quot;, &quot; / (_____/ &quot;, &quot;/_____/ U &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot; }, { &quot;| /| &quot;, &quot;| o_o | &quot;, &quot; _^_/ &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot; } }; } public void print(){ System.out.println(&quot; &quot;); System.out.println(&quot;The Food Cycle&quot;); int animalCount = foodcycle.length; for (int i = animalCount; i &gt; 0; i--){ System.out.println(i + &quot; animals left &quot;); for (int row = 0; row &lt; foodcycle[0].length; row++){ for (int animal = 0; animal &lt; i; animal++){ System.out.print(foodcycle[animal][row] + &quot; t&quot;); } System.out.println(); } System.out.println(&quot;An Animal has been eaten!&quot;); System.out.println(&quot;Run for your lives!&quot;); System.out.println(&quot; n-- n&quot;); animalCount -= 1; } System.out.println(&quot;No more animals :( n&quot;); System.out.println(&quot;--&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args){ new FoodCycle().print(); } } FoodCycle.main(null); . The Food Cycle 4 animals left .--. .--. . / __ | /| : ( . _......_ . /) : / V ( @ ___ | o_o | &#39;. ` ` .&#39; / ` / / O _^_/ /&#39; _ _ ` &lt;&lt; | / (_____/ / 0} {0 / | /_____/ U | / | / | | /&#39; ` | / | | . .==. . | / / / &#39;._ .&#39; __// &#39;./ _.&#39; ( ) | | / ``&#39;._-&#39;&#39;-_.&#39;`` _________| _//_ | | &lt;__________ _____) __) An Animal has been eaten! Run for your lives! -- 3 animals left .--. .--. . / __ : ( . _......_ . /) : / V ( @ ___ &#39;. ` ` .&#39; / ` / / O /&#39; _ _ ` &lt;&lt; | / (_____/ / 0} {0 / | /_____/ U | / | / | | /&#39; ` | / | | . .==. . | / / / &#39;._ .&#39; __// &#39;./ _.&#39; ( ) | | / ``&#39;._-&#39;&#39;-_.&#39;`` _________| _//_ | | &lt;__________ _____) __) An Animal has been eaten! Run for your lives! -- 2 animals left .--. .--. . : ( . _......_ . /) : / V &#39;. ` ` .&#39; / ` / /&#39; _ _ ` &lt;&lt; | / 0} {0 / | | / | / | | /&#39; ` | / | | . .==. . | / / / &#39;._ .&#39; __// &#39;./ _.&#39; ( ) | | / ``&#39;._-&#39;&#39;-_.&#39;`` _________| _//_ | | &lt;__________ _____) __) An Animal has been eaten! Run for your lives! -- 1 animals left .--. .--. : ( . _......_ . /) : &#39;. ` ` .&#39; /&#39; _ _ ` / 0} {0 | / | | /&#39; ` | | . .==. . | / &#39;._ .&#39; __// &#39;./ _.&#39; / ``&#39;._-&#39;&#39;-_.&#39;`` An Animal has been eaten! Run for your lives! -- No more animals :( -- THE END . Iteration Using Objects . This example could also be in the form of objects. Because the static key word, a class can be created from the animals alone, which creates animal objects and also perform methods. In this sense, the class has universal methods which can be called to do something to the objects it (the class) created. . By using object oriented programming (OOP), the animals are much easier to replicate and they can be given other properties such as names, age, type etc. So, unlike iteration using purely 2D arrays, each fish can have unique properties. Both of them, however, are relatively easy to expand the list that the print function iterates through. However, OOP makes it far easier to manipulate the data of the fishes and the list that is iterated through. .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/09/19/iteration.html",
            "relUrl": "/college%20board/java/2022/09/19/iteration.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "FRQ 1 - 2018",
            "content": "This question involves reasoning about a simulation of a frog hopping in a straight line. The frog attempts to hop to a goal within a specified number of hops. The simulation is encapsulated in the following FrogSimulation class. You will write two of the methods in this class. . public class FrogSimulation { /** Distance, in inches, from the starting position to the goal. */ private int goalDistance; /** Maximum number of hops allowed to reach the goal. */ private int maxHops; /** Constructs a FrogSimulation where dist is the distance, in inches, from the starting * position to the goal, and numHops is the maximum number of hops allowed to reach the goal. * Precondition: dist &gt; 0; numHops &gt; 0 */ public FrogSimulation(int dist, int numHops) { goalDistance = dist; maxHops = numHops; } /** Returns an integer representing the distance, in inches, to be moved when the frog hops. */ private int hopDistance() { /* implementation not shown */ } /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { /* to be implemented in part (a) */ } /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { /* to be implemented in part (b) */ } } . Part A . Write the simulate method, which simulates the frog attempting to hop in a straight line to a goal from the frog&#39;s starting position of 0 within a maximum number of hops. The method returns true if the frog successfully reached the goal within the maximum number of hops; otherwise, the method returns false. . The FrogSimulation class provides a method called hopDistance that returns an integer representing the distance (positive or negative) to be moved when the frog hops. A positive distance represents a move toward the goal. A negative distance represents a move away from the goal. The returned distance may vary from call to call. Each time the frog hops, its position is adjusted by the value returned by a call to the hopDistance method. . The frog hops until one of the following conditions becomes true: . The frog has reached or passed the goal. | The frog has reached a negative position. | The frog has taken the maximum number of hops without reaching the goal. | . Class information for this question: . public class FrogSimulation private int goalDistance private int maxHops private int hopDistance() public boolean simulate() public double runSimulations(int num) . Complete method simulate below. You must use hopDistance appropriately to receive full credit. . /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { int position = 0; for (int count = 0; count &lt; maxHops; count++) { position += hopDistance(); if (position &gt;= goalDistance) { return true; } else if (position &lt; 0) { return false; } } return false; } . Part B . Write the runSimulations method, which performs a given number of simulations and returns the proportion of simulations in which the frog successfully reached or passed the goal. For example, if the parameter passed to runSimulations is 400, and 100 of the 400 simulate method calls returned true, then the runSimulations method should return 0.25. . Complete method runSimulations below. Assume that simulate works as specified, regardless of what you wrote in part (a). You must use simulate appropriately to receive full credit. . /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { int countSuccess = 0; for (int count = 0; count &lt; num; count++) { if(simulate()) { countSuccess++; } } return (double) countSuccess / num; } .",
            "url": "https://nicholasramos5.github.io/VSCodings/college%20board/java/2022/09/16/FRQ1(2018).html",
            "relUrl": "/college%20board/java/2022/09/16/FRQ1(2018).html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Focus and Habits",
            "content": "Yale Video Takeaway . Laurie Santos’s speech on her new course in Yale Psychology and the Good Life talks about the mental struggles and issues that many people face in their day to day lives. Specifically, she talks about the younger generation, including undergraduates, high school students, and even middle school students. She focuses on how much mental health is important and is lacking for these groups. She also provides methods for increasing overall life happiness. Here are some key ideas from the video: . Money doesn&#39;t buy happiness. While it may sound cliche, studies find that it&#39;s true. Unless you&#39;re living under the national poverty line, and increase in salary does not directly equate to an increase in mental health. People have this false perception that if they just had more money, they would be happier in life. In reality, this increase in money does not allow you anything besides buying a nicer car or a bigger house, which both have nothing to do with how happy a person is. . Free time is important. Many students are filled with work and things that make them busy. This can cause a great deal of stress in one&#39;s life. It is necessary for one&#39;s mental health and well being to have time to relax and enjoy the moment. This is why practices such as meditation are so beneficial, as they allow one to take the time and release life stress. . Spending time socializing is helpful for a healthy mentality. While some people may feel as their time is best spent alone, it is a fact that happier people socialize more, and people who spend time by themselves tend to be less happy in life. Socializing does not mean social media or using the internet/phone. That creates the false reality of socialization, which does not benefit one as much as real life human interaction does. . Spending time in the present is often overlooked. Without realizing it, many people often carry out their daily tasks while subconsciously having their mind elsewhere. Even if its a boring task you&#39;re doing, such as work, it helps you to be in the moment and focus on it. This kind of mentality helps people feel more grateful for their lives and what they have. It shows people that it matters not where they were yesterday, not where they&#39;ll be tomorrow, but where they are now in life and what they have accomplish and can accomplish for themselves. . Sleep is key. This is an issue especially for many high schools students, who tend to not get enough sleep at night. While sleep is beneficial for your physical health, it is especially important for your mental health. Getting a good nights sleep allows you to be productive, happy, and healthy during the day. It relieves the stress and allows you to feel more at peace and relaxed with your life. . Goals for School . The mindset describes in the video is important for my personal life. I need to be able to work efficiently enough, providing myself with enough free time to spend relaxing, and enough time to sleep. My work conduct in school directly correlates to my stress levels. When I don&#39;t get work done at school, I have to spend personal time getting it done at home. With procrastination, I feel as if I am overwhelmed with work, which can be easily avoided. . This school year, I plan to lessen my procrastination and increase my focus while working in school. Whether that be by working together with others, or just sitting down and getting it done, I want to be able to make something of myself this year, and ease off on my stress every night. . CSA . In this class specifically, I have recently been struggling with my work conduct. When it&#39;s time to code code code, I often find my mind wandering off, leaving myself with little to no work done at the end of class. This may be a direct result of my lack of sleep. Overall, my goal is to get more work done every day and feel motivated every morning when I walk into class. . Being Grateful . Laurie Santos touched on the importance of being grateful for what you have in life. I would like to practice that and make it a habit to remind myself of the good things I have amongst all the stress I may feel. . I am grateful for being able to attend such a nice and privileged school I am grateful for having supporting parents who made me who I am today I am grateful for the friends I have that get me through the day I am grateful for all the opportunities I have in life to make something of myself .",
            "url": "https://nicholasramos5.github.io/VSCodings/pbl/college%20board/java/2022/09/12/Focus-Habits.html",
            "relUrl": "/pbl/college%20board/java/2022/09/12/Focus-Habits.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Objects Notebook",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // CLASS DEFINED // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object ( INSTANCE ) this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Salary Calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } private void salaryCalculator(){ Scanner myObj = new Scanner(System.in); // Create a Scanner object ( INSTANCE ) System.out.println(&quot;Enter a salary between 0-1,000,000&quot;); // Number 1, gets salary double salary = myObj.nextDouble(); // Read user input System.out.println(salary); double oldSalary = salary; // records oldsalary for percent calculation later System.out.println(&quot;Enter your pay raise&quot;); // Number 2, gets raise to salary double raise = myObj.nextDouble(); // Read user input System.out.println(raise); salary += raise; // the inputted number of &quot;raise&quot; is added onto the original inputted &quot;salary&quot; int randomnum = (int)(Math.random() * 100); // use of math.random() salary += randomnum; // use of math.random to add random number into salary value int percent = (int) (100*(salary / oldSalary)-100); // calculates percent raise myObj.close(); // closing object, stops reading text inputs boolean payraisequality; // defines boolean variable String message; // defines message if(percent &gt; 5){ payraisequality = true; } else{ payraisequality = false; } if (payraisequality == true){ message = &quot;You got a good pay raise!&quot;; } else{ message = &quot;You got a bad pay raise.&quot;; } System.out.println(&quot;Your final salary, with an added random number, is: &quot; + salary + &quot;, which is around a &quot; + percent + &quot;% raise from your original salary. &quot; + message); // Output user input } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic (CHANGING FROM A DOUBLE TO AN INTEGER) try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: salaryCalculator(); // (METHOD) break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object (METHOD) } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Salary Calculator 0 - Quit - 4: Enter a salary between 0-1,000,000 1000.0 Enter your pay raise 30000.0 Your final salary, with an added random number, is: 31024.0, which is around a 3002% raise from your original salary. You got a good pay raise! 1: Hello, World! 0: Goodbye, World! . College Board and CTE competences . Explain where a Class is defined . &quot;public class Menu{ &quot; | . Explain where an instances of a Class is defined . &quot;Scanner sc = new Scanner(System.in);&quot; | &quot;Scanner myObj = new Scanner(System.in);&quot; | . Explain where an object is Calling a Method . &quot;new Menu();&quot; | . Explain where an object is Mutating data . &quot;(CHANGING FROM A DOUBLE TO AN INTEGER)&quot; | .",
            "url": "https://nicholasramos5.github.io/VSCodings/2022/09/05/Objects.html",
            "relUrl": "/2022/09/05/Objects.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Code.org Completion",
            "content": "I have completed Code.org unit 1! Here I will share some of what I have learned. . public class PainterPlus extends Painter{ public PainterPlus() { super(); } public void turnRight() { turnLeft(); turnLeft(); turnLeft(); } public void move(int blocks) { for(int i = 0; i &lt; blocks; i++) { move(); paint(&quot;white&quot;); } } } . In this example, &#39;PainterPlus&#39; is a subclass of the superclass &#39;Painter&#39;. PainterPlus extends Painter, meaning PainterPlus inherits the characteristics of the preset class Painter. With this subclass, I can create constructors and methods to alternate the actions of the Painter. . Lines 2 and 3 represent the constructor signature. Constructors are a special type of method invoked to create objects from a class. . &#39;turnRight&#39; and &#39;move&#39; represent methods, or blocks of codes that only run when called upon. . public class MyNeighborhood { public static void main(String[] args) { // Lesson 6 Level 3 // TO DO #1: Instantiate a PainterPlus object. PainterPlus myPainterPlus = new PainterPlus(); myPainterPlus.move(3); myPainterPlus.turnRight(); myPainterPlus.move(2); // Lesson 7 Level 2 // TO DO #1: Navigate the PainterPlus object // to the traffic cone. } } . Here, I have instantiated an object called &quot;myPainterPlus&quot;, which has a behavior displayed upon by the objects. The object follows the given commands written below it. .",
            "url": "https://nicholasramos5.github.io/VSCodings/pbl/college%20board/java/2022/09/05/Code-org.html",
            "relUrl": "/pbl/college%20board/java/2022/09/05/Code-org.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Title",
            "content": "This is objects . public class Cool { String Height = &quot;very tall&quot;; int age = 16; } public class Main { public static void main(String[] args) { Cool myBeans = new Cool(); System.out.println(&quot;My height is &quot; + myBeans.Height); System.out.println(&quot;My age is &quot; + myBeans.age); } } Main.main(null) . My height is very tall My age is 16 . import java.util.Scanner; public class GuessingGame { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); double a = (1 + Math.random() * 100); int b = ((int) Math.floor(a)); Integer c = 0; System.out.println(&quot;What is the number?&quot;); c = scanner.nextInt(); while (!c.equals(b)) { System.out.println( c + &quot; was not the number&quot;); if (c &gt; b) { System.out.println(&quot;lower n&quot;); } if (c &lt; b) { System.out.println(&quot;higher n&quot;); } c = scanner.nextInt(); } if (c == b) { System.out.println(&quot;You guessed it! The number was &quot; + b); } } } .",
            "url": "https://nicholasramos5.github.io/VSCodings/2022/09/02/Java-Objects.html",
            "relUrl": "/2022/09/02/Java-Objects.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Title",
            "content": "{ &quot;cells&quot;: [ { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;# &quot;Java Primitives Notebook &quot; n&quot;, &quot;&gt; &quot;Captures Key Learnings of Primitives &quot; n&quot;, &quot; n&quot;, &quot;- toc: true n&quot;, &quot;- branch: master n&quot;, &quot;- badges: true n&quot;, &quot;- comments: true n&quot;, &quot;- categories: [KeyLearnings]&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;- Define in a Class the following data types n&quot;, &quot;- Demonstrate use of Primitives: int, double, boolean, string n&quot;, &quot;- Demonstrate use of Wrapper Class object: String n&quot;, &quot;- Describe in comments how each data type choice is appropriate to application n&quot;, &quot;- Perform arithmetic expressions and assignment in a program code Code.org Lesson n&quot;, &quot;- Determine what is result is in a variable as a result of an data type and expression (ie integer vs double) n&quot;, &quot;- Perform an arithmetic expressions that uses casting, add comments that show how it produces desired result. Learn more by watching this College Board video n&quot;, &quot;- Perform compound assignment operator (ie +=), add comments to describe the result of operator n&quot;, &quot; n&quot;, &quot;Code below, Collaborated with Don Tran&quot; ] }, ] } . | &#34;cells&#34;: [ not a statement | &#34;cells&#34;: [ &#39;;&#39; expected | &#34;cell_type&#34;: &#34;markdown&#34;, not a statement | &#34;cell_type&#34;: &#34;markdown&#34;, &#39;;&#39; expected | &#34;metadata&#34;: {}, illegal start of expression | }, illegal start of expression | &#34;cell_type&#34;: &#34;markdown&#34;, not a statement | &#34;cell_type&#34;: &#34;markdown&#34;, &#39;;&#39; expected | &#34;metadata&#34;: {}, illegal start of expression | }, illegal start of expression .",
            "url": "https://nicholasramos5.github.io/VSCodings/2022/08/28/javaclasses.html",
            "relUrl": "/2022/08/28/javaclasses.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Title",
            "content": "Define in a Class the following data types | Demonstrate use of Primitives: int, double, boolean, string | Demonstrate use of Wrapper Class object: String | Describe in comments how each data type choice is appropriate to application | Perform arithmetic expressions and assignment in a program code Code.org Lesson | Determine what is result is in a variable as a result of an data type and expression (ie integer vs double) | Perform an arithmetic expressions that uses casting, add comments that show how it produces desired result. Learn more by watching this College Board video | Perform compound assignment operator (ie +=), add comments to describe the result of operator | . import java.util.Scanner; public class Kitkatwrapper{ public static void main(String[] args) { Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Enter a salary between 0-1,000,000&quot;); // Number 1, gets salary double salary = myObj.nextDouble(); // Read user input double oldSalary = salary; // records oldsalary for percent calculation later System.out.println(&quot;Enter your pay raise&quot;); // Number 2, gets raise to salary double raise = myObj.nextDouble(); // Read user input salary += raise; // the inputted number of &quot;raise&quot; is added onto the original inputted &quot;salary&quot; int percent = (int) (100*(salary / oldSalary)-100); // calculates percent raise myObj.close(); // closing object, stops reading text inputs boolean payraisequality; // defines boolean variable String message; // defines message if(percent &gt; 5){ payraisequality = true; } else{ payraisequality = false; } if (payraisequality == true){ message = &quot;You got a good pay raise!&quot;; } else{ message = &quot;You got a bad pay raise.&quot;; } System.out.println(&quot;Your final salary is: &quot; + salary + &quot;, which is around a &quot; + percent + &quot;% raise from your original salary. &quot; + message); // Output user input } } Kitkatwrapper.main(null); . Enter a salary between 0-1,000,000 Enter your pay raise Your final salary is: 200050.0, which is around a 0% raise from your original salary. You got a bad pay raise. .",
            "url": "https://nicholasramos5.github.io/VSCodings/2022/08/26/Primitives-Notebook.html",
            "relUrl": "/2022/08/26/Primitives-Notebook.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Title",
            "content": "Bash Installation Checks . toc: true | badges: true | comments: true | categories: [jupyter] | . Checking if Java and Anaconda are installed . echo &quot;Lets check if Java is installed&quot; java --version echo &quot;&quot; echo &quot;Lets check if Annaconda is installed&quot; conda list . Lets check if Java is installed openjdk 11.0.16.1 2022-08-12 OpenJDK Runtime Environment Temurin-11.0.16.1+1 (build 11.0.16.1+1) OpenJDK 64-Bit Server VM Temurin-11.0.16.1+1 (build 11.0.16.1+1, mixed mode) Lets check if Annaconda is installed # packages in environment at /Users/nicholasramos/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.14.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . Updating a repository . export repository=VSCodings cd $HOME/$repository git fetch origin git pull origin master . From https://github.com/NicholasRamos5/VSCodings * branch master -&gt; FETCH_HEAD Already up to date. . Doing some Installations . Automate some of the installations for git, python, and java . arch -arm64 brew list arch -arm64 brew update arch -arm64 brew upgrade arch -arm64 brew install git arch -arm64 brew install python python --version arch -arm64 brew install java java --version javac --version . ==&gt; Formulae bdw-gc gmp libidn2 mpdecimal pkg-config ca-certificates gnutls libnghttp2 nettle python@3.10 emacs guile libtasn1 openjdk readline gdbm jansson libtool openssl@1.1 sqlite gettext libevent libunistring p11-kit unbound git libffi m4 pcre2 xz Updated 1 tap (homebrew/core). ==&gt; New Formulae agg ==&gt; Outdated Formulae bdw-gc guile libnghttp2 libtasn1 openjdk p11-kit You have 6 outdated formulae installed. You can upgrade them with brew upgrade or list them with brew outdated. ==&gt; Upgrading 6 outdated packages: bdw-gc 8.0.6 -&gt; 8.2.2 libnghttp2 1.48.0 -&gt; 1.49.0 openjdk 18.0.2 -&gt; 18.0.2.1 libtasn1 4.18.0 -&gt; 4.19.0 guile 3.0.8 -&gt; 3.0.8_2 p11-kit 0.24.1 -&gt; 0.24.1_1 ==&gt; Downloading https://ghcr.io/v2/homebrew/core/openjdk/manifests/18.0.2.1 Already downloaded: /Users/nicholasramos/Library/Caches/Homebrew/downloads/d1707cfc8fd479092c09b9e973cf8d728e04c0d4f42ed68d0952afd112198bc6--openjdk-18.0.2.1.bottle_manifest.json ==&gt; Downloading https://ghcr.io/v2/homebrew/core/openjdk/blobs/sha256:373ac8b65d Already downloaded: /Users/nicholasramos/Library/Caches/Homebrew/downloads/39fce67446ce41cbab8c6cac31ba67f0e7f8a0544522f358044927f6c26960a2--openjdk--18.0.2.1.arm64_monterey.bottle.tar.gz Error: SHA256 mismatch Expected: 373ac8b65daa370d2743649a606c96e0bccba510ebc7f47173c4c023f79d5378 Actual: b67e96fedb50f9a10c03e3ffbfcd2b18a8fd5646ab037e8f9c988389a781f4f7 File: /Users/nicholasramos/Library/Caches/Homebrew/downloads/39fce67446ce41cbab8c6cac31ba67f0e7f8a0544522f358044927f6c26960a2--openjdk--18.0.2.1.arm64_monterey.bottle.tar.gz To retry an incomplete download, remove the file above. Warning: git 2.37.2 is already installed and up-to-date. To reinstall 2.37.2, run: brew reinstall git Warning: python@3.10 3.10.6_1 is already installed and up-to-date. To reinstall 3.10.6_1, run: brew reinstall python@3.10 Python 3.9.12 openjdk is already installed but outdated (so it will be upgraded). ==&gt; Downloading https://ghcr.io/v2/homebrew/core/openjdk/manifests/18.0.2.1 Already downloaded: /Users/nicholasramos/Library/Caches/Homebrew/downloads/d1707cfc8fd479092c09b9e973cf8d728e04c0d4f42ed68d0952afd112198bc6--openjdk-18.0.2.1.bottle_manifest.json ==&gt; Downloading https://ghcr.io/v2/homebrew/core/openjdk/blobs/sha256:373ac8b65d Already downloaded: /Users/nicholasramos/Library/Caches/Homebrew/downloads/39fce67446ce41cbab8c6cac31ba67f0e7f8a0544522f358044927f6c26960a2--openjdk--18.0.2.1.arm64_monterey.bottle.tar.gz Error: openjdk: SHA256 mismatch Expected: 373ac8b65daa370d2743649a606c96e0bccba510ebc7f47173c4c023f79d5378 Actual: b67e96fedb50f9a10c03e3ffbfcd2b18a8fd5646ab037e8f9c988389a781f4f7 File: /Users/nicholasramos/Library/Caches/Homebrew/downloads/39fce67446ce41cbab8c6cac31ba67f0e7f8a0544522f358044927f6c26960a2--openjdk--18.0.2.1.arm64_monterey.bottle.tar.gz To retry an incomplete download, remove the file above. openjdk 11.0.16.1 2022-08-12 OpenJDK Runtime Environment Temurin-11.0.16.1+1 (build 11.0.16.1+1) OpenJDK 64-Bit Server VM Temurin-11.0.16.1+1 (build 11.0.16.1+1, mixed mode) javac 11.0.16.1 . Verify Installations . java --version python --version javac --version node --version . openjdk 11.0.16.1 2022-08-12 OpenJDK Runtime Environment Temurin-11.0.16.1+1 (build 11.0.16.1+1) OpenJDK 64-Bit Server VM Temurin-11.0.16.1+1 (build 11.0.16.1+1, mixed mode) Python 3.9.12 javac 11.0.16.1 v10.13.0 . Verify all kernels installed for Jupyter . jupyter kernelspec list . Available kernels: python2718jvsc74a57bd0949777d72b0d2535278d3dc13498b2535136f6dfe0678499012e853ee9abcab1 /Users/nicholasramos/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python2718jvsc74a57bd0949777d72b0d2535278d3dc13498b2535136f6dfe0678499012e853ee9abcab1 python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/nicholasramos/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python3912jvsc74a57bd01392cfe1d2907c9898063b417212eb4aacd4d21f15f27446a8daa8f6216b3201 /Users/nicholasramos/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd01392cfe1d2907c9898063b417212eb4aacd4d21f15f27446a8daa8f6216b3201 bash /Users/nicholasramos/Library/Jupyter/kernels/bash java /Users/nicholasramos/Library/Jupyter/kernels/java javascript /Users/nicholasramos/Library/Jupyter/kernels/javascript python3 /Users/nicholasramos/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://nicholasramos5.github.io/VSCodings/2022/08/26/Bash-Note.html",
            "relUrl": "/2022/08/26/Bash-Note.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "If and Else Statements (Booleans)",
            "content": "Booleans . A Boolean expression is a logical statement that can be evaluated to True or False. A Boolean expression may be composed of a combination of the Boolean constants true or false. . Assigned as variables: . boolean a = true; boolean b = false; System.out.println(&quot;variable a: &quot; + a + &quot; nvariable b: &quot; + b); . variable a: true variable b: false . Boolean Operators . There are three basic boolean operators. They are AND (&amp;&amp;), OR (||), and NOT (!). . With AND, both (all) statements must be true to produce and output of true. . With OR, only one of the statements must be true to produce and output of true. . With NOT, boolean outputs are reversed (true is false, false is true). . There are also comparison operators, which include the mathematical symbols &gt;, &lt;, &gt;=, &lt;=, and ==. These operators compare the numerical value of two numbers (integers or doubles), and provides a boolean output as to whether or not the statement is true or not. . Let&#39;s see these operators in some code. . boolean a = true &amp;&amp; true; //both are true boolean b = true &amp;&amp; false; //not both are true boolean c = true || false; //one is true boolean d = false || false; //neither are true boolean e = !true; // opposite of true System.out.println(&quot;variable a: &quot; + a + &quot; nvariable b: &quot; + b + &quot; nvariable c: &quot; + c + &quot; nvariable d: &quot; + d + &quot; nvariable e: &quot; + e); . variable a: true variable b: false variable c: true variable d: false variable e: false . boolean a = 5 &gt; 1; //true statement boolean b = 10 &lt; 3; //false statement boolean c = 7 &gt;= 7; //true statement System.out.println(&quot;variable a: &quot; + a + &quot; nvariable b: &quot; + b + &quot; nvariable c: &quot; + c); . variable a: true variable b: false variable c: true . If and Else Statements . If statements are statements that check if a condition is true or false. If a condition is true, it will perform an action/line of code it contains, if it is false, it will skip over the action/code block under the if statement. . An Else statements is an action/code block that performs if and only if the condition for the if statement is not true (false). . An Else If statement is a combination of If and Else statements where if a condition is not true, it will move into the else statement which has another if statement. . int a = 3; int b = 8; int c = 10; if (a &gt; b) { //this is false, so this code is ignored, else statement is followed if (a &gt; c){ System.out.println(&quot;a is the greatest number&quot;); } else { System.out.println(&quot;c is the greatesst number&quot;); } } else { //since if was false, &quot;else&quot; is true if (b &gt; c) {//this is false, so this code is ignored, else statement is followed System.out.println(&quot;b is the greatest number&quot;); } else { //if was false, this code is followed System.out.println(&quot;c is the greatest number&quot;); } } . c is the greatest number . Switch Case Statements . Switch Case Statements help simplify/manage the complexity of if else statements. Unlike if-then and if-then-else statements, the switch statement can have a number of possible execution paths. . It works by stating a variety of Case statements which all have conditions. The code blocks under each case are then run if the condition to one of the cases is met. Just like if else statements, Switch Case statements will go down each case to see if a condition is met. If it is met, the case&#39;s block of code will run and ignore the rest of the Switch Case statements (assuming each case is ended with a break statement). . int n = 3; String output; switch (n) { //variable passed in case 1: //condition checked if equals output = &quot;the number is 1&quot;; break; case 2: output = &quot;the number is 2&quot;; break; case 3: output = &quot;the number is 3&quot;; break; case 4: output = &quot;the number is 4&quot;; break; } System.out.println(output); . the number is 3 . The break statement is crucial, as it terminates the enclosing switch statement. The break statements are necessary because without them, statements in switch blocks fall through: All statements after the matching case label are executed in sequence, regardless of the expression of subsequent case labels, until a break statement is encountered . This is an example without break statements. . int n = 3; String output; switch (n) { case 1: output = &quot;the number is 1&quot;; case 2: output = &quot;the number is 2&quot;; case 3: output = &quot;the number is 3&quot;; case 4: output = &quot;the number is 4&quot;; } System.out.println(output); . the number is 4 . De Morgan&#39;s Law . De Morgan&#39;s Law states that in a boolean statement, the not operator ! will reverse all the operators in that statement. For instance, true becomes false, false becomes true, and becomes or, or becomes and, &gt; becomes &lt;=, &lt;= becomes &gt;, etc. . De Morgan&#39;s Law defines how we can negate an AND statement and how we can negate an OR statement. . !(a &amp;&amp; b) is equivalent to !a || !b !(a || b) is equivalent to !a &amp;&amp; !b . where a and b are boolean values . For example, the statements &quot;I don&#39;t like chocolate or vanilla&#39;&#39; and &quot;I do not like chocolate and I do not like vanilla&#39;&#39; clearly express the same thought. . Example code: . boolean a = true; boolean b = false; if (!(a || b)){ System.out.println(&quot;A and B both are false&quot;); } else{ System.out.println(&quot;A and B are true&quot;); } . A and B are true . boolean a = true; boolean b = false; if (!a &amp;&amp; !b){ System.out.println(&quot;A and B both are false&quot;); } else{ System.out.println(&quot;A and B are true&quot;); } . A and B are true . As shown above, both statements are equal given De Morgan&#39;s Law. It&#39;s important because of how they can break inversions as a complement of a complex boolean expression. .",
            "url": "https://nicholasramos5.github.io/VSCodings/pbl/college%20board/java/2020/09/12/Boolean.html",
            "relUrl": "/pbl/college%20board/java/2020/09/12/Boolean.html",
            "date": " • Sep 12, 2020"
        }
        
    
  
    
        ,"post41": {
            "title": "Title",
            "content": "{ &quot;cells&quot;: [ { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;# &quot;Bash Notebook &quot; n&quot;, &quot;&gt; &quot;Key Tools for Bash proof &quot; n&quot;, &quot; n&quot;, &quot;- toc: true n&quot;, &quot;- branch: master n&quot;, &quot;- badges: true n&quot;, &quot;- comments: true n&quot;, &quot;- categories: [KeyLearnings]&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;# Checking if Java and Anaconda are installed&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 1, &quot;metadata&quot;: { &quot;vscode&quot;: { &quot;languageId&quot;: &quot;shellscript&quot; } }, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;Lets check if Java is installed n&quot;, &quot;java 18.0.2.1 2022-08-18 n&quot;, &quot;Java(TM) SE Runtime Environment (build 18.0.2.1+1-1) n&quot;, &quot;Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-1, mixed mode, sharing) n&quot;, &quot; n&quot;, &quot;Lets check if Annaconda is installed n&quot;, &quot;# packages in environment at /Users/nathanmanangan/opt/anaconda3: n&quot;, &quot;# n&quot;, &quot;# Name Version Build Channel n&quot;, &quot;_ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 n&quot;, &quot;aiohttp 3.8.1 py39hca72f7f_1 n&quot;, &quot;aiosignal 1.2.0 pyhd3eb1b0_0 n&quot;, &quot;alabaster 0.7.12 pyhd3eb1b0_0 n&quot;, &quot;anaconda 2022.05 py39_0 n&quot;, &quot;anaconda-client 1.9.0 py39hecd8cb5_0 n&quot;, &quot;anaconda-navigator 2.1.4 py39hecd8cb5_0 n&quot;, &quot;anaconda-project 0.10.2 pyhd3eb1b0_0 n&quot;, &quot;anyio 3.5.0 py39hecd8cb5_0 n&quot;, &quot;appdirs 1.4.4 pyhd3eb1b0_0 n&quot;, &quot;applaunchservices 0.2.1 pyhd3eb1b0_0 n&quot;, &quot;appnope 0.1.2 py39hecd8cb5_1001 n&quot;, &quot;appscript 1.1.2 py39h9ed2024_0 n&quot;, &quot;argon2-cffi 21.3.0 pyhd3eb1b0_0 n&quot;, &quot;argon2-cffi-bindings 21.2.0 py39hca72f7f_0 n&quot;, &quot;arrow 1.2.2 pyhd3eb1b0_0 n&quot;, &quot;astroid 2.6.6 py39hecd8cb5_0 n&quot;, &quot;astropy 5.0.4 py39h67323c0_0 n&quot;, &quot;asttokens 2.0.5 pyhd3eb1b0_0 n&quot;, &quot;async-timeout 4.0.1 pyhd3eb1b0_0 n&quot;, &quot;atomicwrites 1.4.0 py_0 n&quot;, &quot;attrs 21.4.0 pyhd3eb1b0_0 n&quot;, &quot;automat 20.2.0 py_0 n&quot;, &quot;autopep8 1.6.0 pyhd3eb1b0_0 n&quot;, &quot;babel 2.9.1 pyhd3eb1b0_0 n&quot;, &quot;backcall 0.2.0 pyhd3eb1b0_0 n&quot;, &quot;backports 1.1 pyhd3eb1b0_0 n&quot;, &quot;backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 n&quot;, &quot;backports.tempfile 1.0 pyhd3eb1b0_1 n&quot;, &quot;backports.weakref 1.0.post1 py_1 n&quot;, &quot;bash-kernel 0.7.2 pypi_0 pypi n&quot;, &quot;bcrypt 3.2.0 py39h9ed2024_0 n&quot;, &quot;beautifulsoup4 4.11.1 py39hecd8cb5_0 n&quot;, &quot;binaryornot 0.4.4 pyhd3eb1b0_1 n&quot;, &quot;bitarray 2.4.1 py39hca72f7f_0 n&quot;, &quot;bkcharts 0.2 py39hecd8cb5_0 n&quot;, &quot;black 19.10b0 py_0 n&quot;, &quot;blas 1.0 mkl n&quot;, &quot;bleach 4.1.0 pyhd3eb1b0_0 n&quot;, &quot;blosc 1.21.0 h2842e9f_0 n&quot;, &quot;bokeh 2.4.2 py39hecd8cb5_0 n&quot;, &quot;boto3 1.21.32 pyhd3eb1b0_0 n&quot;, &quot;botocore 1.24.32 pyhd3eb1b0_0 n&quot;, &quot;bottleneck 1.3.4 py39h67323c0_0 n&quot;, &quot;brotli 1.0.9 hb1e8313_2 n&quot;, &quot;brotlipy 0.7.0 py39h9ed2024_1003 n&quot;, &quot;brunsli 0.1 h23ab428_0 n&quot;, &quot;bzip2 1.0.8 h1de35cc_0 n&quot;, &quot;c-ares 1.18.1 hca72f7f_0 n&quot;, &quot;ca-certificates 2022.3.29 hecd8cb5_1 n&quot;, &quot;cachetools 4.2.2 pyhd3eb1b0_0 n&quot;, &quot;certifi 2021.10.8 py39hecd8cb5_2 n&quot;, &quot;cffi 1.15.0 py39hc55c11b_1 n&quot;, &quot;cfitsio 3.470 hee0f690_6 n&quot;, &quot;chardet 4.0.0 py39hecd8cb5_1003 n&quot;, &quot;charls 2.2.0 h23ab428_0 n&quot;, &quot;charset-normalizer 2.0.4 pyhd3eb1b0_0 n&quot;, &quot;click 8.0.4 py39hecd8cb5_0 n&quot;, &quot;cloudpickle 2.0.0 pyhd3eb1b0_0 n&quot;, &quot;clyent 1.2.2 py39hecd8cb5_1 n&quot;, &quot;colorama 0.4.4 pyhd3eb1b0_0 n&quot;, &quot;colorcet 2.0.6 pyhd3eb1b0_0 n&quot;, &quot;conda 4.13.0 py39hecd8cb5_0 n&quot;, &quot;conda-build 3.21.8 py39hecd8cb5_2 n&quot;, &quot;conda-content-trust 0.1.1 pyhd3eb1b0_0 n&quot;, &quot;conda-env 2.6.0 1 n&quot;, &quot;conda-pack 0.6.0 pyhd3eb1b0_0 n&quot;, &quot;conda-package-handling 1.8.1 py39hca72f7f_0 n&quot;, &quot;conda-repo-cli 1.0.4 pyhd3eb1b0_0 n&quot;, &quot;conda-token 0.3.0 pyhd3eb1b0_0 n&quot;, &quot;conda-verify 3.4.2 py_1 n&quot;, &quot;constantly 15.1.0 pyh2b92418_0 n&quot;, &quot;cookiecutter 1.7.3 pyhd3eb1b0_0 n&quot;, &quot;cryptography 3.4.8 py39h2fd3fbb_0 n&quot;, &quot;cssselect 1.1.0 pyhd3eb1b0_0 n&quot;, &quot;curl 7.82.0 hca72f7f_0 n&quot;, &quot;cycler 0.11.0 pyhd3eb1b0_0 n&quot;, &quot;cython 0.29.28 py39he9d5cce_0 n&quot;, &quot;cytoolz 0.11.0 py39h9ed2024_0 n&quot;, &quot;daal4py 2021.5.0 py39h24a4e90_0 n&quot;, &quot;dal 2021.5.0 hecd8cb5_782 n&quot;, &quot;dask 2022.2.1 pyhd3eb1b0_0 n&quot;, &quot;dask-core 2022.2.1 pyhd3eb1b0_0 n&quot;, &quot;dataclasses 0.8 pyh6d0b6a4_7 n&quot;, &quot;datashader 0.13.0 pyhd3eb1b0_1 n&quot;, &quot;datashape 0.5.4 py39hecd8cb5_1 n&quot;, &quot;debugpy 1.5.1 py39he9d5cce_0 n&quot;, &quot;decorator 5.1.1 pyhd3eb1b0_0 n&quot;, &quot;defusedxml 0.7.1 pyhd3eb1b0_0 n&quot;, &quot;diff-match-patch 20200713 pyhd3eb1b0_0 n&quot;, &quot;distributed 2022.2.1 pyhd3eb1b0_0 n&quot;, &quot;docutils 0.17.1 py39hecd8cb5_1 n&quot;, &quot;entrypoints 0.4 py39hecd8cb5_0 n&quot;, &quot;et_xmlfile 1.1.0 py39hecd8cb5_0 n&quot;, &quot;executing 0.8.3 pyhd3eb1b0_0 n&quot;, &quot;filelock 3.6.0 pyhd3eb1b0_0 n&quot;, &quot;flake8 3.9.2 pyhd3eb1b0_0 n&quot;, &quot;flask 1.1.2 pyhd3eb1b0_0 n&quot;, &quot;fonttools 4.25.0 pyhd3eb1b0_0 n&quot;, &quot;freetype 2.11.0 hd8bbffd_0 n&quot;, &quot;frozenlist 1.2.0 py39hca72f7f_0 n&quot;, &quot;fsspec 2022.2.0 pyhd3eb1b0_0 n&quot;, &quot;future 0.18.2 py39hecd8cb5_1 n&quot;, &quot;gensim 4.1.2 py39he9d5cce_0 n&quot;, &quot;giflib 5.2.1 haf1e3a3_0 n&quot;, &quot;glob2 0.7 pyhd3eb1b0_0 n&quot;, &quot;gmp 6.2.1 h23ab428_2 n&quot;, &quot;gmpy2 2.1.2 py39hd5de756_0 n&quot;, &quot;google-api-core 1.25.1 pyhd3eb1b0_0 n&quot;, &quot;google-auth 1.33.0 pyhd3eb1b0_0 n&quot;, &quot;google-cloud-core 1.7.1 pyhd3eb1b0_0 n&quot;, &quot;google-cloud-storage 1.31.0 py_0 n&quot;, &quot;google-crc32c 1.1.2 py39h9ed2024_0 n&quot;, &quot;google-resumable-media 1.3.1 pyhd3eb1b0_1 n&quot;, &quot;googleapis-common-protos 1.53.0 py39hecd8cb5_0 n&quot;, &quot;greenlet 1.1.1 py39h23ab428_0 n&quot;, &quot;grpcio 1.42.0 py39ha29bfda_0 n&quot;, &quot;h5py 3.6.0 py39h4a1dd59_0 n&quot;, &quot;hdf5 1.10.6 hdbbcd12_0 n&quot;, &quot;heapdict 1.0.1 pyhd3eb1b0_0 n&quot;, &quot;holoviews 1.14.8 pyhd3eb1b0_0 n&quot;, &quot;hvplot 0.7.3 pyhd3eb1b0_1 n&quot;, &quot;hyperlink 21.0.0 pyhd3eb1b0_0 n&quot;, &quot;icu 58.2 h0a44026_3 n&quot;, &quot;idna 3.3 pyhd3eb1b0_0 n&quot;, &quot;imagecodecs 2021.8.26 py39ha952a84_0 n&quot;, &quot;imageio 2.9.0 pyhd3eb1b0_0 n&quot;, &quot;imagesize 1.3.0 pyhd3eb1b0_0 n&quot;, &quot;importlib-metadata 4.11.3 py39hecd8cb5_0 n&quot;, &quot;importlib_metadata 4.11.3 hd3eb1b0_0 n&quot;, &quot;incremental 21.3.0 pyhd3eb1b0_0 n&quot;, &quot;inflection 0.5.1 py39hecd8cb5_0 n&quot;, &quot;iniconfig 1.1.1 pyhd3eb1b0_0 n&quot;, &quot;intake 0.6.5 pyhd3eb1b0_0 n&quot;, &quot;intel-openmp 2021.4.0 hecd8cb5_3538 n&quot;, &quot;intervaltree 3.1.0 pyhd3eb1b0_0 n&quot;, &quot;ipykernel 6.9.1 py39hecd8cb5_0 n&quot;, &quot;ipython 8.2.0 py39hecd8cb5_0 n&quot;, &quot;ipython_genutils 0.2.0 pyhd3eb1b0_1 n&quot;, &quot;ipywidgets 7.6.5 pyhd3eb1b0_1 n&quot;, &quot;isort 5.9.3 pyhd3eb1b0_0 n&quot;, &quot;itemadapter 0.3.0 pyhd3eb1b0_0 n&quot;, &quot;itemloaders 1.0.4 pyhd3eb1b0_1 n&quot;, &quot;itsdangerous 2.0.1 pyhd3eb1b0_0 n&quot;, &quot;jdcal 1.4.1 pyhd3eb1b0_0 n&quot;, &quot;jedi 0.18.1 py39hecd8cb5_1 n&quot;, &quot;jinja2 2.11.3 pyhd3eb1b0_0 n&quot;, &quot;jinja2-time 0.2.0 pyhd3eb1b0_3 n&quot;, &quot;jmespath 0.10.0 pyhd3eb1b0_0 n&quot;, &quot;joblib 1.1.0 pyhd3eb1b0_0 n&quot;, &quot;jpeg 9e hca72f7f_0 n&quot;, &quot;jq 1.6 h9ed2024_1000 n&quot;, &quot;json5 0.9.6 pyhd3eb1b0_0 n&quot;, &quot;jsonschema 4.4.0 py39hecd8cb5_0 n&quot;, &quot;jupyter 1.0.0 py39hecd8cb5_7 n&quot;, &quot;jupyter_client 6.1.12 pyhd3eb1b0_0 n&quot;, &quot;jupyter_console 6.4.0 pyhd3eb1b0_0 n&quot;, &quot;jupyter_core 4.9.2 py39hecd8cb5_0 n&quot;, &quot;jupyter_server 1.13.5 pyhd3eb1b0_0 n&quot;, &quot;jupyterlab 3.3.2 pyhd3eb1b0_0 n&quot;, &quot;jupyterlab_pygments 0.1.2 py_0 n&quot;, &quot;jupyterlab_server 2.10.3 pyhd3eb1b0_1 n&quot;, &quot;jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 n&quot;, &quot;jxrlib 1.1 haf1e3a3_2 n&quot;, &quot;keyring 23.4.0 py39hecd8cb5_0 n&quot;, &quot;kiwisolver 1.3.2 py39he9d5cce_0 n&quot;, &quot;krb5 1.19.2 hcd88c3b_0 n&quot;, &quot;lazy-object-proxy 1.6.0 py39h9ed2024_0 n&quot;, &quot;lcms2 2.12 hf1fd2bf_0 n&quot;, &quot;lerc 3.0 he9d5cce_0 n&quot;, &quot;libaec 1.0.4 hb1e8313_1 n&quot;, &quot;libarchive 3.4.2 haa3ed63_0 n&quot;, &quot;libcrc32c 1.1.1 hb1e8313_2 n&quot;, &quot;libcurl 7.82.0 h6dfd666_0 n&quot;, &quot;libcxx 12.0.0 h2f01273_0 n&quot;, &quot;libdeflate 1.8 h9ed2024_5 n&quot;, &quot;libedit 3.1.20210910 hca72f7f_0 n&quot;, &quot;libev 4.33 h9ed2024_1 n&quot;, &quot;libffi 3.3 hb1e8313_2 n&quot;, &quot;libgfortran 3.0.1 h93005f0_2 n&quot;, &quot;libiconv 1.16 hca72f7f_2 n&quot;, &quot;libidn2 2.3.2 h9ed2024_0 n&quot;, &quot;liblief 0.11.5 he9d5cce_1 n&quot;, &quot;libllvm11 11.1.0 h46f1229_1 n&quot;, &quot;libnghttp2 1.46.0 ha29bfda_0 n&quot;, &quot;libpng 1.6.37 ha441bb4_0 n&quot;, &quot;libprotobuf 3.19.1 h8346a28_0 n&quot;, &quot;libsodium 1.0.18 h1de35cc_0 n&quot;, &quot;libspatialindex 1.9.3 h23ab428_0 n&quot;, &quot;libssh2 1.10.0 h0a4fc7d_0 n&quot;, &quot;libtiff 4.2.0 h87d7836_0 n&quot;, &quot;libunistring 0.9.10 h9ed2024_0 n&quot;, &quot;libwebp 1.2.2 h56c3ce4_0 n&quot;, &quot;libwebp-base 1.2.2 hca72f7f_0 n&quot;, &quot;libxml2 2.9.12 hcdb78fc_0 n&quot;, &quot;libxslt 1.1.34 h83b36ba_0 n&quot;, &quot;libzopfli 1.0.3 hb1e8313_0 n&quot;, &quot;llvm-openmp 12.0.0 h0dcd299_1 n&quot;, &quot;llvmlite 0.38.0 py39h8346a28_0 n&quot;, &quot;locket 0.2.1 py39hecd8cb5_2 n&quot;, &quot;lxml 4.8.0 py39h65b224f_0 n&quot;, &quot;lz4-c 1.9.3 h23ab428_1 n&quot;, &quot;lzo 2.10 haf1e3a3_2 n&quot;, &quot;markdown 3.3.4 py39hecd8cb5_0 n&quot;, &quot;markupsafe 2.0.1 py39h9ed2024_0 n&quot;, &quot;matplotlib 3.5.1 py39hecd8cb5_1 n&quot;, &quot;matplotlib-base 3.5.1 py39hfb0c5b7_1 n&quot;, &quot;matplotlib-inline 0.1.2 pyhd3eb1b0_2 n&quot;, &quot;mccabe 0.6.1 py39hecd8cb5_1 n&quot;, &quot;mistune 0.8.4 py39h9ed2024_1000 n&quot;, &quot;mkl 2021.4.0 hecd8cb5_637 n&quot;, &quot;mkl-service 2.4.0 py39h9ed2024_0 n&quot;, &quot;mkl_fft 1.3.1 py39h4ab4a9b_0 n&quot;, &quot;mkl_random 1.2.2 py39hb2f4e1b_0 n&quot;, &quot;mock 4.0.3 pyhd3eb1b0_0 n&quot;, &quot;mpc 1.1.0 h6ef4df4_1 n&quot;, &quot;mpfr 4.0.2 h9066e36_1 n&quot;, &quot;mpi 1.0 mpich n&quot;, &quot;mpich 3.3.2 hc856adb_0 n&quot;, &quot;mpmath 1.2.1 py39hecd8cb5_0 n&quot;, &quot;msgpack-python 1.0.2 py39hf7b0b51_1 n&quot;, &quot;multidict 5.2.0 py39hca72f7f_2 n&quot;, &quot;multipledispatch 0.6.0 py39hecd8cb5_0 n&quot;, &quot;munkres 1.1.4 py_0 n&quot;, &quot;mypy_extensions 0.4.3 py39hecd8cb5_1 n&quot;, &quot;navigator-updater 0.2.1 py39_1 n&quot;, &quot;nbclassic 0.3.5 pyhd3eb1b0_0 n&quot;, &quot;nbclient 0.5.13 py39hecd8cb5_0 n&quot;, &quot;nbconvert 6.4.4 py39hecd8cb5_0 n&quot;, &quot;nbformat 5.3.0 py39hecd8cb5_0 n&quot;, &quot;ncurses 6.3 hca72f7f_2 n&quot;, &quot;nest-asyncio 1.5.5 py39hecd8cb5_0 n&quot;, &quot;networkx 2.7.1 pyhd3eb1b0_0 n&quot;, &quot;nltk 3.7 pyhd3eb1b0_0 n&quot;, &quot;nodejs 10.13.0 h0a44026_0 n&quot;, &quot;nose 1.3.7 pyhd3eb1b0_1008 n&quot;, &quot;notebook 6.4.12 pypi_0 pypi n&quot;, &quot;numba 0.55.1 py39hae1ba45_0 n&quot;, &quot;numexpr 2.8.1 py39h2e5f0a9_0 n&quot;, &quot;numpy 1.21.5 py39h2e5f0a9_1 n&quot;, &quot;numpy-base 1.21.5 py39h3b1a694_1 n&quot;, &quot;numpydoc 1.2 pyhd3eb1b0_0 n&quot;, &quot;olefile 0.46 pyhd3eb1b0_0 n&quot;, &quot;oniguruma 6.9.7.1 h9ed2024_0 n&quot;, &quot;openjpeg 2.4.0 h66ea3da_0 n&quot;, &quot;openpyxl 3.0.9 pyhd3eb1b0_0 n&quot;, &quot;openssl 1.1.1n hca72f7f_0 n&quot;, &quot;packaging 21.3 pyhd3eb1b0_0 n&quot;, &quot;pandas 1.4.2 py39he9d5cce_0 n&quot;, &quot;pandocfilters 1.5.0 pyhd3eb1b0_0 n&quot;, &quot;panel 0.13.0 py39hecd8cb5_0 n&quot;, &quot;param 1.12.0 pyhd3eb1b0_0 n&quot;, &quot;parsel 1.6.0 py39hecd8cb5_0 n&quot;, &quot;parso 0.8.3 pyhd3eb1b0_0 n&quot;, &quot;partd 1.2.0 pyhd3eb1b0_1 n&quot;, &quot;pathspec 0.7.0 py_0 n&quot;, &quot;patsy 0.5.2 py39hecd8cb5_1 n&quot;, &quot;pep8 1.7.1 py39hecd8cb5_0 n&quot;, &quot;pexpect 4.8.0 pyhd3eb1b0_3 n&quot;, &quot;pickleshare 0.7.5 pyhd3eb1b0_1003 n&quot;, &quot;pillow 9.0.1 py39hde71d04_0 n&quot;, &quot;pip 21.2.4 py39hecd8cb5_0 n&quot;, &quot;pkginfo 1.8.2 pyhd3eb1b0_0 n&quot;, &quot;plotly 5.6.0 pyhd3eb1b0_0 n&quot;, &quot;pluggy 1.0.0 py39hecd8cb5_1 n&quot;, &quot;poyo 0.5.0 pyhd3eb1b0_0 n&quot;, &quot;prometheus_client 0.13.1 pyhd3eb1b0_0 n&quot;, &quot;prompt-toolkit 3.0.20 pyhd3eb1b0_0 n&quot;, &quot;prompt_toolkit 3.0.20 hd3eb1b0_0 n&quot;, &quot;protego 0.1.16 py_0 n&quot;, &quot;protobuf 3.19.1 py39he9d5cce_0 n&quot;, &quot;psutil 5.8.0 py39h9ed2024_1 n&quot;, &quot;ptyprocess 0.7.0 pyhd3eb1b0_2 n&quot;, &quot;pure_eval 0.2.2 pyhd3eb1b0_0 n&quot;, &quot;py 1.11.0 pyhd3eb1b0_0 n&quot;, &quot;py-lief 0.11.5 py39he9d5cce_1 n&quot;, &quot;pyasn1 0.4.8 pyhd3eb1b0_0 n&quot;, &quot;pyasn1-modules 0.2.8 py_0 n&quot;, &quot;pycodestyle 2.7.0 pyhd3eb1b0_0 n&quot;, &quot;pycosat 0.6.3 py39h9ed2024_0 n&quot;, &quot;pycparser 2.21 pyhd3eb1b0_0 n&quot;, &quot;pyct 0.4.6 py39hecd8cb5_0 n&quot;, &quot;pycurl 7.44.1 py39hbcfaee0_1 n&quot;, &quot;pydispatcher 2.0.5 py39hecd8cb5_2 n&quot;, &quot;pydocstyle 6.1.1 pyhd3eb1b0_0 n&quot;, &quot;pyerfa 2.0.0 py39h9ed2024_0 n&quot;, &quot;pyflakes 2.3.1 pyhd3eb1b0_0 n&quot;, &quot;pygments 2.11.2 pyhd3eb1b0_0 n&quot;, &quot;pyhamcrest 2.0.2 pyhd3eb1b0_2 n&quot;, &quot;pyjwt 2.1.0 py39hecd8cb5_0 n&quot;, &quot;pylint 2.9.6 py39hecd8cb5_1 n&quot;, &quot;pyls-spyder 0.4.0 pyhd3eb1b0_0 n&quot;, &quot;pyodbc 4.0.32 py39he9d5cce_1 n&quot;, &quot;pyopenssl 21.0.0 pyhd3eb1b0_1 n&quot;, &quot;pyparsing 3.0.4 pyhd3eb1b0_0 n&quot;, &quot;pyqt 5.9.2 py39h23ab428_6 n&quot;, &quot;pyrsistent 0.18.0 py39hca72f7f_0 n&quot;, &quot;pysocks 1.7.1 py39hecd8cb5_0 n&quot;, &quot;pytables 3.6.1 py39h648f197_1 n&quot;, &quot;pytest 7.1.1 py39hecd8cb5_0 n&quot;, &quot;python 3.9.12 hdfd78df_0 n&quot;, &quot;python-dateutil 2.8.2 pyhd3eb1b0_0 n&quot;, &quot;python-fastjsonschema 2.15.1 pyhd3eb1b0_0 n&quot;, &quot;python-libarchive-c 2.9 pyhd3eb1b0_1 n&quot;, &quot;python-lsp-black 1.0.0 pyhd3eb1b0_0 n&quot;, &quot;python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 n&quot;, &quot;python-lsp-server 1.2.4 pyhd3eb1b0_0 n&quot;, &quot;python-slugify 5.0.2 pyhd3eb1b0_0 n&quot;, &quot;python-snappy 0.6.0 py39h23ab428_3 n&quot;, &quot;python.app 3 py39hca72f7f_0 n&quot;, &quot;pytz 2021.3 pyhd3eb1b0_0 n&quot;, &quot;pyviz_comms 2.0.2 pyhd3eb1b0_0 n&quot;, &quot;pywavelets 1.3.0 py39hca72f7f_0 n&quot;, &quot;pyyaml 6.0 py39hca72f7f_1 n&quot;, &quot;pyzmq 22.3.0 py39he9d5cce_2 n&quot;, &quot;qdarkstyle 3.0.2 pyhd3eb1b0_0 n&quot;, &quot;qstylizer 0.1.10 pyhd3eb1b0_0 n&quot;, &quot;qt 5.9.7 h468cd18_1 n&quot;, &quot;qtawesome 1.0.3 pyhd3eb1b0_0 n&quot;, &quot;qtconsole 5.3.0 pyhd3eb1b0_0 n&quot;, &quot;qtpy 2.0.1 pyhd3eb1b0_0 n&quot;, &quot;queuelib 1.5.0 py39hecd8cb5_0 n&quot;, &quot;readline 8.1.2 hca72f7f_1 n&quot;, &quot;regex 2022.3.15 py39hca72f7f_0 n&quot;, &quot;requests 2.27.1 pyhd3eb1b0_0 n&quot;, &quot;requests-file 1.5.1 pyhd3eb1b0_0 n&quot;, &quot;ripgrep 12.1.1 0 n&quot;, &quot;rope 0.22.0 pyhd3eb1b0_0 n&quot;, &quot;rsa 4.7.2 pyhd3eb1b0_1 n&quot;, &quot;rtree 0.9.7 py39hecd8cb5_1 n&quot;, &quot;ruamel_yaml 0.15.100 py39h9ed2024_0 n&quot;, &quot;s3transfer 0.5.0 pyhd3eb1b0_0 n&quot;, &quot;scikit-image 0.19.2 py39hae1ba45_0 n&quot;, &quot;scikit-learn 1.0.2 py39hae1ba45_1 n&quot;, &quot;scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 n&quot;, &quot;scipy 1.7.3 py39h8c7af03_0 n&quot;, &quot;scrapy 2.6.1 py39hecd8cb5_0 n&quot;, &quot;seaborn 0.11.2 pyhd3eb1b0_0 n&quot;, &quot;send2trash 1.8.0 pyhd3eb1b0_1 n&quot;, &quot;service_identity 18.1.0 pyhd3eb1b0_1 n&quot;, &quot;setuptools 61.2.0 py39hecd8cb5_0 n&quot;, &quot;sip 4.19.13 py39h23ab428_0 n&quot;, &quot;six 1.16.0 pyhd3eb1b0_1 n&quot;, &quot;smart_open 5.1.0 pyhd3eb1b0_0 n&quot;, &quot;snappy 1.1.9 he9d5cce_0 n&quot;, &quot;sniffio 1.2.0 py39hecd8cb5_1 n&quot;, &quot;snowballstemmer 2.2.0 pyhd3eb1b0_0 n&quot;, &quot;sortedcollections 2.1.0 pyhd3eb1b0_0 n&quot;, &quot;sortedcontainers 2.4.0 pyhd3eb1b0_0 n&quot;, &quot;soupsieve 2.3.1 pyhd3eb1b0_0 n&quot;, &quot;sphinx 4.4.0 pyhd3eb1b0_0 n&quot;, &quot;sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 n&quot;, &quot;sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 n&quot;, &quot;sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 n&quot;, &quot;sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 n&quot;, &quot;sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 n&quot;, &quot;sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 n&quot;, &quot;spyder 5.1.5 py39hecd8cb5_1 n&quot;, &quot;spyder-kernels 2.1.3 py39hecd8cb5_0 n&quot;, &quot;sqlalchemy 1.4.32 py39hca72f7f_0 n&quot;, &quot;sqlite 3.38.2 h707629a_0 n&quot;, &quot;stack_data 0.2.0 pyhd3eb1b0_0 n&quot;, &quot;statsmodels 0.13.2 py39hca72f7f_0 n&quot;, &quot;sympy 1.10.1 py39hecd8cb5_0 n&quot;, &quot;tabulate 0.8.9 py39hecd8cb5_0 n&quot;, &quot;tbb 2021.5.0 haf03e11_0 n&quot;, &quot;tbb4py 2021.5.0 py39haf03e11_0 n&quot;, &quot;tblib 1.7.0 pyhd3eb1b0_0 n&quot;, &quot;tenacity 8.0.1 py39hecd8cb5_0 n&quot;, &quot;terminado 0.13.1 py39hecd8cb5_0 n&quot;, &quot;testpath 0.5.0 pyhd3eb1b0_0 n&quot;, &quot;text-unidecode 1.3 pyhd3eb1b0_0 n&quot;, &quot;textdistance 4.2.1 pyhd3eb1b0_0 n&quot;, &quot;threadpoolctl 2.2.0 pyh0d69192_0 n&quot;, &quot;three-merge 0.1.1 pyhd3eb1b0_0 n&quot;, &quot;tifffile 2021.7.2 pyhd3eb1b0_2 n&quot;, &quot;tinycss 0.4 pyhd3eb1b0_1002 n&quot;, &quot;tk 8.6.11 h7bc2e8c_0 n&quot;, &quot;tldextract 3.2.0 pyhd3eb1b0_0 n&quot;, &quot;toml 0.10.2 pyhd3eb1b0_0 n&quot;, &quot;tomli 1.2.2 pyhd3eb1b0_0 n&quot;, &quot;toolz 0.11.2 pyhd3eb1b0_0 n&quot;, &quot;tornado 6.1 py39h9ed2024_0 n&quot;, &quot;tqdm 4.64.0 py39hecd8cb5_0 n&quot;, &quot;traitlets 5.1.1 pyhd3eb1b0_0 n&quot;, &quot;twisted 22.2.0 py39hca72f7f_0 n&quot;, &quot;typed-ast 1.4.3 py39h9ed2024_1 n&quot;, &quot;typing-extensions 4.1.1 hd3eb1b0_0 n&quot;, &quot;typing_extensions 4.1.1 pyh06a4308_0 n&quot;, &quot;tzdata 2022a hda174b7_0 n&quot;, &quot;ujson 5.1.0 py39he9d5cce_0 n&quot;, &quot;unidecode 1.2.0 pyhd3eb1b0_0 n&quot;, &quot;unixodbc 2.3.9 haf1e3a3_0 n&quot;, &quot;urllib3 1.26.9 py39hecd8cb5_0 n&quot;, &quot;w3lib 1.21.0 pyhd3eb1b0_0 n&quot;, &quot;watchdog 2.1.6 py39h999c104_0 n&quot;, &quot;wcwidth 0.2.5 pyhd3eb1b0_0 n&quot;, &quot;webencodings 0.5.1 py39hecd8cb5_1 n&quot;, &quot;websocket-client 0.58.0 py39hecd8cb5_4 n&quot;, &quot;werkzeug 2.0.3 pyhd3eb1b0_0 n&quot;, &quot;wget 1.21.3 h6dfd666_0 n&quot;, &quot;wheel 0.37.1 pyhd3eb1b0_0 n&quot;, &quot;widgetsnbextension 3.5.2 py39hecd8cb5_0 n&quot;, &quot;wrapt 1.12.1 py39h9ed2024_1 n&quot;, &quot;wurlitzer 3.0.2 py39hecd8cb5_0 n&quot;, &quot;xarray 0.20.1 pyhd3eb1b0_1 n&quot;, &quot;xlrd 2.0.1 pyhd3eb1b0_0 n&quot;, &quot;xlsxwriter 3.0.3 pyhd3eb1b0_0 n&quot;, &quot;xlwings 0.24.9 py39hecd8cb5_0 n&quot;, &quot;xz 5.2.5 h1de35cc_0 n&quot;, &quot;yaml 0.2.5 haf1e3a3_0 n&quot;, &quot;yapf 0.31.0 pyhd3eb1b0_0 n&quot;, &quot;yarl 1.6.3 py39h9ed2024_0 n&quot;, &quot;zeromq 4.3.4 h23ab428_0 n&quot;, &quot;zfp 0.5.5 he9d5cce_6 n&quot;, &quot;zict 2.0.0 pyhd3eb1b0_0 n&quot;, &quot;zipp 3.7.0 pyhd3eb1b0_0 n&quot;, &quot;zlib 1.2.12 h4dc903c_2 n&quot;, &quot;zope 1.0 py39hecd8cb5_1 n&quot;, &quot;zope.interface 5.4.0 py39h9ed2024_0 n&quot;, &quot;zstd 1.4.9 h322a384_0 n&quot; ] } ], &quot;source&quot;: [ &quot;echo &quot;Lets check if Java is installed &quot; n&quot;, &quot;java --version n&quot;, &quot; n&quot;, &quot;echo &quot; &quot; n&quot;, &quot;echo &quot;Lets check if Annaconda is installed &quot; n&quot;, &quot;conda list&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;# Updating a repository&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 2, &quot;metadata&quot;: { &quot;vscode&quot;: { &quot;languageId&quot;: &quot;shellscript&quot; } }, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;remote: Enumerating objects: 168, done. n&quot;, &quot;remote: Counting objects: 100% (168/168), done. n&quot;, &quot;remote: Compressing objects: 100% (53/53), done. n&quot;, &quot;remote: Total 168 (delta 70), reused 163 (delta 65), pack-reused 0 n&quot;, &quot;Receiving objects: 100% (168/168), 52.67 KiB | 1.10 MiB/s, done. n&quot;, &quot;Resolving deltas: 100% (70/70), completed with 11 local objects. n&quot;, &quot;From https://github.com/ProRichyMan/CSA-Fastpages n&quot;, &quot; 9f5e7f3..c0f83ef gh-pages -&gt; origin/gh-pages n&quot;, &quot;From https://github.com/ProRichyMan/CSA-Fastpages n&quot;, &quot; * branch master -&gt; FETCH_HEAD n&quot;, &quot;Already up to date. n&quot; ] } ], &quot;source&quot;: [ &quot;export repository=CSA-FASTPAGES n&quot;, &quot;export repo_main_folder=vscode n&quot;, &quot;cd $HOME/$repo_main_folder/CSA-FASTPAGES n&quot;, &quot;git fetch origin n&quot;, &quot;git pull origin master&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;# Doing some Installations n&quot;, &quot;Automizes some of the installations, specifically git, python, and java!&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 3, &quot;metadata&quot;: { &quot;vscode&quot;: { &quot;languageId&quot;: &quot;shellscript&quot; } }, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot; u001b[34m==&gt; u001b[0m u001b[1mFormulae u001b[0m n&quot;, &quot;ca-certificates tgit t topenssl@1.1 treadline txz n&quot;, &quot;gdbm t tmpdecimal tpcre2 t tspring-boot n&quot;, &quot;gettext t topenjdk t tpython@3.10 tsqlite n&quot;, &quot;Updated 1 tap (homebrew/core). n&quot;, &quot; u001b[34m==&gt; u001b[0m u001b[1mNew Formulae u001b[0m n&quot;, &quot;ghorg linux-headers@5.15 shaderc n&quot;, &quot;kalign pymol swiftdraw n&quot;, &quot; u001b[34m==&gt; u001b[0m u001b[1mOutdated Formulae u001b[0m n&quot;, &quot;openjdk n&quot;, &quot; n&quot;, &quot;You have u001b[1m1 u001b[0m outdated formula installed. n&quot;, &quot;You can upgrade it with u001b[1mbrew upgrade u001b[0m n&quot;, &quot;or list it with u001b[1mbrew outdated u001b[0m. n&quot;, &quot; u001b[32m==&gt; u001b[0m u001b[1mUpgrading 1 outdated package: u001b[0m n&quot;, &quot;openjdk 18.0.2 -&gt; 18.0.2.1 n&quot;, &quot; u001b[34m==&gt; u001b[0m u001b[1mDownloading https://ghcr.io/v2/homebrew/core/openjdk/manifests/18.0.2.1 u001b[0m n&quot;, &quot;######################################################################## 100.0% n&quot;, &quot; u001b[34m==&gt; u001b[0m u001b[1mDownloading https://ghcr.io/v2/homebrew/core/openjdk/blobs/sha256:373ac8b65d u001b[0m n&quot;, &quot; u001b[34m==&gt; u001b[0m u001b[1mDownloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sh u001b[0m n&quot;, &quot;######################################################################## 100.0% n&quot;, &quot; u001b[32m==&gt; u001b[0m u001b[1mUpgrading u001b[32mopenjdk u001b[39m n&quot;, &quot; 18.0.2 -&gt; 18.0.2.1 n&quot;, &quot; u001b[0m n&quot;, &quot; u001b[34m==&gt; u001b[0m u001b[1mPouring openjdk--18.0.2.1.arm64_monterey.bottle.tar.gz u001b[0m n&quot;, &quot; u001b[34m==&gt; u001b[0m u001b[1mCaveats u001b[0m n&quot;, &quot;For the system Java wrappers to find this JDK, symlink it with n&quot;, &quot; sudo ln -sfn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk n&quot;, &quot; n&quot;, &quot;openjdk is keg-only, which means it was not symlinked into /opt/homebrew, n&quot;, &quot;because macOS provides similar software and installing this software in n&quot;, &quot;parallel can cause all kinds of trouble. n&quot;, &quot; n&quot;, &quot;If you need to have openjdk first in your PATH, run: n&quot;, &quot; echo &#39;export PATH= &quot;/opt/homebrew/opt/openjdk/bin:$PATH &quot;&#39; &gt;&gt; ~/.zshrc n&quot;, &quot; n&quot;, &quot;For compilers to find openjdk you may need to set: n&quot;, &quot; export CPPFLAGS= &quot;-I/opt/homebrew/opt/openjdk/include &quot; n&quot;, &quot; n&quot;, &quot; u001b[34m==&gt; u001b[0m u001b[1mSummary u001b[0m n&quot;, &quot;🍺 /opt/homebrew/Cellar/openjdk/18.0.2.1: 642 files, 309MB n&quot;, &quot; u001b[34m==&gt; u001b[0m u001b[1mRunning brew cleanup openjdk... u001b[0m n&quot;, &quot;Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP. n&quot;, &quot;Hide these hints with HOMEBREW_NO_ENV_HINTS (see man brew). n&quot;, &quot;Removing: /opt/homebrew/Cellar/openjdk/18.0.2... (642 files, 309MB) n&quot;, &quot;Removing: /Users/nathanmanangan/Library/Caches/Homebrew/openjdk--18.0.2... (180.3MB) n&quot;, &quot; u001b[33mWarning: u001b[0m git 2.37.2 is already installed and up-to-date. n&quot;, &quot;To reinstall 2.37.2, run: n&quot;, &quot; brew reinstall git n&quot;, &quot; u001b[33mWarning: u001b[0m python@3.10 3.10.6_1 is already installed and up-to-date. n&quot;, &quot;To reinstall 3.10.6_1, run: n&quot;, &quot; brew reinstall python@3.10 n&quot;, &quot;Python 3.9.12 n&quot;, &quot; u001b[33mWarning: u001b[0m openjdk 18.0.2.1 is already installed and up-to-date. n&quot;, &quot;To reinstall 18.0.2.1, run: n&quot;, &quot; brew reinstall openjdk n&quot;, &quot;java 18.0.2.1 2022-08-18 n&quot;, &quot;Java(TM) SE Runtime Environment (build 18.0.2.1+1-1) n&quot;, &quot;Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-1, mixed mode, sharing) n&quot;, &quot;javac 18.0.2.1 n&quot; ] } ], &quot;source&quot;: [ &quot;arch -arm64 brew list n&quot;, &quot;arch -arm64 brew update n&quot;, &quot;arch -arm64 brew upgrade n&quot;, &quot;arch -arm64 brew install git n&quot;, &quot;arch -arm64 brew install python n&quot;, &quot;python --version n&quot;, &quot;arch -arm64 brew install java n&quot;, &quot;java --version n&quot;, &quot;javac --version&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 4, &quot;metadata&quot;: { &quot;vscode&quot;: { &quot;languageId&quot;: &quot;shellscript&quot; } }, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;java 18.0.2.1 2022-08-18 n&quot;, &quot;Java(TM) SE Runtime Environment (build 18.0.2.1+1-1) n&quot;, &quot;Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-1, mixed mode, sharing) n&quot;, &quot;Python 3.9.12 n&quot;, &quot;javac 18.0.2.1 n&quot;, &quot;v10.13.0 n&quot; ] } ], &quot;source&quot;: [ &quot;java --version n&quot;, &quot;python --version n&quot;, &quot;javac --version n&quot;, &quot;node --version&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;Shows all of the kernels installed for Jupyter&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 5, &quot;metadata&quot;: { &quot;vscode&quot;: { &quot;languageId&quot;: &quot;shellscript&quot; } }, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;Available kernels: n&quot;, &quot; python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/nathanmanangan/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e n&quot;, &quot; python3912jvsc74a57bd063f284042fb87dad5a12beb55d64e6088ab71ccd3f72ccdf84694aa4fa281d07 /Users/nathanmanangan/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd063f284042fb87dad5a12beb55d64e6088ab71ccd3f72ccdf84694aa4fa281d07 n&quot;, &quot; bash /Users/nathanmanangan/Library/Jupyter/kernels/bash n&quot;, &quot; java /Users/nathanmanangan/Library/Jupyter/kernels/java n&quot;, &quot; javascript /Users/nathanmanangan/Library/Jupyter/kernels/javascript n&quot;, &quot; python3 /Users/nathanmanangan/opt/anaconda3/share/jupyter/kernels/python3 n&quot; ] } ], &quot;source&quot;: [ &quot;jupyter kernelspec list&quot; ] } ], &quot;metadata&quot;: { &quot;kernelspec&quot;: { &quot;display_name&quot;: &quot;Bash&quot;, &quot;language&quot;: &quot;bash&quot;, &quot;name&quot;: &quot;bash&quot; }, &quot;language_info&quot;: { &quot;codemirror_mode&quot;: &quot;shell&quot;, &quot;file_extension&quot;: &quot;.sh&quot;, &quot;mimetype&quot;: &quot;text/x-sh&quot;, &quot;name&quot;: &quot;bash&quot; }, &quot;orig_nbformat&quot;: 4 }, &quot;nbformat&quot;: 4, &quot;nbformat_minor&quot;: 2 } .",
            "url": "https://nicholasramos5.github.io/VSCodings/2020/08/29/Jupyter.html",
            "relUrl": "/2020/08/29/Jupyter.html",
            "date": " • Aug 29, 2020"
        }
        
    
  
    
        ,"post42": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://nicholasramos5.github.io/VSCodings/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post43": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://nicholasramos5.github.io/VSCodings/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  

  
      ,"page3": {
          "title": "PBL",
          "content": "PBL Features . This is where I will have information regarding PBL | .",
          "url": "https://nicholasramos5.github.io/VSCodings/_pages/PBL.html",
          "relUrl": "/_pages/PBL.html",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://nicholasramos5.github.io/VSCodings/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page6": {
          "title": "Notes",
          "content": "Hello my name is Nicholas .",
          "url": "https://nicholasramos5.github.io/VSCodings/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nicholasramos5.github.io/VSCodings/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}